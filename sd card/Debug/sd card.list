
sd card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003e40  08003e40  00004e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ecc  08003ecc  0000507c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ecc  08003ecc  00004ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed4  08003ed4  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ed8  08003ed8  00004ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08003edc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000507c  2**0
                  CONTENTS
 10 .bss          00001488  2000007c  2000007c  0000507c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001504  20001504  0000507c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc64  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208b  00000000  00000000  00011d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  00013da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000922  00000000  00000000  00014990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e15  00000000  00000000  000152b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fddf  00000000  00000000  000370c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7b0f  00000000  00000000  00046ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e9b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037e8  00000000  00000000  0010e9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001121e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e28 	.word	0x08003e28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08003e28 	.word	0x08003e28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*) ptr, len, 100);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b29a      	uxth	r2, r3
 8000570:	2364      	movs	r3, #100	@ 0x64
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <_write+0x24>)
 8000576:	f001 fbce 	bl	8001d16 <HAL_UART_Transmit>
	return len;
 800057a:	687b      	ldr	r3, [r7, #4]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200000f0 	.word	0x200000f0

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fb20 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f834 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8fc 	bl	8000790 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000598:	f000 f89a 	bl	80006d0 <MX_SPI1_Init>
  MX_FATFS_Init();
 800059c:	f001 ff76 	bl	800248c <MX_FATFS_Init>
  MX_UART5_Init();
 80005a0:	f000 f8cc 	bl	800073c <MX_UART5_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("Starting...\n\r");
 80005a4:	480f      	ldr	r0, [pc, #60]	@ (80005e4 <main+0x5c>)
 80005a6:	f002 fdd1 	bl	800314c <iprintf>
		// Mount the SD card
		res = f_mount(&fs, "", 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	490e      	ldr	r1, [pc, #56]	@ (80005e8 <main+0x60>)
 80005ae:	480f      	ldr	r0, [pc, #60]	@ (80005ec <main+0x64>)
 80005b0:	f002 fc68 	bl	8002e84 <f_mount>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <main+0x68>)
 80005ba:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <main+0x68>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d103      	bne.n	80005cc <main+0x44>
			// Mount was successful
			printf("Mount was successful\n\r");
 80005c4:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <main+0x6c>)
 80005c6:	f002 fdc1 	bl	800314c <iprintf>
 80005ca:	e005      	b.n	80005d8 <main+0x50>
		} else {
			// Mount failed
			printf("Mount failed\n\r : %u",res);
 80005cc:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <main+0x68>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4809      	ldr	r0, [pc, #36]	@ (80005f8 <main+0x70>)
 80005d4:	f002 fdba 	bl	800314c <iprintf>

		}
		HAL_Delay(3000);
 80005d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005dc:	f000 fb6a 	bl	8000cb4 <HAL_Delay>
		printf("Starting...\n\r");
 80005e0:	e7e0      	b.n	80005a4 <main+0x1c>
 80005e2:	bf00      	nop
 80005e4:	08003e40 	.word	0x08003e40
 80005e8:	08003e50 	.word	0x08003e50
 80005ec:	20000138 	.word	0x20000138
 80005f0:	20001170 	.word	0x20001170
 80005f4:	08003e54 	.word	0x08003e54
 80005f8:	08003e6c 	.word	0x08003e6c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fdf3 	bl	80031f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000670:	23a8      	movs	r3, #168	@ 0xa8
 8000672:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fdd7 	bl	8001234 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 f8d0 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2105      	movs	r1, #5
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f838 	bl	8001724 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ba:	f000 f8b9 	bl	8000830 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f001 fa1f 	bl	8001b64 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f880 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000098 	.word	0x20000098
 8000738:	40013000 	.word	0x40013000

0800073c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_UART5_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_UART5_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_UART5_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_UART5_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_UART5_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_UART5_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_UART5_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_UART5_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_UART5_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_UART5_Init+0x4c>)
 8000774:	f001 fa7f 	bl	8001c76 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f857 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000f0 	.word	0x200000f0
 800078c:	40005000 	.word	0x40005000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_GPIO_Init+0x98>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2110      	movs	r1, #16
 80007fe:	480b      	ldr	r0, [pc, #44]	@ (800082c <MX_GPIO_Init+0x9c>)
 8000800:	f000 fcfe 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000804:	2310      	movs	r3, #16
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_GPIO_Init+0x9c>)
 800081c:	f000 fb54 	bl	8000ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000850:	6453      	str	r3, [r2, #68]	@ 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087a:	2007      	movs	r0, #7
 800087c:	f000 faf0 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	@ (8000910 <HAL_SPI_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <HAL_SPI_MspInit+0x88>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_SPI_MspInit+0x88>)
 80008b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_SPI_MspInit+0x88>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <HAL_SPI_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <HAL_SPI_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <HAL_SPI_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e6:	23e0      	movs	r3, #224	@ 0xe0
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f6:	2305      	movs	r3, #5
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	@ (8000918 <HAL_SPI_MspInit+0x8c>)
 8000902:	f000 fae1 	bl	8000ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <HAL_UART_MspInit+0xc0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d14a      	bne.n	80009d4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a26      	ldr	r2, [pc, #152]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 8000948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a1f      	ldr	r2, [pc, #124]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <HAL_UART_MspInit+0xc4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009a4:	2308      	movs	r3, #8
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <HAL_UART_MspInit+0xc8>)
 80009b0:	f000 fa8a 	bl	8000ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b4:	2304      	movs	r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009c4:	2308      	movs	r3, #8
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	@ (80009e8 <HAL_UART_MspInit+0xcc>)
 80009d0:	f000 fa7a 	bl	8000ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	@ 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40005000 	.word	0x40005000
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 f917 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e00a      	b.n	8000a72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5c:	f3af 8000 	nop.w
 8000a60:	4601      	mov	r1, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	60ba      	str	r2, [r7, #8]
 8000a68:	b2ca      	uxtb	r2, r1
 8000a6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	dbf0      	blt.n	8000a5c <_read+0x12>
  }

  return len;
 8000a7a:	687b      	ldr	r3, [r7, #4]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aac:	605a      	str	r2, [r3, #4]
  return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_isatty>:

int _isatty(int file)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f002 fbba 	bl	8003294 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20020000 	.word	0x20020000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20001174 	.word	0x20001174
 8000b54:	20001508 	.word	0x20001508

08000b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b80:	f7ff ffea 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f002 fb79 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fceb 	bl	8000588 <main>
  bx  lr    
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000bc0:	08003edc 	.word	0x08003edc
  ldr r2, =_sbss
 8000bc4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000bc8:	20001504 	.word	0x20001504

08000bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <HAL_Init+0x40>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <HAL_Init+0x40>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_Init+0x40>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f931 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe1a 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f93b 	bl	8000eae <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c50:	f000 f911 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20001178 	.word	0x20001178

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20001178 	.word	0x20001178

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	@ 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff47 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff5c 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffb0 	bl	8000e1c <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	@ 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e16b      	b.n	80011bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 815a 	bne.w	80011b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d005      	beq.n	8000f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d130      	bne.n	8000f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d017      	beq.n	8000fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	69b9      	ldr	r1, [r7, #24]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80b4 	beq.w	80011b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b60      	ldr	r3, [pc, #384]	@ (80011d4 <HAL_GPIO_Init+0x30c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a5f      	ldr	r2, [pc, #380]	@ (80011d4 <HAL_GPIO_Init+0x30c>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b5d      	ldr	r3, [pc, #372]	@ (80011d4 <HAL_GPIO_Init+0x30c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a5b      	ldr	r2, [pc, #364]	@ (80011d8 <HAL_GPIO_Init+0x310>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a52      	ldr	r2, [pc, #328]	@ (80011dc <HAL_GPIO_Init+0x314>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d02b      	beq.n	80010ee <HAL_GPIO_Init+0x226>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a51      	ldr	r2, [pc, #324]	@ (80011e0 <HAL_GPIO_Init+0x318>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d025      	beq.n	80010ea <HAL_GPIO_Init+0x222>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a50      	ldr	r2, [pc, #320]	@ (80011e4 <HAL_GPIO_Init+0x31c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01f      	beq.n	80010e6 <HAL_GPIO_Init+0x21e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4f      	ldr	r2, [pc, #316]	@ (80011e8 <HAL_GPIO_Init+0x320>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0x21a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4e      	ldr	r2, [pc, #312]	@ (80011ec <HAL_GPIO_Init+0x324>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x216>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4d      	ldr	r2, [pc, #308]	@ (80011f0 <HAL_GPIO_Init+0x328>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x212>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	@ (80011f4 <HAL_GPIO_Init+0x32c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x20e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	@ (80011f8 <HAL_GPIO_Init+0x330>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x20a>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00e      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010d2:	2308      	movs	r3, #8
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x228>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	@ (80011d8 <HAL_GPIO_Init+0x310>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b3b      	ldr	r3, [pc, #236]	@ (80011fc <HAL_GPIO_Init+0x334>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a32      	ldr	r2, [pc, #200]	@ (80011fc <HAL_GPIO_Init+0x334>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b30      	ldr	r3, [pc, #192]	@ (80011fc <HAL_GPIO_Init+0x334>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a27      	ldr	r2, [pc, #156]	@ (80011fc <HAL_GPIO_Init+0x334>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001162:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <HAL_GPIO_Init+0x334>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001186:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118c:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <HAL_GPIO_Init+0x334>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b0:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae90 	bls.w	8000ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	@ 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40021c00 	.word	0x40021c00
 80011fc:	40013c00 	.word	0x40013c00

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800121c:	e003      	b.n	8001226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	041a      	lsls	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	619a      	str	r2, [r3, #24]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e267      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	4b88      	ldr	r3, [pc, #544]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b85      	ldr	r3, [pc, #532]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b82      	ldr	r3, [pc, #520]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e242      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b76      	ldr	r3, [pc, #472]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b69      	ldr	r3, [pc, #420]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fcd6 	bl	8000c9c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fcd2 	bl	8000c9c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	@ 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e207      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5b      	ldr	r3, [pc, #364]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fcc2 	bl	8000c9c <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fcbe 	bl	8000c9c <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	@ 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1f3      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b51      	ldr	r3, [pc, #324]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	4b4a      	ldr	r3, [pc, #296]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b47      	ldr	r3, [pc, #284]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c7      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4937      	ldr	r1, [pc, #220]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <HAL_RCC_OscConfig+0x244>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fc77 	bl	8000c9c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc73 	bl	8000c9c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a8      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4925      	ldr	r1, [pc, #148]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc56 	bl	8000c9c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc52 	bl	8000c9c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e187      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_RCC_OscConfig+0x248>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fc36 	bl	8000c9c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fc32 	bl	8000c9c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e167      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_RCC_OscConfig+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fc1f 	bl	8000c9c <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fc1b 	bl	8000c9c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e150      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ea      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8097 	beq.w	80015c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a7c      	ldr	r2, [pc, #496]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b7a      	ldr	r3, [pc, #488]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b77      	ldr	r3, [pc, #476]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b74      	ldr	r3, [pc, #464]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fbdb 	bl	8000c9c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fbd7 	bl	8000c9c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e10c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b6a      	ldr	r3, [pc, #424]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x2ea>
 8001510:	4b64      	ldr	r3, [pc, #400]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001514:	4a63      	ldr	r2, [pc, #396]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	@ 0x70
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x30c>
 8001526:	4b5f      	ldr	r3, [pc, #380]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152a:	4a5e      	ldr	r2, [pc, #376]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	@ 0x70
 8001532:	4b5c      	ldr	r3, [pc, #368]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001536:	4a5b      	ldr	r2, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	@ 0x70
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 8001540:	4b58      	ldr	r3, [pc, #352]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001544:	4a57      	ldr	r2, [pc, #348]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	@ 0x70
 800154c:	4b55      	ldr	r3, [pc, #340]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001550:	4a54      	ldr	r2, [pc, #336]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fb9c 	bl	8000c9c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fb98 	bl	8000c9c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0cb      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b49      	ldr	r3, [pc, #292]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ee      	beq.n	8001568 <HAL_RCC_OscConfig+0x334>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fb86 	bl	8000c9c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fb82 	bl	8000c9c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0b5      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a38      	ldr	r2, [pc, #224]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d2:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d05c      	beq.n	8001698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb56 	bl	8000c9c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb52 	bl	8000c9c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	491b      	ldr	r1, [pc, #108]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb2b 	bl	8000c9c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fb27 	bl	8000c9c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e05c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x416>
 8001668:	e054      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb14 	bl	8000c9c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb10 	bl	8000c9c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e045      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e038      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff fa42 	bl	8000c9c <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff fa3e 	bl	8000c9c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f9a2 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08003e80 	.word	0x08003e80
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b094      	sub	sp, #80	@ 0x50
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80018fc:	2300      	movs	r3, #0
 80018fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001900:	2300      	movs	r3, #0
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b79      	ldr	r3, [pc, #484]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80e1 	bhi.w	8001adc <HAL_RCC_GetSysClockFreq+0x1ec>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e0db      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b73      	ldr	r3, [pc, #460]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001928:	e0db      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b73      	ldr	r3, [pc, #460]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x208>)
 800192c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800192e:	e0d8      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001938:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b6a      	ldr	r3, [pc, #424]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001950:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001958:	633b      	str	r3, [r7, #48]	@ 0x30
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
 800195e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001962:	4622      	mov	r2, r4
 8001964:	462b      	mov	r3, r5
 8001966:	f04f 0000 	mov.w	r0, #0
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	0159      	lsls	r1, r3, #5
 8001970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001974:	0150      	lsls	r0, r2, #5
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4621      	mov	r1, r4
 800197c:	1a51      	subs	r1, r2, r1
 800197e:	6139      	str	r1, [r7, #16]
 8001980:	4629      	mov	r1, r5
 8001982:	eb63 0301 	sbc.w	r3, r3, r1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001994:	4659      	mov	r1, fp
 8001996:	018b      	lsls	r3, r1, #6
 8001998:	4651      	mov	r1, sl
 800199a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199e:	4651      	mov	r1, sl
 80019a0:	018a      	lsls	r2, r1, #6
 80019a2:	4651      	mov	r1, sl
 80019a4:	ebb2 0801 	subs.w	r8, r2, r1
 80019a8:	4659      	mov	r1, fp
 80019aa:	eb63 0901 	sbc.w	r9, r3, r1
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c2:	4690      	mov	r8, r2
 80019c4:	4699      	mov	r9, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	eb18 0303 	adds.w	r3, r8, r3
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	462b      	mov	r3, r5
 80019d0:	eb49 0303 	adc.w	r3, r9, r3
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019e2:	4629      	mov	r1, r5
 80019e4:	024b      	lsls	r3, r1, #9
 80019e6:	4621      	mov	r1, r4
 80019e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019ec:	4621      	mov	r1, r4
 80019ee:	024a      	lsls	r2, r1, #9
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f6:	2200      	movs	r2, #0
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a00:	f7fe fc36 	bl	8000270 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a0c:	e058      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	2200      	movs	r2, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	4611      	mov	r1, r2
 8001a1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a1e:	623b      	str	r3, [r7, #32]
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a28:	4642      	mov	r2, r8
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	f04f 0000 	mov.w	r0, #0
 8001a30:	f04f 0100 	mov.w	r1, #0
 8001a34:	0159      	lsls	r1, r3, #5
 8001a36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3a:	0150      	lsls	r0, r2, #5
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4641      	mov	r1, r8
 8001a42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a46:	4649      	mov	r1, r9
 8001a48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a60:	ebb2 040a 	subs.w	r4, r2, sl
 8001a64:	eb63 050b 	sbc.w	r5, r3, fp
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	00eb      	lsls	r3, r5, #3
 8001a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a76:	00e2      	lsls	r2, r4, #3
 8001a78:	4614      	mov	r4, r2
 8001a7a:	461d      	mov	r5, r3
 8001a7c:	4643      	mov	r3, r8
 8001a7e:	18e3      	adds	r3, r4, r3
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	464b      	mov	r3, r9
 8001a84:	eb45 0303 	adc.w	r3, r5, r3
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a96:	4629      	mov	r1, r5
 8001a98:	028b      	lsls	r3, r1, #10
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	028a      	lsls	r2, r1, #10
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	61fa      	str	r2, [r7, #28]
 8001ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab4:	f7fe fbdc 	bl	8000270 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	3301      	adds	r3, #1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001ad0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3750      	adds	r7, #80	@ 0x50
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b18:	f7ff fff0 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0a9b      	lsrs	r3, r3, #10
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	@ (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08003e90 	.word	0x08003e90

08001b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b40:	f7ff ffdc 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0b5b      	lsrs	r3, r3, #13
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4903      	ldr	r1, [pc, #12]	@ (8001b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08003e90 	.word	0x08003e90

08001b64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07b      	b.n	8001c6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d108      	bne.n	8001b90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b86:	d009      	beq.n	8001b9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
 8001b8e:	e005      	b.n	8001b9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fe68 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c20:	ea42 0103 	orr.w	r1, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	f003 0104 	and.w	r1, r3, #4
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	f003 0210 	and.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e042      	b.n	8001d0e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d106      	bne.n	8001ca2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7fe fe3d 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2224      	movs	r2, #36	@ 0x24
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cb8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f972 	bl	8001fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cde:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b08a      	sub	sp, #40	@ 0x28
 8001d1a:	af02      	add	r7, sp, #8
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d175      	bne.n	8001e22 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_UART_Transmit+0x2c>
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06e      	b.n	8001e24 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2221      	movs	r2, #33	@ 0x21
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d54:	f7fe ffa2 	bl	8000c9c <HAL_GetTick>
 8001d58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d6e:	d108      	bne.n	8001d82 <HAL_UART_Transmit+0x6c>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d104      	bne.n	8001d82 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	e003      	b.n	8001d8a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d8a:	e02e      	b.n	8001dea <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2200      	movs	r2, #0
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f848 	bl	8001e2c <UART_WaitOnFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e03a      	b.n	8001e24 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10b      	bne.n	8001dcc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dc2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	e007      	b.n	8001ddc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1cb      	bne.n	8001d8c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2140      	movs	r1, #64	@ 0x40
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f814 	bl	8001e2c <UART_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e006      	b.n	8001e24 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e3c:	e03b      	b.n	8001eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e44:	d037      	beq.n	8001eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e46:	f7fe ff29 	bl	8000c9c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	6a3a      	ldr	r2, [r7, #32]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d302      	bcc.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e03a      	b.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d023      	beq.n	8001eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b80      	cmp	r3, #128	@ 0x80
 8001e72:	d020      	beq.n	8001eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b40      	cmp	r3, #64	@ 0x40
 8001e78:	d01d      	beq.n	8001eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d116      	bne.n	8001eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f81d 	bl	8001ede <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	bf0c      	ite	eq
 8001ec6:	2301      	moveq	r3, #1
 8001ec8:	2300      	movne	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d0b4      	beq.n	8001e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b095      	sub	sp, #84	@ 0x54
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	330c      	adds	r3, #12
 8001eec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef0:	e853 3f00 	ldrex	r3, [r3]
 8001ef4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	330c      	adds	r3, #12
 8001f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f06:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f0e:	e841 2300 	strex	r3, r2, [r1]
 8001f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e5      	bne.n	8001ee6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3314      	adds	r3, #20
 8001f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	e853 3f00 	ldrex	r3, [r3]
 8001f28:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3314      	adds	r3, #20
 8001f38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f42:	e841 2300 	strex	r3, r2, [r1]
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e5      	bne.n	8001f1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d119      	bne.n	8001f8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	330c      	adds	r3, #12
 8001f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	e853 3f00 	ldrex	r3, [r3]
 8001f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f023 0310 	bic.w	r3, r3, #16
 8001f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	330c      	adds	r3, #12
 8001f74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f76:	61ba      	str	r2, [r7, #24]
 8001f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7a:	6979      	ldr	r1, [r7, #20]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	e841 2300 	strex	r3, r2, [r1]
 8001f82:	613b      	str	r3, [r7, #16]
   return(result);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1e5      	bne.n	8001f56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f98:	bf00      	nop
 8001f9a:	3754      	adds	r7, #84	@ 0x54
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa8:	b0c0      	sub	sp, #256	@ 0x100
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc0:	68d9      	ldr	r1, [r3, #12]
 8001fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	ea40 0301 	orr.w	r3, r0, r1
 8001fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001ffc:	f021 010c 	bic.w	r1, r1, #12
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800200a:	430b      	orrs	r3, r1
 800200c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800201a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201e:	6999      	ldr	r1, [r3, #24]
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	ea40 0301 	orr.w	r3, r0, r1
 800202a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b8f      	ldr	r3, [pc, #572]	@ (8002270 <UART_SetConfig+0x2cc>)
 8002034:	429a      	cmp	r2, r3
 8002036:	d005      	beq.n	8002044 <UART_SetConfig+0xa0>
 8002038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b8d      	ldr	r3, [pc, #564]	@ (8002274 <UART_SetConfig+0x2d0>)
 8002040:	429a      	cmp	r2, r3
 8002042:	d104      	bne.n	800204e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002044:	f7ff fd7a 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 8002048:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800204c:	e003      	b.n	8002056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800204e:	f7ff fd61 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8002052:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002060:	f040 810c 	bne.w	800227c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002068:	2200      	movs	r2, #0
 800206a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800206e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002076:	4622      	mov	r2, r4
 8002078:	462b      	mov	r3, r5
 800207a:	1891      	adds	r1, r2, r2
 800207c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800207e:	415b      	adcs	r3, r3
 8002080:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002086:	4621      	mov	r1, r4
 8002088:	eb12 0801 	adds.w	r8, r2, r1
 800208c:	4629      	mov	r1, r5
 800208e:	eb43 0901 	adc.w	r9, r3, r1
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800209e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020a6:	4690      	mov	r8, r2
 80020a8:	4699      	mov	r9, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	eb18 0303 	adds.w	r3, r8, r3
 80020b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020b4:	462b      	mov	r3, r5
 80020b6:	eb49 0303 	adc.w	r3, r9, r3
 80020ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020d2:	460b      	mov	r3, r1
 80020d4:	18db      	adds	r3, r3, r3
 80020d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80020d8:	4613      	mov	r3, r2
 80020da:	eb42 0303 	adc.w	r3, r2, r3
 80020de:	657b      	str	r3, [r7, #84]	@ 0x54
 80020e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020e8:	f7fe f8c2 	bl	8000270 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4b61      	ldr	r3, [pc, #388]	@ (8002278 <UART_SetConfig+0x2d4>)
 80020f2:	fba3 2302 	umull	r2, r3, r3, r2
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	011c      	lsls	r4, r3, #4
 80020fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002104:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800210c:	4642      	mov	r2, r8
 800210e:	464b      	mov	r3, r9
 8002110:	1891      	adds	r1, r2, r2
 8002112:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002114:	415b      	adcs	r3, r3
 8002116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800211c:	4641      	mov	r1, r8
 800211e:	eb12 0a01 	adds.w	sl, r2, r1
 8002122:	4649      	mov	r1, r9
 8002124:	eb43 0b01 	adc.w	fp, r3, r1
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800213c:	4692      	mov	sl, r2
 800213e:	469b      	mov	fp, r3
 8002140:	4643      	mov	r3, r8
 8002142:	eb1a 0303 	adds.w	r3, sl, r3
 8002146:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800214a:	464b      	mov	r3, r9
 800214c:	eb4b 0303 	adc.w	r3, fp, r3
 8002150:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002160:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002168:	460b      	mov	r3, r1
 800216a:	18db      	adds	r3, r3, r3
 800216c:	643b      	str	r3, [r7, #64]	@ 0x40
 800216e:	4613      	mov	r3, r2
 8002170:	eb42 0303 	adc.w	r3, r2, r3
 8002174:	647b      	str	r3, [r7, #68]	@ 0x44
 8002176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800217a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800217e:	f7fe f877 	bl	8000270 <__aeabi_uldivmod>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4611      	mov	r1, r2
 8002188:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <UART_SetConfig+0x2d4>)
 800218a:	fba3 2301 	umull	r2, r3, r3, r1
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2264      	movs	r2, #100	@ 0x64
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	1acb      	subs	r3, r1, r3
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800219e:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <UART_SetConfig+0x2d4>)
 80021a0:	fba3 2302 	umull	r2, r3, r3, r2
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021ac:	441c      	add	r4, r3
 80021ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021c0:	4642      	mov	r2, r8
 80021c2:	464b      	mov	r3, r9
 80021c4:	1891      	adds	r1, r2, r2
 80021c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021c8:	415b      	adcs	r3, r3
 80021ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021d0:	4641      	mov	r1, r8
 80021d2:	1851      	adds	r1, r2, r1
 80021d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80021d6:	4649      	mov	r1, r9
 80021d8:	414b      	adcs	r3, r1
 80021da:	637b      	str	r3, [r7, #52]	@ 0x34
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021e8:	4659      	mov	r1, fp
 80021ea:	00cb      	lsls	r3, r1, #3
 80021ec:	4651      	mov	r1, sl
 80021ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f2:	4651      	mov	r1, sl
 80021f4:	00ca      	lsls	r2, r1, #3
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	4642      	mov	r2, r8
 80021fe:	189b      	adds	r3, r3, r2
 8002200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002204:	464b      	mov	r3, r9
 8002206:	460a      	mov	r2, r1
 8002208:	eb42 0303 	adc.w	r3, r2, r3
 800220c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800221c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002224:	460b      	mov	r3, r1
 8002226:	18db      	adds	r3, r3, r3
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800222a:	4613      	mov	r3, r2
 800222c:	eb42 0303 	adc.w	r3, r2, r3
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800223a:	f7fe f819 	bl	8000270 <__aeabi_uldivmod>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <UART_SetConfig+0x2d4>)
 8002244:	fba3 1302 	umull	r1, r3, r3, r2
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	2164      	movs	r1, #100	@ 0x64
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	3332      	adds	r3, #50	@ 0x32
 8002256:	4a08      	ldr	r2, [pc, #32]	@ (8002278 <UART_SetConfig+0x2d4>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	095b      	lsrs	r3, r3, #5
 800225e:	f003 0207 	and.w	r2, r3, #7
 8002262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4422      	add	r2, r4
 800226a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800226c:	e106      	b.n	800247c <UART_SetConfig+0x4d8>
 800226e:	bf00      	nop
 8002270:	40011000 	.word	0x40011000
 8002274:	40011400 	.word	0x40011400
 8002278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800227c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002280:	2200      	movs	r2, #0
 8002282:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002286:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800228a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800228e:	4642      	mov	r2, r8
 8002290:	464b      	mov	r3, r9
 8002292:	1891      	adds	r1, r2, r2
 8002294:	6239      	str	r1, [r7, #32]
 8002296:	415b      	adcs	r3, r3
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
 800229a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800229e:	4641      	mov	r1, r8
 80022a0:	1854      	adds	r4, r2, r1
 80022a2:	4649      	mov	r1, r9
 80022a4:	eb43 0501 	adc.w	r5, r3, r1
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	00eb      	lsls	r3, r5, #3
 80022b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b6:	00e2      	lsls	r2, r4, #3
 80022b8:	4614      	mov	r4, r2
 80022ba:	461d      	mov	r5, r3
 80022bc:	4643      	mov	r3, r8
 80022be:	18e3      	adds	r3, r4, r3
 80022c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022c4:	464b      	mov	r3, r9
 80022c6:	eb45 0303 	adc.w	r3, r5, r3
 80022ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022ea:	4629      	mov	r1, r5
 80022ec:	008b      	lsls	r3, r1, #2
 80022ee:	4621      	mov	r1, r4
 80022f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022f4:	4621      	mov	r1, r4
 80022f6:	008a      	lsls	r2, r1, #2
 80022f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022fc:	f7fd ffb8 	bl	8000270 <__aeabi_uldivmod>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4b60      	ldr	r3, [pc, #384]	@ (8002488 <UART_SetConfig+0x4e4>)
 8002306:	fba3 2302 	umull	r2, r3, r3, r2
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	011c      	lsls	r4, r3, #4
 800230e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002312:	2200      	movs	r2, #0
 8002314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002318:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800231c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002320:	4642      	mov	r2, r8
 8002322:	464b      	mov	r3, r9
 8002324:	1891      	adds	r1, r2, r2
 8002326:	61b9      	str	r1, [r7, #24]
 8002328:	415b      	adcs	r3, r3
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002330:	4641      	mov	r1, r8
 8002332:	1851      	adds	r1, r2, r1
 8002334:	6139      	str	r1, [r7, #16]
 8002336:	4649      	mov	r1, r9
 8002338:	414b      	adcs	r3, r1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002348:	4659      	mov	r1, fp
 800234a:	00cb      	lsls	r3, r1, #3
 800234c:	4651      	mov	r1, sl
 800234e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002352:	4651      	mov	r1, sl
 8002354:	00ca      	lsls	r2, r1, #3
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	4603      	mov	r3, r0
 800235c:	4642      	mov	r2, r8
 800235e:	189b      	adds	r3, r3, r2
 8002360:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002364:	464b      	mov	r3, r9
 8002366:	460a      	mov	r2, r1
 8002368:	eb42 0303 	adc.w	r3, r2, r3
 800236c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	67bb      	str	r3, [r7, #120]	@ 0x78
 800237a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002388:	4649      	mov	r1, r9
 800238a:	008b      	lsls	r3, r1, #2
 800238c:	4641      	mov	r1, r8
 800238e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002392:	4641      	mov	r1, r8
 8002394:	008a      	lsls	r2, r1, #2
 8002396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800239a:	f7fd ff69 	bl	8000270 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	4b38      	ldr	r3, [pc, #224]	@ (8002488 <UART_SetConfig+0x4e4>)
 80023a6:	fba3 2301 	umull	r2, r3, r3, r1
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2264      	movs	r2, #100	@ 0x64
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	1acb      	subs	r3, r1, r3
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	3332      	adds	r3, #50	@ 0x32
 80023b8:	4a33      	ldr	r2, [pc, #204]	@ (8002488 <UART_SetConfig+0x4e4>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c4:	441c      	add	r4, r3
 80023c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023ca:	2200      	movs	r2, #0
 80023cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80023ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80023d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023d4:	4642      	mov	r2, r8
 80023d6:	464b      	mov	r3, r9
 80023d8:	1891      	adds	r1, r2, r2
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	415b      	adcs	r3, r3
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e4:	4641      	mov	r1, r8
 80023e6:	1851      	adds	r1, r2, r1
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	4649      	mov	r1, r9
 80023ec:	414b      	adcs	r3, r1
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023fc:	4659      	mov	r1, fp
 80023fe:	00cb      	lsls	r3, r1, #3
 8002400:	4651      	mov	r1, sl
 8002402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002406:	4651      	mov	r1, sl
 8002408:	00ca      	lsls	r2, r1, #3
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	4603      	mov	r3, r0
 8002410:	4642      	mov	r2, r8
 8002412:	189b      	adds	r3, r3, r2
 8002414:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002416:	464b      	mov	r3, r9
 8002418:	460a      	mov	r2, r1
 800241a:	eb42 0303 	adc.w	r3, r2, r3
 800241e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	663b      	str	r3, [r7, #96]	@ 0x60
 800242a:	667a      	str	r2, [r7, #100]	@ 0x64
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002438:	4649      	mov	r1, r9
 800243a:	008b      	lsls	r3, r1, #2
 800243c:	4641      	mov	r1, r8
 800243e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002442:	4641      	mov	r1, r8
 8002444:	008a      	lsls	r2, r1, #2
 8002446:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800244a:	f7fd ff11 	bl	8000270 <__aeabi_uldivmod>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <UART_SetConfig+0x4e4>)
 8002454:	fba3 1302 	umull	r1, r3, r3, r2
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	2164      	movs	r1, #100	@ 0x64
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	3332      	adds	r3, #50	@ 0x32
 8002466:	4a08      	ldr	r2, [pc, #32]	@ (8002488 <UART_SetConfig+0x4e4>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4422      	add	r2, r4
 800247a:	609a      	str	r2, [r3, #8]
}
 800247c:	bf00      	nop
 800247e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002482:	46bd      	mov	sp, r7
 8002484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002488:	51eb851f 	.word	0x51eb851f

0800248c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002490:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <MX_FATFS_Init+0x18>)
 8002492:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <MX_FATFS_Init+0x1c>)
 8002494:	f000 fd88 	bl	8002fa8 <FATFS_LinkDriver>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <MX_FATFS_Init+0x20>)
 800249e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20001180 	.word	0x20001180
 80024a8:	2000000c 	.word	0x2000000c
 80024ac:	2000117c 	.word	0x2000117c

080024b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <USER_initialize+0x24>)
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
    return Stat;
 80024c0:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <USER_initialize+0x24>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000009 	.word	0x20000009

080024d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <USER_status+0x24>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <USER_status+0x24>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000009 	.word	0x20000009

08002500 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8002510:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800252e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	603a      	str	r2, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
 8002548:	460b      	mov	r3, r1
 800254a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
    return res;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <disk_status+0x30>)
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	79fa      	ldrb	r2, [r7, #7]
 8002578:	4905      	ldr	r1, [pc, #20]	@ (8002590 <disk_status+0x30>)
 800257a:	440a      	add	r2, r1
 800257c:	7a12      	ldrb	r2, [r2, #8]
 800257e:	4610      	mov	r0, r2
 8002580:	4798      	blx	r3
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200013ac 	.word	0x200013ac

08002594 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	4a0e      	ldr	r2, [pc, #56]	@ (80025e0 <disk_initialize+0x4c>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d114      	bne.n	80025d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4a0c      	ldr	r2, [pc, #48]	@ (80025e0 <disk_initialize+0x4c>)
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	79fa      	ldrb	r2, [r7, #7]
 80025ba:	4909      	ldr	r1, [pc, #36]	@ (80025e0 <disk_initialize+0x4c>)
 80025bc:	440a      	add	r2, r1
 80025be:	7a12      	ldrb	r2, [r2, #8]
 80025c0:	4610      	mov	r0, r2
 80025c2:	4798      	blx	r3
 80025c4:	4603      	mov	r3, r0
 80025c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	4a03      	ldr	r2, [pc, #12]	@ (80025e0 <disk_initialize+0x4c>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200013ac 	.word	0x200013ac

080025e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <disk_read+0x3c>)
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	689c      	ldr	r4, [r3, #8]
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <disk_read+0x3c>)
 8002604:	4413      	add	r3, r2
 8002606:	7a18      	ldrb	r0, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	47a0      	blx	r4
 8002610:	4603      	mov	r3, r0
 8002612:	75fb      	strb	r3, [r7, #23]
  return res;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
}
 8002616:	4618      	mov	r0, r3
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}
 800261e:	bf00      	nop
 8002620:	200013ac 	.word	0x200013ac

08002624 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	4603      	mov	r3, r0
 8002632:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <disk_write+0x3c>)
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	68dc      	ldr	r4, [r3, #12]
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	4a07      	ldr	r2, [pc, #28]	@ (8002660 <disk_write+0x3c>)
 8002644:	4413      	add	r3, r2
 8002646:	7a18      	ldrb	r0, [r3, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	47a0      	blx	r4
 8002650:	4603      	mov	r3, r0
 8002652:	75fb      	strb	r3, [r7, #23]
  return res;
 8002654:	7dfb      	ldrb	r3, [r7, #23]
}
 8002656:	4618      	mov	r0, r3
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	bf00      	nop
 8002660:	200013ac 	.word	0x200013ac

08002664 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	603a      	str	r2, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
 8002670:	460b      	mov	r3, r1
 8002672:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4a09      	ldr	r2, [pc, #36]	@ (800269c <disk_ioctl+0x38>)
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	4906      	ldr	r1, [pc, #24]	@ (800269c <disk_ioctl+0x38>)
 8002684:	440a      	add	r2, r1
 8002686:	7a10      	ldrb	r0, [r2, #8]
 8002688:	79b9      	ldrb	r1, [r7, #6]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	4798      	blx	r3
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
  return res;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200013ac 	.word	0x200013ac

080026a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3301      	adds	r3, #1
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b21b      	sxth	r3, r3
 80026c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80026c2:	89fb      	ldrh	r3, [r7, #14]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3303      	adds	r3, #3
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	3202      	adds	r2, #2
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	3201      	adds	r2, #1
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	7812      	ldrb	r2, [r2, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
	return rv;
 8002708:	68fb      	ldr	r3, [r7, #12]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e010      	b.n	8002748 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002726:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <clear_lock+0x44>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d105      	bne.n	8002742 <clear_lock+0x2a>
 8002736:	4a09      	ldr	r2, [pc, #36]	@ (800275c <clear_lock+0x44>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	4413      	add	r3, r2
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3301      	adds	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d9eb      	bls.n	8002726 <clear_lock+0xe>
	}
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	2000118c 	.word	0x2000118c

08002760 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	78db      	ldrb	r3, [r3, #3]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d034      	beq.n	80027de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002778:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7858      	ldrb	r0, [r3, #1]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002784:	2301      	movs	r3, #1
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	f7ff ff4c 	bl	8002624 <disk_write>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <sync_window+0x38>
			res = FR_DISK_ERR;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	e022      	b.n	80027de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d217      	bcs.n	80027de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	789b      	ldrb	r3, [r3, #2]
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	e010      	b.n	80027d8 <sync_window+0x78>
					wsect += fs->fsize;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7858      	ldrb	r0, [r3, #1]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80027ca:	2301      	movs	r3, #1
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	f7ff ff29 	bl	8002624 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d8eb      	bhi.n	80027b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d01b      	beq.n	8002838 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffad 	bl	8002760 <sync_window>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d113      	bne.n	8002838 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7858      	ldrb	r0, [r3, #1]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800281a:	2301      	movs	r3, #1
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	f7ff fee1 	bl	80025e4 <disk_read>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800282c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002842:	b480      	push	{r7}
 8002844:	b087      	sub	sp, #28
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800284a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800284e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d031      	beq.n	80028bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e002      	b.n	8002866 <get_ldnumber+0x24>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b1f      	cmp	r3, #31
 800286c:	d903      	bls.n	8002876 <get_ldnumber+0x34>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b3a      	cmp	r3, #58	@ 0x3a
 8002874:	d1f4      	bne.n	8002860 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b3a      	cmp	r3, #58	@ 0x3a
 800287c:	d11c      	bne.n	80028b8 <get_ldnumber+0x76>
			tp = *path;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	60fa      	str	r2, [r7, #12]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	3b30      	subs	r3, #48	@ 0x30
 800288e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b09      	cmp	r3, #9
 8002894:	d80e      	bhi.n	80028b4 <get_ldnumber+0x72>
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	429a      	cmp	r2, r3
 800289c:	d10a      	bne.n	80028b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <get_ldnumber+0x72>
					vol = (int)i;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	e002      	b.n	80028be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80028bc:	693b      	ldr	r3, [r7, #16]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	70da      	strb	r2, [r3, #3]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028e2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80028e4:	6839      	ldr	r1, [r7, #0]
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ff7e 	bl	80027e8 <move_window>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <check_fs+0x2a>
 80028f2:	2304      	movs	r3, #4
 80028f4:	e038      	b.n	8002968 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3338      	adds	r3, #56	@ 0x38
 80028fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fece 	bl	80026a0 <ld_word>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <check_fs+0x48>
 8002910:	2303      	movs	r3, #3
 8002912:	e029      	b.n	8002968 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800291a:	2be9      	cmp	r3, #233	@ 0xe9
 800291c:	d009      	beq.n	8002932 <check_fs+0x66>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002924:	2beb      	cmp	r3, #235	@ 0xeb
 8002926:	d11e      	bne.n	8002966 <check_fs+0x9a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800292e:	2b90      	cmp	r3, #144	@ 0x90
 8002930:	d119      	bne.n	8002966 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3338      	adds	r3, #56	@ 0x38
 8002936:	3336      	adds	r3, #54	@ 0x36
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fec9 	bl	80026d0 <ld_dword>
 800293e:	4603      	mov	r3, r0
 8002940:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002944:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <check_fs+0xa4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <check_fs+0x82>
 800294a:	2300      	movs	r3, #0
 800294c:	e00c      	b.n	8002968 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3338      	adds	r3, #56	@ 0x38
 8002952:	3352      	adds	r3, #82	@ 0x52
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff febb 	bl	80026d0 <ld_dword>
 800295a:	4603      	mov	r3, r0
 800295c:	4a05      	ldr	r2, [pc, #20]	@ (8002974 <check_fs+0xa8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <check_fs+0x9a>
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8002966:	2302      	movs	r3, #2
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	00544146 	.word	0x00544146
 8002974:	33544146 	.word	0x33544146

08002978 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b096      	sub	sp, #88	@ 0x58
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff ff58 	bl	8002842 <get_ldnumber>
 8002992:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002996:	2b00      	cmp	r3, #0
 8002998:	da01      	bge.n	800299e <find_volume+0x26>
 800299a:	230b      	movs	r3, #11
 800299c:	e265      	b.n	8002e6a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800299e:	4a9f      	ldr	r2, [pc, #636]	@ (8002c1c <find_volume+0x2a4>)
 80029a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <find_volume+0x3a>
 80029ae:	230c      	movs	r3, #12
 80029b0:	e25b      	b.n	8002e6a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80029c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01a      	beq.n	80029fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80029c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ca:	785b      	ldrb	r3, [r3, #1]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fdc7 	bl	8002560 <disk_status>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80029d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10c      	bne.n	80029fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <find_volume+0x82>
 80029ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80029f6:	230a      	movs	r3, #10
 80029f8:	e237      	b.n	8002e6a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80029fa:	2300      	movs	r3, #0
 80029fc:	e235      	b.n	8002e6a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80029fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fdbf 	bl	8002594 <disk_initialize>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e21e      	b.n	8002e6a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <find_volume+0xca>
 8002a32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002a3e:	230a      	movs	r3, #10
 8002a40:	e213      	b.n	8002e6a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8002a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a44:	7858      	ldrb	r0, [r3, #1]
 8002a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a48:	330c      	adds	r3, #12
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	f7ff fe09 	bl	8002664 <disk_ioctl>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <find_volume+0xe4>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e206      	b.n	8002e6a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a5e:	899b      	ldrh	r3, [r3, #12]
 8002a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a64:	d80d      	bhi.n	8002a82 <find_volume+0x10a>
 8002a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a68:	899b      	ldrh	r3, [r3, #12]
 8002a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a6e:	d308      	bcc.n	8002a82 <find_volume+0x10a>
 8002a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a72:	899b      	ldrh	r3, [r3, #12]
 8002a74:	461a      	mov	r2, r3
 8002a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a78:	899b      	ldrh	r3, [r3, #12]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <find_volume+0x10e>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1f1      	b.n	8002e6a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002a8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002a8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002a8e:	f7ff ff1d 	bl	80028cc <check_fs>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002a98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d149      	bne.n	8002b34 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aa4:	e01e      	b.n	8002ae4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8002ab4:	4413      	add	r3, r2
 8002ab6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	3304      	adds	r3, #4
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <find_volume+0x158>
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fe02 	bl	80026d0 <ld_dword>
 8002acc:	4602      	mov	r2, r0
 8002ace:	e000      	b.n	8002ad2 <find_volume+0x15a>
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	3358      	adds	r3, #88	@ 0x58
 8002ad8:	443b      	add	r3, r7
 8002ada:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d9dd      	bls.n	8002aa6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002aea:	2300      	movs	r3, #0
 8002aec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8002aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <find_volume+0x182>
 8002af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af6:	3b01      	subs	r3, #1
 8002af8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	3358      	adds	r3, #88	@ 0x58
 8002b00:	443b      	add	r3, r7
 8002b02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002b06:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <find_volume+0x1a2>
 8002b0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002b10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002b12:	f7ff fedb 	bl	80028cc <check_fs>
 8002b16:	4603      	mov	r3, r0
 8002b18:	e000      	b.n	8002b1c <find_volume+0x1a4>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002b20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d905      	bls.n	8002b34 <find_volume+0x1bc>
 8002b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d9e2      	bls.n	8002afa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002b34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d101      	bne.n	8002b40 <find_volume+0x1c8>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e194      	b.n	8002e6a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d901      	bls.n	8002b4c <find_volume+0x1d4>
 8002b48:	230d      	movs	r3, #13
 8002b4a:	e18e      	b.n	8002e6a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4e:	3338      	adds	r3, #56	@ 0x38
 8002b50:	330b      	adds	r3, #11
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fda4 	bl	80026a0 <ld_word>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5e:	899b      	ldrh	r3, [r3, #12]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <find_volume+0x1f0>
 8002b64:	230d      	movs	r3, #13
 8002b66:	e180      	b.n	8002e6a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6a:	3338      	adds	r3, #56	@ 0x38
 8002b6c:	3316      	adds	r3, #22
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fd96 	bl	80026a0 <ld_word>
 8002b74:	4603      	mov	r3, r0
 8002b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <find_volume+0x214>
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b80:	3338      	adds	r3, #56	@ 0x38
 8002b82:	3324      	adds	r3, #36	@ 0x24
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fda3 	bl	80026d0 <ld_dword>
 8002b8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b90:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b94:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8002b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	789b      	ldrb	r3, [r3, #2]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d005      	beq.n	8002bb0 <find_volume+0x238>
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba6:	789b      	ldrb	r3, [r3, #2]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d001      	beq.n	8002bb0 <find_volume+0x238>
 8002bac:	230d      	movs	r3, #13
 8002bae:	e15c      	b.n	8002e6a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb2:	789b      	ldrb	r3, [r3, #2]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bcc:	895b      	ldrh	r3, [r3, #10]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <find_volume+0x26c>
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	895b      	ldrh	r3, [r3, #10]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bda:	895b      	ldrh	r3, [r3, #10]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <find_volume+0x270>
 8002be4:	230d      	movs	r3, #13
 8002be6:	e140      	b.n	8002e6a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bea:	3338      	adds	r3, #56	@ 0x38
 8002bec:	3311      	adds	r3, #17
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fd56 	bl	80026a0 <ld_word>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfe:	891b      	ldrh	r3, [r3, #8]
 8002c00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c02:	8992      	ldrh	r2, [r2, #12]
 8002c04:	0952      	lsrs	r2, r2, #5
 8002c06:	b292      	uxth	r2, r2
 8002c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c0c:	fb01 f202 	mul.w	r2, r1, r2
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <find_volume+0x2a8>
 8002c18:	230d      	movs	r3, #13
 8002c1a:	e126      	b.n	8002e6a <find_volume+0x4f2>
 8002c1c:	20001184 	.word	0x20001184

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c22:	3338      	adds	r3, #56	@ 0x38
 8002c24:	3313      	adds	r3, #19
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fd3a 	bl	80026a0 <ld_word>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <find_volume+0x2cc>
 8002c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c38:	3338      	adds	r3, #56	@ 0x38
 8002c3a:	3320      	adds	r3, #32
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fd47 	bl	80026d0 <ld_dword>
 8002c42:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c46:	3338      	adds	r3, #56	@ 0x38
 8002c48:	330e      	adds	r3, #14
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fd28 	bl	80026a0 <ld_word>
 8002c50:	4603      	mov	r3, r0
 8002c52:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002c54:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <find_volume+0x2e6>
 8002c5a:	230d      	movs	r3, #13
 8002c5c:	e105      	b.n	8002e6a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002c5e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c62:	4413      	add	r3, r2
 8002c64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c66:	8911      	ldrh	r1, [r2, #8]
 8002c68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c6a:	8992      	ldrh	r2, [r2, #12]
 8002c6c:	0952      	lsrs	r2, r2, #5
 8002c6e:	b292      	uxth	r2, r2
 8002c70:	fbb1 f2f2 	udiv	r2, r1, r2
 8002c74:	b292      	uxth	r2, r2
 8002c76:	4413      	add	r3, r2
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d201      	bcs.n	8002c86 <find_volume+0x30e>
 8002c82:	230d      	movs	r3, #13
 8002c84:	e0f1      	b.n	8002e6a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002c86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c8e:	8952      	ldrh	r2, [r2, #10]
 8002c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <find_volume+0x328>
 8002c9c:	230d      	movs	r3, #13
 8002c9e:	e0e4      	b.n	8002e6a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d802      	bhi.n	8002cb6 <find_volume+0x33e>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d802      	bhi.n	8002cc6 <find_volume+0x34e>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	1c9a      	adds	r2, r3, #2
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8002cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002cd4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cd8:	441a      	add	r2, r3
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8002cde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce2:	441a      	add	r2, r3
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8002ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d11e      	bne.n	8002d2e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf2:	3338      	adds	r3, #56	@ 0x38
 8002cf4:	332a      	adds	r3, #42	@ 0x2a
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fcd2 	bl	80026a0 <ld_word>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <find_volume+0x38e>
 8002d02:	230d      	movs	r3, #13
 8002d04:	e0b1      	b.n	8002e6a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	891b      	ldrh	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <find_volume+0x39a>
 8002d0e:	230d      	movs	r3, #13
 8002d10:	e0ab      	b.n	8002e6a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d14:	3338      	adds	r3, #56	@ 0x38
 8002d16:	332c      	adds	r3, #44	@ 0x2c
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fcd9 	bl	80026d0 <ld_dword>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2c:	e01f      	b.n	8002d6e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	891b      	ldrh	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <find_volume+0x3c2>
 8002d36:	230d      	movs	r3, #13
 8002d38:	e097      	b.n	8002e6a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d40:	441a      	add	r2, r3
 8002d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d44:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002d46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d103      	bne.n	8002d56 <find_volume+0x3de>
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	e00a      	b.n	8002d6c <find_volume+0x3f4>
 8002d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	085a      	lsrs	r2, r3, #1
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8002d6c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d74:	899b      	ldrh	r3, [r3, #12]
 8002d76:	4619      	mov	r1, r3
 8002d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d80:	8989      	ldrh	r1, [r1, #12]
 8002d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d201      	bcs.n	8002d8e <find_volume+0x416>
 8002d8a:	230d      	movs	r3, #13
 8002d8c:	e06d      	b.n	8002e6a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d94:	619a      	str	r2, [r3, #24]
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da0:	2280      	movs	r2, #128	@ 0x80
 8002da2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002da4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d149      	bne.n	8002e40 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dae:	3338      	adds	r3, #56	@ 0x38
 8002db0:	3330      	adds	r3, #48	@ 0x30
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fc74 	bl	80026a0 <ld_word>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d140      	bne.n	8002e40 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002dc6:	f7ff fd0f 	bl	80027e8 <move_window>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d137      	bne.n	8002e40 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd8:	3338      	adds	r3, #56	@ 0x38
 8002dda:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fc5e 	bl	80026a0 <ld_word>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d127      	bne.n	8002e40 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df2:	3338      	adds	r3, #56	@ 0x38
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fc6b 	bl	80026d0 <ld_dword>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <find_volume+0x4fc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d11e      	bne.n	8002e40 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e04:	3338      	adds	r3, #56	@ 0x38
 8002e06:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fc60 	bl	80026d0 <ld_dword>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4a19      	ldr	r2, [pc, #100]	@ (8002e78 <find_volume+0x500>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d113      	bne.n	8002e40 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1a:	3338      	adds	r3, #56	@ 0x38
 8002e1c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fc55 	bl	80026d0 <ld_dword>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2e:	3338      	adds	r3, #56	@ 0x38
 8002e30:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fc4b 	bl	80026d0 <ld_dword>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e3e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8002e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e42:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8002e46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <find_volume+0x504>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <find_volume+0x504>)
 8002e52:	801a      	strh	r2, [r3, #0]
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <find_volume+0x504>)
 8002e56:	881a      	ldrh	r2, [r3, #0]
 8002e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5e:	4a08      	ldr	r2, [pc, #32]	@ (8002e80 <find_volume+0x508>)
 8002e60:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8002e62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e64:	f7ff fc58 	bl	8002718 <clear_lock>
#endif
	return FR_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3758      	adds	r7, #88	@ 0x58
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	41615252 	.word	0x41615252
 8002e78:	61417272 	.word	0x61417272
 8002e7c:	20001188 	.word	0x20001188
 8002e80:	200011ac 	.word	0x200011ac

08002e84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002e96:	f107 0310 	add.w	r3, r7, #16
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fcd1 	bl	8002842 <get_ldnumber>
 8002ea0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da01      	bge.n	8002eac <f_mount+0x28>
 8002ea8:	230b      	movs	r3, #11
 8002eaa:	e02b      	b.n	8002f04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002eac:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <f_mount+0x88>)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8002ebc:	69b8      	ldr	r0, [r7, #24]
 8002ebe:	f7ff fc2b 	bl	8002718 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	490d      	ldr	r1, [pc, #52]	@ (8002f0c <f_mount+0x88>)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <f_mount+0x66>
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d001      	beq.n	8002eee <f_mount+0x6a>
 8002eea:	2300      	movs	r3, #0
 8002eec:	e00a      	b.n	8002f04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002eee:	f107 010c 	add.w	r1, r7, #12
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fd3d 	bl	8002978 <find_volume>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20001184 	.word	0x20001184

08002f10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8002f26:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f28:	7a5b      	ldrb	r3, [r3, #9]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d131      	bne.n	8002f94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002f30:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f32:	7a5b      	ldrb	r3, [r3, #9]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8002f3e:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f40:	7a5b      	ldrb	r3, [r3, #9]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4a17      	ldr	r2, [pc, #92]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f50:	7a5b      	ldrb	r3, [r3, #9]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b13      	ldr	r3, [pc, #76]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	79fa      	ldrb	r2, [r7, #7]
 8002f5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f60:	7a5b      	ldrb	r3, [r3, #9]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	b2d1      	uxtb	r1, r2
 8002f68:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa4 <FATFS_LinkDriverEx+0x94>)
 8002f6a:	7251      	strb	r1, [r2, #9]
 8002f6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8002f6e:	7dbb      	ldrb	r3, [r7, #22]
 8002f70:	3330      	adds	r3, #48	@ 0x30
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	223a      	movs	r2, #58	@ 0x3a
 8002f7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	3302      	adds	r3, #2
 8002f84:	222f      	movs	r2, #47	@ 0x2f
 8002f86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3303      	adds	r3, #3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	200013ac 	.word	0x200013ac

08002fa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffaa 	bl	8002f10 <FATFS_LinkDriverEx>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <std>:
 8002fc8:	2300      	movs	r3, #0
 8002fca:	b510      	push	{r4, lr}
 8002fcc:	4604      	mov	r4, r0
 8002fce:	e9c0 3300 	strd	r3, r3, [r0]
 8002fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fd6:	6083      	str	r3, [r0, #8]
 8002fd8:	8181      	strh	r1, [r0, #12]
 8002fda:	6643      	str	r3, [r0, #100]	@ 0x64
 8002fdc:	81c2      	strh	r2, [r0, #14]
 8002fde:	6183      	str	r3, [r0, #24]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	305c      	adds	r0, #92	@ 0x5c
 8002fe6:	f000 f906 	bl	80031f6 <memset>
 8002fea:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <std+0x58>)
 8002fec:	6263      	str	r3, [r4, #36]	@ 0x24
 8002fee:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <std+0x5c>)
 8002ff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <std+0x60>)
 8002ff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <std+0x64>)
 8002ff8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <std+0x68>)
 8002ffc:	6224      	str	r4, [r4, #32]
 8002ffe:	429c      	cmp	r4, r3
 8003000:	d006      	beq.n	8003010 <std+0x48>
 8003002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003006:	4294      	cmp	r4, r2
 8003008:	d002      	beq.n	8003010 <std+0x48>
 800300a:	33d0      	adds	r3, #208	@ 0xd0
 800300c:	429c      	cmp	r4, r3
 800300e:	d105      	bne.n	800301c <std+0x54>
 8003010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003018:	f000 b966 	b.w	80032e8 <__retarget_lock_init_recursive>
 800301c:	bd10      	pop	{r4, pc}
 800301e:	bf00      	nop
 8003020:	08003171 	.word	0x08003171
 8003024:	08003193 	.word	0x08003193
 8003028:	080031cb 	.word	0x080031cb
 800302c:	080031ef 	.word	0x080031ef
 8003030:	200013b8 	.word	0x200013b8

08003034 <stdio_exit_handler>:
 8003034:	4a02      	ldr	r2, [pc, #8]	@ (8003040 <stdio_exit_handler+0xc>)
 8003036:	4903      	ldr	r1, [pc, #12]	@ (8003044 <stdio_exit_handler+0x10>)
 8003038:	4803      	ldr	r0, [pc, #12]	@ (8003048 <stdio_exit_handler+0x14>)
 800303a:	f000 b869 	b.w	8003110 <_fwalk_sglue>
 800303e:	bf00      	nop
 8003040:	20000020 	.word	0x20000020
 8003044:	08003b89 	.word	0x08003b89
 8003048:	20000030 	.word	0x20000030

0800304c <cleanup_stdio>:
 800304c:	6841      	ldr	r1, [r0, #4]
 800304e:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <cleanup_stdio+0x34>)
 8003050:	4299      	cmp	r1, r3
 8003052:	b510      	push	{r4, lr}
 8003054:	4604      	mov	r4, r0
 8003056:	d001      	beq.n	800305c <cleanup_stdio+0x10>
 8003058:	f000 fd96 	bl	8003b88 <_fflush_r>
 800305c:	68a1      	ldr	r1, [r4, #8]
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <cleanup_stdio+0x38>)
 8003060:	4299      	cmp	r1, r3
 8003062:	d002      	beq.n	800306a <cleanup_stdio+0x1e>
 8003064:	4620      	mov	r0, r4
 8003066:	f000 fd8f 	bl	8003b88 <_fflush_r>
 800306a:	68e1      	ldr	r1, [r4, #12]
 800306c:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <cleanup_stdio+0x3c>)
 800306e:	4299      	cmp	r1, r3
 8003070:	d004      	beq.n	800307c <cleanup_stdio+0x30>
 8003072:	4620      	mov	r0, r4
 8003074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003078:	f000 bd86 	b.w	8003b88 <_fflush_r>
 800307c:	bd10      	pop	{r4, pc}
 800307e:	bf00      	nop
 8003080:	200013b8 	.word	0x200013b8
 8003084:	20001420 	.word	0x20001420
 8003088:	20001488 	.word	0x20001488

0800308c <global_stdio_init.part.0>:
 800308c:	b510      	push	{r4, lr}
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <global_stdio_init.part.0+0x30>)
 8003090:	4c0b      	ldr	r4, [pc, #44]	@ (80030c0 <global_stdio_init.part.0+0x34>)
 8003092:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <global_stdio_init.part.0+0x38>)
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	4620      	mov	r0, r4
 8003098:	2200      	movs	r2, #0
 800309a:	2104      	movs	r1, #4
 800309c:	f7ff ff94 	bl	8002fc8 <std>
 80030a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80030a4:	2201      	movs	r2, #1
 80030a6:	2109      	movs	r1, #9
 80030a8:	f7ff ff8e 	bl	8002fc8 <std>
 80030ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80030b0:	2202      	movs	r2, #2
 80030b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030b6:	2112      	movs	r1, #18
 80030b8:	f7ff bf86 	b.w	8002fc8 <std>
 80030bc:	200014f0 	.word	0x200014f0
 80030c0:	200013b8 	.word	0x200013b8
 80030c4:	08003035 	.word	0x08003035

080030c8 <__sfp_lock_acquire>:
 80030c8:	4801      	ldr	r0, [pc, #4]	@ (80030d0 <__sfp_lock_acquire+0x8>)
 80030ca:	f000 b90e 	b.w	80032ea <__retarget_lock_acquire_recursive>
 80030ce:	bf00      	nop
 80030d0:	200014f9 	.word	0x200014f9

080030d4 <__sfp_lock_release>:
 80030d4:	4801      	ldr	r0, [pc, #4]	@ (80030dc <__sfp_lock_release+0x8>)
 80030d6:	f000 b909 	b.w	80032ec <__retarget_lock_release_recursive>
 80030da:	bf00      	nop
 80030dc:	200014f9 	.word	0x200014f9

080030e0 <__sinit>:
 80030e0:	b510      	push	{r4, lr}
 80030e2:	4604      	mov	r4, r0
 80030e4:	f7ff fff0 	bl	80030c8 <__sfp_lock_acquire>
 80030e8:	6a23      	ldr	r3, [r4, #32]
 80030ea:	b11b      	cbz	r3, 80030f4 <__sinit+0x14>
 80030ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f0:	f7ff bff0 	b.w	80030d4 <__sfp_lock_release>
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <__sinit+0x28>)
 80030f6:	6223      	str	r3, [r4, #32]
 80030f8:	4b04      	ldr	r3, [pc, #16]	@ (800310c <__sinit+0x2c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f5      	bne.n	80030ec <__sinit+0xc>
 8003100:	f7ff ffc4 	bl	800308c <global_stdio_init.part.0>
 8003104:	e7f2      	b.n	80030ec <__sinit+0xc>
 8003106:	bf00      	nop
 8003108:	0800304d 	.word	0x0800304d
 800310c:	200014f0 	.word	0x200014f0

08003110 <_fwalk_sglue>:
 8003110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003114:	4607      	mov	r7, r0
 8003116:	4688      	mov	r8, r1
 8003118:	4614      	mov	r4, r2
 800311a:	2600      	movs	r6, #0
 800311c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003120:	f1b9 0901 	subs.w	r9, r9, #1
 8003124:	d505      	bpl.n	8003132 <_fwalk_sglue+0x22>
 8003126:	6824      	ldr	r4, [r4, #0]
 8003128:	2c00      	cmp	r4, #0
 800312a:	d1f7      	bne.n	800311c <_fwalk_sglue+0xc>
 800312c:	4630      	mov	r0, r6
 800312e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003132:	89ab      	ldrh	r3, [r5, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d907      	bls.n	8003148 <_fwalk_sglue+0x38>
 8003138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800313c:	3301      	adds	r3, #1
 800313e:	d003      	beq.n	8003148 <_fwalk_sglue+0x38>
 8003140:	4629      	mov	r1, r5
 8003142:	4638      	mov	r0, r7
 8003144:	47c0      	blx	r8
 8003146:	4306      	orrs	r6, r0
 8003148:	3568      	adds	r5, #104	@ 0x68
 800314a:	e7e9      	b.n	8003120 <_fwalk_sglue+0x10>

0800314c <iprintf>:
 800314c:	b40f      	push	{r0, r1, r2, r3}
 800314e:	b507      	push	{r0, r1, r2, lr}
 8003150:	4906      	ldr	r1, [pc, #24]	@ (800316c <iprintf+0x20>)
 8003152:	ab04      	add	r3, sp, #16
 8003154:	6808      	ldr	r0, [r1, #0]
 8003156:	f853 2b04 	ldr.w	r2, [r3], #4
 800315a:	6881      	ldr	r1, [r0, #8]
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	f000 f9e9 	bl	8003534 <_vfiprintf_r>
 8003162:	b003      	add	sp, #12
 8003164:	f85d eb04 	ldr.w	lr, [sp], #4
 8003168:	b004      	add	sp, #16
 800316a:	4770      	bx	lr
 800316c:	2000002c 	.word	0x2000002c

08003170 <__sread>:
 8003170:	b510      	push	{r4, lr}
 8003172:	460c      	mov	r4, r1
 8003174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003178:	f000 f868 	bl	800324c <_read_r>
 800317c:	2800      	cmp	r0, #0
 800317e:	bfab      	itete	ge
 8003180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003182:	89a3      	ldrhlt	r3, [r4, #12]
 8003184:	181b      	addge	r3, r3, r0
 8003186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800318a:	bfac      	ite	ge
 800318c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800318e:	81a3      	strhlt	r3, [r4, #12]
 8003190:	bd10      	pop	{r4, pc}

08003192 <__swrite>:
 8003192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003196:	461f      	mov	r7, r3
 8003198:	898b      	ldrh	r3, [r1, #12]
 800319a:	05db      	lsls	r3, r3, #23
 800319c:	4605      	mov	r5, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	4616      	mov	r6, r2
 80031a2:	d505      	bpl.n	80031b0 <__swrite+0x1e>
 80031a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a8:	2302      	movs	r3, #2
 80031aa:	2200      	movs	r2, #0
 80031ac:	f000 f83c 	bl	8003228 <_lseek_r>
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	4632      	mov	r2, r6
 80031be:	463b      	mov	r3, r7
 80031c0:	4628      	mov	r0, r5
 80031c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031c6:	f000 b853 	b.w	8003270 <_write_r>

080031ca <__sseek>:
 80031ca:	b510      	push	{r4, lr}
 80031cc:	460c      	mov	r4, r1
 80031ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d2:	f000 f829 	bl	8003228 <_lseek_r>
 80031d6:	1c43      	adds	r3, r0, #1
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	bf15      	itete	ne
 80031dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031e6:	81a3      	strheq	r3, [r4, #12]
 80031e8:	bf18      	it	ne
 80031ea:	81a3      	strhne	r3, [r4, #12]
 80031ec:	bd10      	pop	{r4, pc}

080031ee <__sclose>:
 80031ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f2:	f000 b809 	b.w	8003208 <_close_r>

080031f6 <memset>:
 80031f6:	4402      	add	r2, r0
 80031f8:	4603      	mov	r3, r0
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d100      	bne.n	8003200 <memset+0xa>
 80031fe:	4770      	bx	lr
 8003200:	f803 1b01 	strb.w	r1, [r3], #1
 8003204:	e7f9      	b.n	80031fa <memset+0x4>
	...

08003208 <_close_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4d06      	ldr	r5, [pc, #24]	@ (8003224 <_close_r+0x1c>)
 800320c:	2300      	movs	r3, #0
 800320e:	4604      	mov	r4, r0
 8003210:	4608      	mov	r0, r1
 8003212:	602b      	str	r3, [r5, #0]
 8003214:	f7fd fc36 	bl	8000a84 <_close>
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	d102      	bne.n	8003222 <_close_r+0x1a>
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	b103      	cbz	r3, 8003222 <_close_r+0x1a>
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	200014f4 	.word	0x200014f4

08003228 <_lseek_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4d07      	ldr	r5, [pc, #28]	@ (8003248 <_lseek_r+0x20>)
 800322c:	4604      	mov	r4, r0
 800322e:	4608      	mov	r0, r1
 8003230:	4611      	mov	r1, r2
 8003232:	2200      	movs	r2, #0
 8003234:	602a      	str	r2, [r5, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	f7fd fc4b 	bl	8000ad2 <_lseek>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d102      	bne.n	8003246 <_lseek_r+0x1e>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	b103      	cbz	r3, 8003246 <_lseek_r+0x1e>
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	200014f4 	.word	0x200014f4

0800324c <_read_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4d07      	ldr	r5, [pc, #28]	@ (800326c <_read_r+0x20>)
 8003250:	4604      	mov	r4, r0
 8003252:	4608      	mov	r0, r1
 8003254:	4611      	mov	r1, r2
 8003256:	2200      	movs	r2, #0
 8003258:	602a      	str	r2, [r5, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	f7fd fbf5 	bl	8000a4a <_read>
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	d102      	bne.n	800326a <_read_r+0x1e>
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	b103      	cbz	r3, 800326a <_read_r+0x1e>
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	200014f4 	.word	0x200014f4

08003270 <_write_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	4d07      	ldr	r5, [pc, #28]	@ (8003290 <_write_r+0x20>)
 8003274:	4604      	mov	r4, r0
 8003276:	4608      	mov	r0, r1
 8003278:	4611      	mov	r1, r2
 800327a:	2200      	movs	r2, #0
 800327c:	602a      	str	r2, [r5, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	f7fd f96e 	bl	8000560 <_write>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_write_r+0x1e>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	b103      	cbz	r3, 800328e <_write_r+0x1e>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	200014f4 	.word	0x200014f4

08003294 <__errno>:
 8003294:	4b01      	ldr	r3, [pc, #4]	@ (800329c <__errno+0x8>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000002c 	.word	0x2000002c

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4d0d      	ldr	r5, [pc, #52]	@ (80032d8 <__libc_init_array+0x38>)
 80032a4:	4c0d      	ldr	r4, [pc, #52]	@ (80032dc <__libc_init_array+0x3c>)
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	10a4      	asrs	r4, r4, #2
 80032aa:	2600      	movs	r6, #0
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	4d0b      	ldr	r5, [pc, #44]	@ (80032e0 <__libc_init_array+0x40>)
 80032b2:	4c0c      	ldr	r4, [pc, #48]	@ (80032e4 <__libc_init_array+0x44>)
 80032b4:	f000 fdb8 	bl	8003e28 <_init>
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	2600      	movs	r6, #0
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	08003ed4 	.word	0x08003ed4
 80032dc:	08003ed4 	.word	0x08003ed4
 80032e0:	08003ed4 	.word	0x08003ed4
 80032e4:	08003ed8 	.word	0x08003ed8

080032e8 <__retarget_lock_init_recursive>:
 80032e8:	4770      	bx	lr

080032ea <__retarget_lock_acquire_recursive>:
 80032ea:	4770      	bx	lr

080032ec <__retarget_lock_release_recursive>:
 80032ec:	4770      	bx	lr
	...

080032f0 <_free_r>:
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	4605      	mov	r5, r0
 80032f4:	2900      	cmp	r1, #0
 80032f6:	d041      	beq.n	800337c <_free_r+0x8c>
 80032f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032fc:	1f0c      	subs	r4, r1, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bfb8      	it	lt
 8003302:	18e4      	addlt	r4, r4, r3
 8003304:	f000 f8e0 	bl	80034c8 <__malloc_lock>
 8003308:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <_free_r+0x90>)
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	b933      	cbnz	r3, 800331c <_free_r+0x2c>
 800330e:	6063      	str	r3, [r4, #4]
 8003310:	6014      	str	r4, [r2, #0]
 8003312:	4628      	mov	r0, r5
 8003314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003318:	f000 b8dc 	b.w	80034d4 <__malloc_unlock>
 800331c:	42a3      	cmp	r3, r4
 800331e:	d908      	bls.n	8003332 <_free_r+0x42>
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	1821      	adds	r1, r4, r0
 8003324:	428b      	cmp	r3, r1
 8003326:	bf01      	itttt	eq
 8003328:	6819      	ldreq	r1, [r3, #0]
 800332a:	685b      	ldreq	r3, [r3, #4]
 800332c:	1809      	addeq	r1, r1, r0
 800332e:	6021      	streq	r1, [r4, #0]
 8003330:	e7ed      	b.n	800330e <_free_r+0x1e>
 8003332:	461a      	mov	r2, r3
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	b10b      	cbz	r3, 800333c <_free_r+0x4c>
 8003338:	42a3      	cmp	r3, r4
 800333a:	d9fa      	bls.n	8003332 <_free_r+0x42>
 800333c:	6811      	ldr	r1, [r2, #0]
 800333e:	1850      	adds	r0, r2, r1
 8003340:	42a0      	cmp	r0, r4
 8003342:	d10b      	bne.n	800335c <_free_r+0x6c>
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	4401      	add	r1, r0
 8003348:	1850      	adds	r0, r2, r1
 800334a:	4283      	cmp	r3, r0
 800334c:	6011      	str	r1, [r2, #0]
 800334e:	d1e0      	bne.n	8003312 <_free_r+0x22>
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	6053      	str	r3, [r2, #4]
 8003356:	4408      	add	r0, r1
 8003358:	6010      	str	r0, [r2, #0]
 800335a:	e7da      	b.n	8003312 <_free_r+0x22>
 800335c:	d902      	bls.n	8003364 <_free_r+0x74>
 800335e:	230c      	movs	r3, #12
 8003360:	602b      	str	r3, [r5, #0]
 8003362:	e7d6      	b.n	8003312 <_free_r+0x22>
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	1821      	adds	r1, r4, r0
 8003368:	428b      	cmp	r3, r1
 800336a:	bf04      	itt	eq
 800336c:	6819      	ldreq	r1, [r3, #0]
 800336e:	685b      	ldreq	r3, [r3, #4]
 8003370:	6063      	str	r3, [r4, #4]
 8003372:	bf04      	itt	eq
 8003374:	1809      	addeq	r1, r1, r0
 8003376:	6021      	streq	r1, [r4, #0]
 8003378:	6054      	str	r4, [r2, #4]
 800337a:	e7ca      	b.n	8003312 <_free_r+0x22>
 800337c:	bd38      	pop	{r3, r4, r5, pc}
 800337e:	bf00      	nop
 8003380:	20001500 	.word	0x20001500

08003384 <sbrk_aligned>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	4e0f      	ldr	r6, [pc, #60]	@ (80033c4 <sbrk_aligned+0x40>)
 8003388:	460c      	mov	r4, r1
 800338a:	6831      	ldr	r1, [r6, #0]
 800338c:	4605      	mov	r5, r0
 800338e:	b911      	cbnz	r1, 8003396 <sbrk_aligned+0x12>
 8003390:	f000 fcb6 	bl	8003d00 <_sbrk_r>
 8003394:	6030      	str	r0, [r6, #0]
 8003396:	4621      	mov	r1, r4
 8003398:	4628      	mov	r0, r5
 800339a:	f000 fcb1 	bl	8003d00 <_sbrk_r>
 800339e:	1c43      	adds	r3, r0, #1
 80033a0:	d103      	bne.n	80033aa <sbrk_aligned+0x26>
 80033a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80033a6:	4620      	mov	r0, r4
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	1cc4      	adds	r4, r0, #3
 80033ac:	f024 0403 	bic.w	r4, r4, #3
 80033b0:	42a0      	cmp	r0, r4
 80033b2:	d0f8      	beq.n	80033a6 <sbrk_aligned+0x22>
 80033b4:	1a21      	subs	r1, r4, r0
 80033b6:	4628      	mov	r0, r5
 80033b8:	f000 fca2 	bl	8003d00 <_sbrk_r>
 80033bc:	3001      	adds	r0, #1
 80033be:	d1f2      	bne.n	80033a6 <sbrk_aligned+0x22>
 80033c0:	e7ef      	b.n	80033a2 <sbrk_aligned+0x1e>
 80033c2:	bf00      	nop
 80033c4:	200014fc 	.word	0x200014fc

080033c8 <_malloc_r>:
 80033c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033cc:	1ccd      	adds	r5, r1, #3
 80033ce:	f025 0503 	bic.w	r5, r5, #3
 80033d2:	3508      	adds	r5, #8
 80033d4:	2d0c      	cmp	r5, #12
 80033d6:	bf38      	it	cc
 80033d8:	250c      	movcc	r5, #12
 80033da:	2d00      	cmp	r5, #0
 80033dc:	4606      	mov	r6, r0
 80033de:	db01      	blt.n	80033e4 <_malloc_r+0x1c>
 80033e0:	42a9      	cmp	r1, r5
 80033e2:	d904      	bls.n	80033ee <_malloc_r+0x26>
 80033e4:	230c      	movs	r3, #12
 80033e6:	6033      	str	r3, [r6, #0]
 80033e8:	2000      	movs	r0, #0
 80033ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034c4 <_malloc_r+0xfc>
 80033f2:	f000 f869 	bl	80034c8 <__malloc_lock>
 80033f6:	f8d8 3000 	ldr.w	r3, [r8]
 80033fa:	461c      	mov	r4, r3
 80033fc:	bb44      	cbnz	r4, 8003450 <_malloc_r+0x88>
 80033fe:	4629      	mov	r1, r5
 8003400:	4630      	mov	r0, r6
 8003402:	f7ff ffbf 	bl	8003384 <sbrk_aligned>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	4604      	mov	r4, r0
 800340a:	d158      	bne.n	80034be <_malloc_r+0xf6>
 800340c:	f8d8 4000 	ldr.w	r4, [r8]
 8003410:	4627      	mov	r7, r4
 8003412:	2f00      	cmp	r7, #0
 8003414:	d143      	bne.n	800349e <_malloc_r+0xd6>
 8003416:	2c00      	cmp	r4, #0
 8003418:	d04b      	beq.n	80034b2 <_malloc_r+0xea>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	4639      	mov	r1, r7
 800341e:	4630      	mov	r0, r6
 8003420:	eb04 0903 	add.w	r9, r4, r3
 8003424:	f000 fc6c 	bl	8003d00 <_sbrk_r>
 8003428:	4581      	cmp	r9, r0
 800342a:	d142      	bne.n	80034b2 <_malloc_r+0xea>
 800342c:	6821      	ldr	r1, [r4, #0]
 800342e:	1a6d      	subs	r5, r5, r1
 8003430:	4629      	mov	r1, r5
 8003432:	4630      	mov	r0, r6
 8003434:	f7ff ffa6 	bl	8003384 <sbrk_aligned>
 8003438:	3001      	adds	r0, #1
 800343a:	d03a      	beq.n	80034b2 <_malloc_r+0xea>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	442b      	add	r3, r5
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	f8d8 3000 	ldr.w	r3, [r8]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	bb62      	cbnz	r2, 80034a4 <_malloc_r+0xdc>
 800344a:	f8c8 7000 	str.w	r7, [r8]
 800344e:	e00f      	b.n	8003470 <_malloc_r+0xa8>
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	1b52      	subs	r2, r2, r5
 8003454:	d420      	bmi.n	8003498 <_malloc_r+0xd0>
 8003456:	2a0b      	cmp	r2, #11
 8003458:	d917      	bls.n	800348a <_malloc_r+0xc2>
 800345a:	1961      	adds	r1, r4, r5
 800345c:	42a3      	cmp	r3, r4
 800345e:	6025      	str	r5, [r4, #0]
 8003460:	bf18      	it	ne
 8003462:	6059      	strne	r1, [r3, #4]
 8003464:	6863      	ldr	r3, [r4, #4]
 8003466:	bf08      	it	eq
 8003468:	f8c8 1000 	streq.w	r1, [r8]
 800346c:	5162      	str	r2, [r4, r5]
 800346e:	604b      	str	r3, [r1, #4]
 8003470:	4630      	mov	r0, r6
 8003472:	f000 f82f 	bl	80034d4 <__malloc_unlock>
 8003476:	f104 000b 	add.w	r0, r4, #11
 800347a:	1d23      	adds	r3, r4, #4
 800347c:	f020 0007 	bic.w	r0, r0, #7
 8003480:	1ac2      	subs	r2, r0, r3
 8003482:	bf1c      	itt	ne
 8003484:	1a1b      	subne	r3, r3, r0
 8003486:	50a3      	strne	r3, [r4, r2]
 8003488:	e7af      	b.n	80033ea <_malloc_r+0x22>
 800348a:	6862      	ldr	r2, [r4, #4]
 800348c:	42a3      	cmp	r3, r4
 800348e:	bf0c      	ite	eq
 8003490:	f8c8 2000 	streq.w	r2, [r8]
 8003494:	605a      	strne	r2, [r3, #4]
 8003496:	e7eb      	b.n	8003470 <_malloc_r+0xa8>
 8003498:	4623      	mov	r3, r4
 800349a:	6864      	ldr	r4, [r4, #4]
 800349c:	e7ae      	b.n	80033fc <_malloc_r+0x34>
 800349e:	463c      	mov	r4, r7
 80034a0:	687f      	ldr	r7, [r7, #4]
 80034a2:	e7b6      	b.n	8003412 <_malloc_r+0x4a>
 80034a4:	461a      	mov	r2, r3
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	d1fb      	bne.n	80034a4 <_malloc_r+0xdc>
 80034ac:	2300      	movs	r3, #0
 80034ae:	6053      	str	r3, [r2, #4]
 80034b0:	e7de      	b.n	8003470 <_malloc_r+0xa8>
 80034b2:	230c      	movs	r3, #12
 80034b4:	6033      	str	r3, [r6, #0]
 80034b6:	4630      	mov	r0, r6
 80034b8:	f000 f80c 	bl	80034d4 <__malloc_unlock>
 80034bc:	e794      	b.n	80033e8 <_malloc_r+0x20>
 80034be:	6005      	str	r5, [r0, #0]
 80034c0:	e7d6      	b.n	8003470 <_malloc_r+0xa8>
 80034c2:	bf00      	nop
 80034c4:	20001500 	.word	0x20001500

080034c8 <__malloc_lock>:
 80034c8:	4801      	ldr	r0, [pc, #4]	@ (80034d0 <__malloc_lock+0x8>)
 80034ca:	f7ff bf0e 	b.w	80032ea <__retarget_lock_acquire_recursive>
 80034ce:	bf00      	nop
 80034d0:	200014f8 	.word	0x200014f8

080034d4 <__malloc_unlock>:
 80034d4:	4801      	ldr	r0, [pc, #4]	@ (80034dc <__malloc_unlock+0x8>)
 80034d6:	f7ff bf09 	b.w	80032ec <__retarget_lock_release_recursive>
 80034da:	bf00      	nop
 80034dc:	200014f8 	.word	0x200014f8

080034e0 <__sfputc_r>:
 80034e0:	6893      	ldr	r3, [r2, #8]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	b410      	push	{r4}
 80034e8:	6093      	str	r3, [r2, #8]
 80034ea:	da08      	bge.n	80034fe <__sfputc_r+0x1e>
 80034ec:	6994      	ldr	r4, [r2, #24]
 80034ee:	42a3      	cmp	r3, r4
 80034f0:	db01      	blt.n	80034f6 <__sfputc_r+0x16>
 80034f2:	290a      	cmp	r1, #10
 80034f4:	d103      	bne.n	80034fe <__sfputc_r+0x1e>
 80034f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034fa:	f000 bb6d 	b.w	8003bd8 <__swbuf_r>
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	1c58      	adds	r0, r3, #1
 8003502:	6010      	str	r0, [r2, #0]
 8003504:	7019      	strb	r1, [r3, #0]
 8003506:	4608      	mov	r0, r1
 8003508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800350c:	4770      	bx	lr

0800350e <__sfputs_r>:
 800350e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003510:	4606      	mov	r6, r0
 8003512:	460f      	mov	r7, r1
 8003514:	4614      	mov	r4, r2
 8003516:	18d5      	adds	r5, r2, r3
 8003518:	42ac      	cmp	r4, r5
 800351a:	d101      	bne.n	8003520 <__sfputs_r+0x12>
 800351c:	2000      	movs	r0, #0
 800351e:	e007      	b.n	8003530 <__sfputs_r+0x22>
 8003520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003524:	463a      	mov	r2, r7
 8003526:	4630      	mov	r0, r6
 8003528:	f7ff ffda 	bl	80034e0 <__sfputc_r>
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d1f3      	bne.n	8003518 <__sfputs_r+0xa>
 8003530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003534 <_vfiprintf_r>:
 8003534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003538:	460d      	mov	r5, r1
 800353a:	b09d      	sub	sp, #116	@ 0x74
 800353c:	4614      	mov	r4, r2
 800353e:	4698      	mov	r8, r3
 8003540:	4606      	mov	r6, r0
 8003542:	b118      	cbz	r0, 800354c <_vfiprintf_r+0x18>
 8003544:	6a03      	ldr	r3, [r0, #32]
 8003546:	b90b      	cbnz	r3, 800354c <_vfiprintf_r+0x18>
 8003548:	f7ff fdca 	bl	80030e0 <__sinit>
 800354c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800354e:	07d9      	lsls	r1, r3, #31
 8003550:	d405      	bmi.n	800355e <_vfiprintf_r+0x2a>
 8003552:	89ab      	ldrh	r3, [r5, #12]
 8003554:	059a      	lsls	r2, r3, #22
 8003556:	d402      	bmi.n	800355e <_vfiprintf_r+0x2a>
 8003558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800355a:	f7ff fec6 	bl	80032ea <__retarget_lock_acquire_recursive>
 800355e:	89ab      	ldrh	r3, [r5, #12]
 8003560:	071b      	lsls	r3, r3, #28
 8003562:	d501      	bpl.n	8003568 <_vfiprintf_r+0x34>
 8003564:	692b      	ldr	r3, [r5, #16]
 8003566:	b99b      	cbnz	r3, 8003590 <_vfiprintf_r+0x5c>
 8003568:	4629      	mov	r1, r5
 800356a:	4630      	mov	r0, r6
 800356c:	f000 fb72 	bl	8003c54 <__swsetup_r>
 8003570:	b170      	cbz	r0, 8003590 <_vfiprintf_r+0x5c>
 8003572:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003574:	07dc      	lsls	r4, r3, #31
 8003576:	d504      	bpl.n	8003582 <_vfiprintf_r+0x4e>
 8003578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800357c:	b01d      	add	sp, #116	@ 0x74
 800357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003582:	89ab      	ldrh	r3, [r5, #12]
 8003584:	0598      	lsls	r0, r3, #22
 8003586:	d4f7      	bmi.n	8003578 <_vfiprintf_r+0x44>
 8003588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800358a:	f7ff feaf 	bl	80032ec <__retarget_lock_release_recursive>
 800358e:	e7f3      	b.n	8003578 <_vfiprintf_r+0x44>
 8003590:	2300      	movs	r3, #0
 8003592:	9309      	str	r3, [sp, #36]	@ 0x24
 8003594:	2320      	movs	r3, #32
 8003596:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800359a:	f8cd 800c 	str.w	r8, [sp, #12]
 800359e:	2330      	movs	r3, #48	@ 0x30
 80035a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003750 <_vfiprintf_r+0x21c>
 80035a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035a8:	f04f 0901 	mov.w	r9, #1
 80035ac:	4623      	mov	r3, r4
 80035ae:	469a      	mov	sl, r3
 80035b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035b4:	b10a      	cbz	r2, 80035ba <_vfiprintf_r+0x86>
 80035b6:	2a25      	cmp	r2, #37	@ 0x25
 80035b8:	d1f9      	bne.n	80035ae <_vfiprintf_r+0x7a>
 80035ba:	ebba 0b04 	subs.w	fp, sl, r4
 80035be:	d00b      	beq.n	80035d8 <_vfiprintf_r+0xa4>
 80035c0:	465b      	mov	r3, fp
 80035c2:	4622      	mov	r2, r4
 80035c4:	4629      	mov	r1, r5
 80035c6:	4630      	mov	r0, r6
 80035c8:	f7ff ffa1 	bl	800350e <__sfputs_r>
 80035cc:	3001      	adds	r0, #1
 80035ce:	f000 80a7 	beq.w	8003720 <_vfiprintf_r+0x1ec>
 80035d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035d4:	445a      	add	r2, fp
 80035d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80035d8:	f89a 3000 	ldrb.w	r3, [sl]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 809f 	beq.w	8003720 <_vfiprintf_r+0x1ec>
 80035e2:	2300      	movs	r3, #0
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035ec:	f10a 0a01 	add.w	sl, sl, #1
 80035f0:	9304      	str	r3, [sp, #16]
 80035f2:	9307      	str	r3, [sp, #28]
 80035f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80035f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80035fa:	4654      	mov	r4, sl
 80035fc:	2205      	movs	r2, #5
 80035fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003602:	4853      	ldr	r0, [pc, #332]	@ (8003750 <_vfiprintf_r+0x21c>)
 8003604:	f7fc fde4 	bl	80001d0 <memchr>
 8003608:	9a04      	ldr	r2, [sp, #16]
 800360a:	b9d8      	cbnz	r0, 8003644 <_vfiprintf_r+0x110>
 800360c:	06d1      	lsls	r1, r2, #27
 800360e:	bf44      	itt	mi
 8003610:	2320      	movmi	r3, #32
 8003612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003616:	0713      	lsls	r3, r2, #28
 8003618:	bf44      	itt	mi
 800361a:	232b      	movmi	r3, #43	@ 0x2b
 800361c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003620:	f89a 3000 	ldrb.w	r3, [sl]
 8003624:	2b2a      	cmp	r3, #42	@ 0x2a
 8003626:	d015      	beq.n	8003654 <_vfiprintf_r+0x120>
 8003628:	9a07      	ldr	r2, [sp, #28]
 800362a:	4654      	mov	r4, sl
 800362c:	2000      	movs	r0, #0
 800362e:	f04f 0c0a 	mov.w	ip, #10
 8003632:	4621      	mov	r1, r4
 8003634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003638:	3b30      	subs	r3, #48	@ 0x30
 800363a:	2b09      	cmp	r3, #9
 800363c:	d94b      	bls.n	80036d6 <_vfiprintf_r+0x1a2>
 800363e:	b1b0      	cbz	r0, 800366e <_vfiprintf_r+0x13a>
 8003640:	9207      	str	r2, [sp, #28]
 8003642:	e014      	b.n	800366e <_vfiprintf_r+0x13a>
 8003644:	eba0 0308 	sub.w	r3, r0, r8
 8003648:	fa09 f303 	lsl.w	r3, r9, r3
 800364c:	4313      	orrs	r3, r2
 800364e:	9304      	str	r3, [sp, #16]
 8003650:	46a2      	mov	sl, r4
 8003652:	e7d2      	b.n	80035fa <_vfiprintf_r+0xc6>
 8003654:	9b03      	ldr	r3, [sp, #12]
 8003656:	1d19      	adds	r1, r3, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	9103      	str	r1, [sp, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	bfbb      	ittet	lt
 8003660:	425b      	neglt	r3, r3
 8003662:	f042 0202 	orrlt.w	r2, r2, #2
 8003666:	9307      	strge	r3, [sp, #28]
 8003668:	9307      	strlt	r3, [sp, #28]
 800366a:	bfb8      	it	lt
 800366c:	9204      	strlt	r2, [sp, #16]
 800366e:	7823      	ldrb	r3, [r4, #0]
 8003670:	2b2e      	cmp	r3, #46	@ 0x2e
 8003672:	d10a      	bne.n	800368a <_vfiprintf_r+0x156>
 8003674:	7863      	ldrb	r3, [r4, #1]
 8003676:	2b2a      	cmp	r3, #42	@ 0x2a
 8003678:	d132      	bne.n	80036e0 <_vfiprintf_r+0x1ac>
 800367a:	9b03      	ldr	r3, [sp, #12]
 800367c:	1d1a      	adds	r2, r3, #4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	9203      	str	r2, [sp, #12]
 8003682:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003686:	3402      	adds	r4, #2
 8003688:	9305      	str	r3, [sp, #20]
 800368a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003760 <_vfiprintf_r+0x22c>
 800368e:	7821      	ldrb	r1, [r4, #0]
 8003690:	2203      	movs	r2, #3
 8003692:	4650      	mov	r0, sl
 8003694:	f7fc fd9c 	bl	80001d0 <memchr>
 8003698:	b138      	cbz	r0, 80036aa <_vfiprintf_r+0x176>
 800369a:	9b04      	ldr	r3, [sp, #16]
 800369c:	eba0 000a 	sub.w	r0, r0, sl
 80036a0:	2240      	movs	r2, #64	@ 0x40
 80036a2:	4082      	lsls	r2, r0
 80036a4:	4313      	orrs	r3, r2
 80036a6:	3401      	adds	r4, #1
 80036a8:	9304      	str	r3, [sp, #16]
 80036aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ae:	4829      	ldr	r0, [pc, #164]	@ (8003754 <_vfiprintf_r+0x220>)
 80036b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036b4:	2206      	movs	r2, #6
 80036b6:	f7fc fd8b 	bl	80001d0 <memchr>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d03f      	beq.n	800373e <_vfiprintf_r+0x20a>
 80036be:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <_vfiprintf_r+0x224>)
 80036c0:	bb1b      	cbnz	r3, 800370a <_vfiprintf_r+0x1d6>
 80036c2:	9b03      	ldr	r3, [sp, #12]
 80036c4:	3307      	adds	r3, #7
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	3308      	adds	r3, #8
 80036cc:	9303      	str	r3, [sp, #12]
 80036ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036d0:	443b      	add	r3, r7
 80036d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80036d4:	e76a      	b.n	80035ac <_vfiprintf_r+0x78>
 80036d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80036da:	460c      	mov	r4, r1
 80036dc:	2001      	movs	r0, #1
 80036de:	e7a8      	b.n	8003632 <_vfiprintf_r+0xfe>
 80036e0:	2300      	movs	r3, #0
 80036e2:	3401      	adds	r4, #1
 80036e4:	9305      	str	r3, [sp, #20]
 80036e6:	4619      	mov	r1, r3
 80036e8:	f04f 0c0a 	mov.w	ip, #10
 80036ec:	4620      	mov	r0, r4
 80036ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036f2:	3a30      	subs	r2, #48	@ 0x30
 80036f4:	2a09      	cmp	r2, #9
 80036f6:	d903      	bls.n	8003700 <_vfiprintf_r+0x1cc>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0c6      	beq.n	800368a <_vfiprintf_r+0x156>
 80036fc:	9105      	str	r1, [sp, #20]
 80036fe:	e7c4      	b.n	800368a <_vfiprintf_r+0x156>
 8003700:	fb0c 2101 	mla	r1, ip, r1, r2
 8003704:	4604      	mov	r4, r0
 8003706:	2301      	movs	r3, #1
 8003708:	e7f0      	b.n	80036ec <_vfiprintf_r+0x1b8>
 800370a:	ab03      	add	r3, sp, #12
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	462a      	mov	r2, r5
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <_vfiprintf_r+0x228>)
 8003712:	a904      	add	r1, sp, #16
 8003714:	4630      	mov	r0, r6
 8003716:	f3af 8000 	nop.w
 800371a:	4607      	mov	r7, r0
 800371c:	1c78      	adds	r0, r7, #1
 800371e:	d1d6      	bne.n	80036ce <_vfiprintf_r+0x19a>
 8003720:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003722:	07d9      	lsls	r1, r3, #31
 8003724:	d405      	bmi.n	8003732 <_vfiprintf_r+0x1fe>
 8003726:	89ab      	ldrh	r3, [r5, #12]
 8003728:	059a      	lsls	r2, r3, #22
 800372a:	d402      	bmi.n	8003732 <_vfiprintf_r+0x1fe>
 800372c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800372e:	f7ff fddd 	bl	80032ec <__retarget_lock_release_recursive>
 8003732:	89ab      	ldrh	r3, [r5, #12]
 8003734:	065b      	lsls	r3, r3, #25
 8003736:	f53f af1f 	bmi.w	8003578 <_vfiprintf_r+0x44>
 800373a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800373c:	e71e      	b.n	800357c <_vfiprintf_r+0x48>
 800373e:	ab03      	add	r3, sp, #12
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	462a      	mov	r2, r5
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <_vfiprintf_r+0x228>)
 8003746:	a904      	add	r1, sp, #16
 8003748:	4630      	mov	r0, r6
 800374a:	f000 f879 	bl	8003840 <_printf_i>
 800374e:	e7e4      	b.n	800371a <_vfiprintf_r+0x1e6>
 8003750:	08003e98 	.word	0x08003e98
 8003754:	08003ea2 	.word	0x08003ea2
 8003758:	00000000 	.word	0x00000000
 800375c:	0800350f 	.word	0x0800350f
 8003760:	08003e9e 	.word	0x08003e9e

08003764 <_printf_common>:
 8003764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003768:	4616      	mov	r6, r2
 800376a:	4698      	mov	r8, r3
 800376c:	688a      	ldr	r2, [r1, #8]
 800376e:	690b      	ldr	r3, [r1, #16]
 8003770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003774:	4293      	cmp	r3, r2
 8003776:	bfb8      	it	lt
 8003778:	4613      	movlt	r3, r2
 800377a:	6033      	str	r3, [r6, #0]
 800377c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003780:	4607      	mov	r7, r0
 8003782:	460c      	mov	r4, r1
 8003784:	b10a      	cbz	r2, 800378a <_printf_common+0x26>
 8003786:	3301      	adds	r3, #1
 8003788:	6033      	str	r3, [r6, #0]
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	0699      	lsls	r1, r3, #26
 800378e:	bf42      	ittt	mi
 8003790:	6833      	ldrmi	r3, [r6, #0]
 8003792:	3302      	addmi	r3, #2
 8003794:	6033      	strmi	r3, [r6, #0]
 8003796:	6825      	ldr	r5, [r4, #0]
 8003798:	f015 0506 	ands.w	r5, r5, #6
 800379c:	d106      	bne.n	80037ac <_printf_common+0x48>
 800379e:	f104 0a19 	add.w	sl, r4, #25
 80037a2:	68e3      	ldr	r3, [r4, #12]
 80037a4:	6832      	ldr	r2, [r6, #0]
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	42ab      	cmp	r3, r5
 80037aa:	dc26      	bgt.n	80037fa <_printf_common+0x96>
 80037ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	3b00      	subs	r3, #0
 80037b4:	bf18      	it	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	0692      	lsls	r2, r2, #26
 80037ba:	d42b      	bmi.n	8003814 <_printf_common+0xb0>
 80037bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037c0:	4641      	mov	r1, r8
 80037c2:	4638      	mov	r0, r7
 80037c4:	47c8      	blx	r9
 80037c6:	3001      	adds	r0, #1
 80037c8:	d01e      	beq.n	8003808 <_printf_common+0xa4>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	6922      	ldr	r2, [r4, #16]
 80037ce:	f003 0306 	and.w	r3, r3, #6
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	bf02      	ittt	eq
 80037d6:	68e5      	ldreq	r5, [r4, #12]
 80037d8:	6833      	ldreq	r3, [r6, #0]
 80037da:	1aed      	subeq	r5, r5, r3
 80037dc:	68a3      	ldr	r3, [r4, #8]
 80037de:	bf0c      	ite	eq
 80037e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037e4:	2500      	movne	r5, #0
 80037e6:	4293      	cmp	r3, r2
 80037e8:	bfc4      	itt	gt
 80037ea:	1a9b      	subgt	r3, r3, r2
 80037ec:	18ed      	addgt	r5, r5, r3
 80037ee:	2600      	movs	r6, #0
 80037f0:	341a      	adds	r4, #26
 80037f2:	42b5      	cmp	r5, r6
 80037f4:	d11a      	bne.n	800382c <_printf_common+0xc8>
 80037f6:	2000      	movs	r0, #0
 80037f8:	e008      	b.n	800380c <_printf_common+0xa8>
 80037fa:	2301      	movs	r3, #1
 80037fc:	4652      	mov	r2, sl
 80037fe:	4641      	mov	r1, r8
 8003800:	4638      	mov	r0, r7
 8003802:	47c8      	blx	r9
 8003804:	3001      	adds	r0, #1
 8003806:	d103      	bne.n	8003810 <_printf_common+0xac>
 8003808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800380c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003810:	3501      	adds	r5, #1
 8003812:	e7c6      	b.n	80037a2 <_printf_common+0x3e>
 8003814:	18e1      	adds	r1, r4, r3
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	2030      	movs	r0, #48	@ 0x30
 800381a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800381e:	4422      	add	r2, r4
 8003820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003828:	3302      	adds	r3, #2
 800382a:	e7c7      	b.n	80037bc <_printf_common+0x58>
 800382c:	2301      	movs	r3, #1
 800382e:	4622      	mov	r2, r4
 8003830:	4641      	mov	r1, r8
 8003832:	4638      	mov	r0, r7
 8003834:	47c8      	blx	r9
 8003836:	3001      	adds	r0, #1
 8003838:	d0e6      	beq.n	8003808 <_printf_common+0xa4>
 800383a:	3601      	adds	r6, #1
 800383c:	e7d9      	b.n	80037f2 <_printf_common+0x8e>
	...

08003840 <_printf_i>:
 8003840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003844:	7e0f      	ldrb	r7, [r1, #24]
 8003846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003848:	2f78      	cmp	r7, #120	@ 0x78
 800384a:	4691      	mov	r9, r2
 800384c:	4680      	mov	r8, r0
 800384e:	460c      	mov	r4, r1
 8003850:	469a      	mov	sl, r3
 8003852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003856:	d807      	bhi.n	8003868 <_printf_i+0x28>
 8003858:	2f62      	cmp	r7, #98	@ 0x62
 800385a:	d80a      	bhi.n	8003872 <_printf_i+0x32>
 800385c:	2f00      	cmp	r7, #0
 800385e:	f000 80d2 	beq.w	8003a06 <_printf_i+0x1c6>
 8003862:	2f58      	cmp	r7, #88	@ 0x58
 8003864:	f000 80b9 	beq.w	80039da <_printf_i+0x19a>
 8003868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800386c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003870:	e03a      	b.n	80038e8 <_printf_i+0xa8>
 8003872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003876:	2b15      	cmp	r3, #21
 8003878:	d8f6      	bhi.n	8003868 <_printf_i+0x28>
 800387a:	a101      	add	r1, pc, #4	@ (adr r1, 8003880 <_printf_i+0x40>)
 800387c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003880:	080038d9 	.word	0x080038d9
 8003884:	080038ed 	.word	0x080038ed
 8003888:	08003869 	.word	0x08003869
 800388c:	08003869 	.word	0x08003869
 8003890:	08003869 	.word	0x08003869
 8003894:	08003869 	.word	0x08003869
 8003898:	080038ed 	.word	0x080038ed
 800389c:	08003869 	.word	0x08003869
 80038a0:	08003869 	.word	0x08003869
 80038a4:	08003869 	.word	0x08003869
 80038a8:	08003869 	.word	0x08003869
 80038ac:	080039ed 	.word	0x080039ed
 80038b0:	08003917 	.word	0x08003917
 80038b4:	080039a7 	.word	0x080039a7
 80038b8:	08003869 	.word	0x08003869
 80038bc:	08003869 	.word	0x08003869
 80038c0:	08003a0f 	.word	0x08003a0f
 80038c4:	08003869 	.word	0x08003869
 80038c8:	08003917 	.word	0x08003917
 80038cc:	08003869 	.word	0x08003869
 80038d0:	08003869 	.word	0x08003869
 80038d4:	080039af 	.word	0x080039af
 80038d8:	6833      	ldr	r3, [r6, #0]
 80038da:	1d1a      	adds	r2, r3, #4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6032      	str	r2, [r6, #0]
 80038e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038e8:	2301      	movs	r3, #1
 80038ea:	e09d      	b.n	8003a28 <_printf_i+0x1e8>
 80038ec:	6833      	ldr	r3, [r6, #0]
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	1d19      	adds	r1, r3, #4
 80038f2:	6031      	str	r1, [r6, #0]
 80038f4:	0606      	lsls	r6, r0, #24
 80038f6:	d501      	bpl.n	80038fc <_printf_i+0xbc>
 80038f8:	681d      	ldr	r5, [r3, #0]
 80038fa:	e003      	b.n	8003904 <_printf_i+0xc4>
 80038fc:	0645      	lsls	r5, r0, #25
 80038fe:	d5fb      	bpl.n	80038f8 <_printf_i+0xb8>
 8003900:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003904:	2d00      	cmp	r5, #0
 8003906:	da03      	bge.n	8003910 <_printf_i+0xd0>
 8003908:	232d      	movs	r3, #45	@ 0x2d
 800390a:	426d      	negs	r5, r5
 800390c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003910:	4859      	ldr	r0, [pc, #356]	@ (8003a78 <_printf_i+0x238>)
 8003912:	230a      	movs	r3, #10
 8003914:	e011      	b.n	800393a <_printf_i+0xfa>
 8003916:	6821      	ldr	r1, [r4, #0]
 8003918:	6833      	ldr	r3, [r6, #0]
 800391a:	0608      	lsls	r0, r1, #24
 800391c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003920:	d402      	bmi.n	8003928 <_printf_i+0xe8>
 8003922:	0649      	lsls	r1, r1, #25
 8003924:	bf48      	it	mi
 8003926:	b2ad      	uxthmi	r5, r5
 8003928:	2f6f      	cmp	r7, #111	@ 0x6f
 800392a:	4853      	ldr	r0, [pc, #332]	@ (8003a78 <_printf_i+0x238>)
 800392c:	6033      	str	r3, [r6, #0]
 800392e:	bf14      	ite	ne
 8003930:	230a      	movne	r3, #10
 8003932:	2308      	moveq	r3, #8
 8003934:	2100      	movs	r1, #0
 8003936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800393a:	6866      	ldr	r6, [r4, #4]
 800393c:	60a6      	str	r6, [r4, #8]
 800393e:	2e00      	cmp	r6, #0
 8003940:	bfa2      	ittt	ge
 8003942:	6821      	ldrge	r1, [r4, #0]
 8003944:	f021 0104 	bicge.w	r1, r1, #4
 8003948:	6021      	strge	r1, [r4, #0]
 800394a:	b90d      	cbnz	r5, 8003950 <_printf_i+0x110>
 800394c:	2e00      	cmp	r6, #0
 800394e:	d04b      	beq.n	80039e8 <_printf_i+0x1a8>
 8003950:	4616      	mov	r6, r2
 8003952:	fbb5 f1f3 	udiv	r1, r5, r3
 8003956:	fb03 5711 	mls	r7, r3, r1, r5
 800395a:	5dc7      	ldrb	r7, [r0, r7]
 800395c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003960:	462f      	mov	r7, r5
 8003962:	42bb      	cmp	r3, r7
 8003964:	460d      	mov	r5, r1
 8003966:	d9f4      	bls.n	8003952 <_printf_i+0x112>
 8003968:	2b08      	cmp	r3, #8
 800396a:	d10b      	bne.n	8003984 <_printf_i+0x144>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	07df      	lsls	r7, r3, #31
 8003970:	d508      	bpl.n	8003984 <_printf_i+0x144>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	6861      	ldr	r1, [r4, #4]
 8003976:	4299      	cmp	r1, r3
 8003978:	bfde      	ittt	le
 800397a:	2330      	movle	r3, #48	@ 0x30
 800397c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003980:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003984:	1b92      	subs	r2, r2, r6
 8003986:	6122      	str	r2, [r4, #16]
 8003988:	f8cd a000 	str.w	sl, [sp]
 800398c:	464b      	mov	r3, r9
 800398e:	aa03      	add	r2, sp, #12
 8003990:	4621      	mov	r1, r4
 8003992:	4640      	mov	r0, r8
 8003994:	f7ff fee6 	bl	8003764 <_printf_common>
 8003998:	3001      	adds	r0, #1
 800399a:	d14a      	bne.n	8003a32 <_printf_i+0x1f2>
 800399c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039a0:	b004      	add	sp, #16
 80039a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	f043 0320 	orr.w	r3, r3, #32
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	4833      	ldr	r0, [pc, #204]	@ (8003a7c <_printf_i+0x23c>)
 80039b0:	2778      	movs	r7, #120	@ 0x78
 80039b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	6831      	ldr	r1, [r6, #0]
 80039ba:	061f      	lsls	r7, r3, #24
 80039bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80039c0:	d402      	bmi.n	80039c8 <_printf_i+0x188>
 80039c2:	065f      	lsls	r7, r3, #25
 80039c4:	bf48      	it	mi
 80039c6:	b2ad      	uxthmi	r5, r5
 80039c8:	6031      	str	r1, [r6, #0]
 80039ca:	07d9      	lsls	r1, r3, #31
 80039cc:	bf44      	itt	mi
 80039ce:	f043 0320 	orrmi.w	r3, r3, #32
 80039d2:	6023      	strmi	r3, [r4, #0]
 80039d4:	b11d      	cbz	r5, 80039de <_printf_i+0x19e>
 80039d6:	2310      	movs	r3, #16
 80039d8:	e7ac      	b.n	8003934 <_printf_i+0xf4>
 80039da:	4827      	ldr	r0, [pc, #156]	@ (8003a78 <_printf_i+0x238>)
 80039dc:	e7e9      	b.n	80039b2 <_printf_i+0x172>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	f023 0320 	bic.w	r3, r3, #32
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	e7f6      	b.n	80039d6 <_printf_i+0x196>
 80039e8:	4616      	mov	r6, r2
 80039ea:	e7bd      	b.n	8003968 <_printf_i+0x128>
 80039ec:	6833      	ldr	r3, [r6, #0]
 80039ee:	6825      	ldr	r5, [r4, #0]
 80039f0:	6961      	ldr	r1, [r4, #20]
 80039f2:	1d18      	adds	r0, r3, #4
 80039f4:	6030      	str	r0, [r6, #0]
 80039f6:	062e      	lsls	r6, r5, #24
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	d501      	bpl.n	8003a00 <_printf_i+0x1c0>
 80039fc:	6019      	str	r1, [r3, #0]
 80039fe:	e002      	b.n	8003a06 <_printf_i+0x1c6>
 8003a00:	0668      	lsls	r0, r5, #25
 8003a02:	d5fb      	bpl.n	80039fc <_printf_i+0x1bc>
 8003a04:	8019      	strh	r1, [r3, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	4616      	mov	r6, r2
 8003a0c:	e7bc      	b.n	8003988 <_printf_i+0x148>
 8003a0e:	6833      	ldr	r3, [r6, #0]
 8003a10:	1d1a      	adds	r2, r3, #4
 8003a12:	6032      	str	r2, [r6, #0]
 8003a14:	681e      	ldr	r6, [r3, #0]
 8003a16:	6862      	ldr	r2, [r4, #4]
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f7fc fbd8 	bl	80001d0 <memchr>
 8003a20:	b108      	cbz	r0, 8003a26 <_printf_i+0x1e6>
 8003a22:	1b80      	subs	r0, r0, r6
 8003a24:	6060      	str	r0, [r4, #4]
 8003a26:	6863      	ldr	r3, [r4, #4]
 8003a28:	6123      	str	r3, [r4, #16]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a30:	e7aa      	b.n	8003988 <_printf_i+0x148>
 8003a32:	6923      	ldr	r3, [r4, #16]
 8003a34:	4632      	mov	r2, r6
 8003a36:	4649      	mov	r1, r9
 8003a38:	4640      	mov	r0, r8
 8003a3a:	47d0      	blx	sl
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d0ad      	beq.n	800399c <_printf_i+0x15c>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	079b      	lsls	r3, r3, #30
 8003a44:	d413      	bmi.n	8003a6e <_printf_i+0x22e>
 8003a46:	68e0      	ldr	r0, [r4, #12]
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	4298      	cmp	r0, r3
 8003a4c:	bfb8      	it	lt
 8003a4e:	4618      	movlt	r0, r3
 8003a50:	e7a6      	b.n	80039a0 <_printf_i+0x160>
 8003a52:	2301      	movs	r3, #1
 8003a54:	4632      	mov	r2, r6
 8003a56:	4649      	mov	r1, r9
 8003a58:	4640      	mov	r0, r8
 8003a5a:	47d0      	blx	sl
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d09d      	beq.n	800399c <_printf_i+0x15c>
 8003a60:	3501      	adds	r5, #1
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	9903      	ldr	r1, [sp, #12]
 8003a66:	1a5b      	subs	r3, r3, r1
 8003a68:	42ab      	cmp	r3, r5
 8003a6a:	dcf2      	bgt.n	8003a52 <_printf_i+0x212>
 8003a6c:	e7eb      	b.n	8003a46 <_printf_i+0x206>
 8003a6e:	2500      	movs	r5, #0
 8003a70:	f104 0619 	add.w	r6, r4, #25
 8003a74:	e7f5      	b.n	8003a62 <_printf_i+0x222>
 8003a76:	bf00      	nop
 8003a78:	08003ea9 	.word	0x08003ea9
 8003a7c:	08003eba 	.word	0x08003eba

08003a80 <__sflush_r>:
 8003a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a88:	0716      	lsls	r6, r2, #28
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	d454      	bmi.n	8003b3a <__sflush_r+0xba>
 8003a90:	684b      	ldr	r3, [r1, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	dc02      	bgt.n	8003a9c <__sflush_r+0x1c>
 8003a96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	dd48      	ble.n	8003b2e <__sflush_r+0xae>
 8003a9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a9e:	2e00      	cmp	r6, #0
 8003aa0:	d045      	beq.n	8003b2e <__sflush_r+0xae>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003aa8:	682f      	ldr	r7, [r5, #0]
 8003aaa:	6a21      	ldr	r1, [r4, #32]
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	d030      	beq.n	8003b12 <__sflush_r+0x92>
 8003ab0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ab2:	89a3      	ldrh	r3, [r4, #12]
 8003ab4:	0759      	lsls	r1, r3, #29
 8003ab6:	d505      	bpl.n	8003ac4 <__sflush_r+0x44>
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	1ad2      	subs	r2, r2, r3
 8003abc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003abe:	b10b      	cbz	r3, 8003ac4 <__sflush_r+0x44>
 8003ac0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ac2:	1ad2      	subs	r2, r2, r3
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ac8:	6a21      	ldr	r1, [r4, #32]
 8003aca:	4628      	mov	r0, r5
 8003acc:	47b0      	blx	r6
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	d106      	bne.n	8003ae2 <__sflush_r+0x62>
 8003ad4:	6829      	ldr	r1, [r5, #0]
 8003ad6:	291d      	cmp	r1, #29
 8003ad8:	d82b      	bhi.n	8003b32 <__sflush_r+0xb2>
 8003ada:	4a2a      	ldr	r2, [pc, #168]	@ (8003b84 <__sflush_r+0x104>)
 8003adc:	410a      	asrs	r2, r1
 8003ade:	07d6      	lsls	r6, r2, #31
 8003ae0:	d427      	bmi.n	8003b32 <__sflush_r+0xb2>
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	6062      	str	r2, [r4, #4]
 8003ae6:	04d9      	lsls	r1, r3, #19
 8003ae8:	6922      	ldr	r2, [r4, #16]
 8003aea:	6022      	str	r2, [r4, #0]
 8003aec:	d504      	bpl.n	8003af8 <__sflush_r+0x78>
 8003aee:	1c42      	adds	r2, r0, #1
 8003af0:	d101      	bne.n	8003af6 <__sflush_r+0x76>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	b903      	cbnz	r3, 8003af8 <__sflush_r+0x78>
 8003af6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003af8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003afa:	602f      	str	r7, [r5, #0]
 8003afc:	b1b9      	cbz	r1, 8003b2e <__sflush_r+0xae>
 8003afe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b02:	4299      	cmp	r1, r3
 8003b04:	d002      	beq.n	8003b0c <__sflush_r+0x8c>
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7ff fbf2 	bl	80032f0 <_free_r>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b10:	e00d      	b.n	8003b2e <__sflush_r+0xae>
 8003b12:	2301      	movs	r3, #1
 8003b14:	4628      	mov	r0, r5
 8003b16:	47b0      	blx	r6
 8003b18:	4602      	mov	r2, r0
 8003b1a:	1c50      	adds	r0, r2, #1
 8003b1c:	d1c9      	bne.n	8003ab2 <__sflush_r+0x32>
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0c6      	beq.n	8003ab2 <__sflush_r+0x32>
 8003b24:	2b1d      	cmp	r3, #29
 8003b26:	d001      	beq.n	8003b2c <__sflush_r+0xac>
 8003b28:	2b16      	cmp	r3, #22
 8003b2a:	d11e      	bne.n	8003b6a <__sflush_r+0xea>
 8003b2c:	602f      	str	r7, [r5, #0]
 8003b2e:	2000      	movs	r0, #0
 8003b30:	e022      	b.n	8003b78 <__sflush_r+0xf8>
 8003b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b36:	b21b      	sxth	r3, r3
 8003b38:	e01b      	b.n	8003b72 <__sflush_r+0xf2>
 8003b3a:	690f      	ldr	r7, [r1, #16]
 8003b3c:	2f00      	cmp	r7, #0
 8003b3e:	d0f6      	beq.n	8003b2e <__sflush_r+0xae>
 8003b40:	0793      	lsls	r3, r2, #30
 8003b42:	680e      	ldr	r6, [r1, #0]
 8003b44:	bf08      	it	eq
 8003b46:	694b      	ldreq	r3, [r1, #20]
 8003b48:	600f      	str	r7, [r1, #0]
 8003b4a:	bf18      	it	ne
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	eba6 0807 	sub.w	r8, r6, r7
 8003b52:	608b      	str	r3, [r1, #8]
 8003b54:	f1b8 0f00 	cmp.w	r8, #0
 8003b58:	dde9      	ble.n	8003b2e <__sflush_r+0xae>
 8003b5a:	6a21      	ldr	r1, [r4, #32]
 8003b5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003b5e:	4643      	mov	r3, r8
 8003b60:	463a      	mov	r2, r7
 8003b62:	4628      	mov	r0, r5
 8003b64:	47b0      	blx	r6
 8003b66:	2800      	cmp	r0, #0
 8003b68:	dc08      	bgt.n	8003b7c <__sflush_r+0xfc>
 8003b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b72:	81a3      	strh	r3, [r4, #12]
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7c:	4407      	add	r7, r0
 8003b7e:	eba8 0800 	sub.w	r8, r8, r0
 8003b82:	e7e7      	b.n	8003b54 <__sflush_r+0xd4>
 8003b84:	dfbffffe 	.word	0xdfbffffe

08003b88 <_fflush_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	690b      	ldr	r3, [r1, #16]
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	460c      	mov	r4, r1
 8003b90:	b913      	cbnz	r3, 8003b98 <_fflush_r+0x10>
 8003b92:	2500      	movs	r5, #0
 8003b94:	4628      	mov	r0, r5
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	b118      	cbz	r0, 8003ba2 <_fflush_r+0x1a>
 8003b9a:	6a03      	ldr	r3, [r0, #32]
 8003b9c:	b90b      	cbnz	r3, 8003ba2 <_fflush_r+0x1a>
 8003b9e:	f7ff fa9f 	bl	80030e0 <__sinit>
 8003ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f3      	beq.n	8003b92 <_fflush_r+0xa>
 8003baa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003bac:	07d0      	lsls	r0, r2, #31
 8003bae:	d404      	bmi.n	8003bba <_fflush_r+0x32>
 8003bb0:	0599      	lsls	r1, r3, #22
 8003bb2:	d402      	bmi.n	8003bba <_fflush_r+0x32>
 8003bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bb6:	f7ff fb98 	bl	80032ea <__retarget_lock_acquire_recursive>
 8003bba:	4628      	mov	r0, r5
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	f7ff ff5f 	bl	8003a80 <__sflush_r>
 8003bc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bc4:	07da      	lsls	r2, r3, #31
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	d4e4      	bmi.n	8003b94 <_fflush_r+0xc>
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	059b      	lsls	r3, r3, #22
 8003bce:	d4e1      	bmi.n	8003b94 <_fflush_r+0xc>
 8003bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bd2:	f7ff fb8b 	bl	80032ec <__retarget_lock_release_recursive>
 8003bd6:	e7dd      	b.n	8003b94 <_fflush_r+0xc>

08003bd8 <__swbuf_r>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	460e      	mov	r6, r1
 8003bdc:	4614      	mov	r4, r2
 8003bde:	4605      	mov	r5, r0
 8003be0:	b118      	cbz	r0, 8003bea <__swbuf_r+0x12>
 8003be2:	6a03      	ldr	r3, [r0, #32]
 8003be4:	b90b      	cbnz	r3, 8003bea <__swbuf_r+0x12>
 8003be6:	f7ff fa7b 	bl	80030e0 <__sinit>
 8003bea:	69a3      	ldr	r3, [r4, #24]
 8003bec:	60a3      	str	r3, [r4, #8]
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	071a      	lsls	r2, r3, #28
 8003bf2:	d501      	bpl.n	8003bf8 <__swbuf_r+0x20>
 8003bf4:	6923      	ldr	r3, [r4, #16]
 8003bf6:	b943      	cbnz	r3, 8003c0a <__swbuf_r+0x32>
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f000 f82a 	bl	8003c54 <__swsetup_r>
 8003c00:	b118      	cbz	r0, 8003c0a <__swbuf_r+0x32>
 8003c02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003c06:	4638      	mov	r0, r7
 8003c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	6922      	ldr	r2, [r4, #16]
 8003c0e:	1a98      	subs	r0, r3, r2
 8003c10:	6963      	ldr	r3, [r4, #20]
 8003c12:	b2f6      	uxtb	r6, r6
 8003c14:	4283      	cmp	r3, r0
 8003c16:	4637      	mov	r7, r6
 8003c18:	dc05      	bgt.n	8003c26 <__swbuf_r+0x4e>
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f7ff ffb3 	bl	8003b88 <_fflush_r>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d1ed      	bne.n	8003c02 <__swbuf_r+0x2a>
 8003c26:	68a3      	ldr	r3, [r4, #8]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	60a3      	str	r3, [r4, #8]
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	6022      	str	r2, [r4, #0]
 8003c32:	701e      	strb	r6, [r3, #0]
 8003c34:	6962      	ldr	r2, [r4, #20]
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d004      	beq.n	8003c46 <__swbuf_r+0x6e>
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	07db      	lsls	r3, r3, #31
 8003c40:	d5e1      	bpl.n	8003c06 <__swbuf_r+0x2e>
 8003c42:	2e0a      	cmp	r6, #10
 8003c44:	d1df      	bne.n	8003c06 <__swbuf_r+0x2e>
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f7ff ff9d 	bl	8003b88 <_fflush_r>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d0d9      	beq.n	8003c06 <__swbuf_r+0x2e>
 8003c52:	e7d6      	b.n	8003c02 <__swbuf_r+0x2a>

08003c54 <__swsetup_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <__swsetup_r+0xa8>)
 8003c58:	4605      	mov	r5, r0
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	b118      	cbz	r0, 8003c68 <__swsetup_r+0x14>
 8003c60:	6a03      	ldr	r3, [r0, #32]
 8003c62:	b90b      	cbnz	r3, 8003c68 <__swsetup_r+0x14>
 8003c64:	f7ff fa3c 	bl	80030e0 <__sinit>
 8003c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6c:	0719      	lsls	r1, r3, #28
 8003c6e:	d422      	bmi.n	8003cb6 <__swsetup_r+0x62>
 8003c70:	06da      	lsls	r2, r3, #27
 8003c72:	d407      	bmi.n	8003c84 <__swsetup_r+0x30>
 8003c74:	2209      	movs	r2, #9
 8003c76:	602a      	str	r2, [r5, #0]
 8003c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c7c:	81a3      	strh	r3, [r4, #12]
 8003c7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c82:	e033      	b.n	8003cec <__swsetup_r+0x98>
 8003c84:	0758      	lsls	r0, r3, #29
 8003c86:	d512      	bpl.n	8003cae <__swsetup_r+0x5a>
 8003c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c8a:	b141      	cbz	r1, 8003c9e <__swsetup_r+0x4a>
 8003c8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c90:	4299      	cmp	r1, r3
 8003c92:	d002      	beq.n	8003c9a <__swsetup_r+0x46>
 8003c94:	4628      	mov	r0, r5
 8003c96:	f7ff fb2b 	bl	80032f0 <_free_r>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	6063      	str	r3, [r4, #4]
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	89a3      	ldrh	r3, [r4, #12]
 8003cb0:	f043 0308 	orr.w	r3, r3, #8
 8003cb4:	81a3      	strh	r3, [r4, #12]
 8003cb6:	6923      	ldr	r3, [r4, #16]
 8003cb8:	b94b      	cbnz	r3, 8003cce <__swsetup_r+0x7a>
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc4:	d003      	beq.n	8003cce <__swsetup_r+0x7a>
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 f84f 	bl	8003d6c <__smakebuf_r>
 8003cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd2:	f013 0201 	ands.w	r2, r3, #1
 8003cd6:	d00a      	beq.n	8003cee <__swsetup_r+0x9a>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	60a2      	str	r2, [r4, #8]
 8003cdc:	6962      	ldr	r2, [r4, #20]
 8003cde:	4252      	negs	r2, r2
 8003ce0:	61a2      	str	r2, [r4, #24]
 8003ce2:	6922      	ldr	r2, [r4, #16]
 8003ce4:	b942      	cbnz	r2, 8003cf8 <__swsetup_r+0xa4>
 8003ce6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cea:	d1c5      	bne.n	8003c78 <__swsetup_r+0x24>
 8003cec:	bd38      	pop	{r3, r4, r5, pc}
 8003cee:	0799      	lsls	r1, r3, #30
 8003cf0:	bf58      	it	pl
 8003cf2:	6962      	ldrpl	r2, [r4, #20]
 8003cf4:	60a2      	str	r2, [r4, #8]
 8003cf6:	e7f4      	b.n	8003ce2 <__swsetup_r+0x8e>
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	e7f7      	b.n	8003cec <__swsetup_r+0x98>
 8003cfc:	2000002c 	.word	0x2000002c

08003d00 <_sbrk_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4d06      	ldr	r5, [pc, #24]	@ (8003d1c <_sbrk_r+0x1c>)
 8003d04:	2300      	movs	r3, #0
 8003d06:	4604      	mov	r4, r0
 8003d08:	4608      	mov	r0, r1
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	f7fc feee 	bl	8000aec <_sbrk>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d102      	bne.n	8003d1a <_sbrk_r+0x1a>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b103      	cbz	r3, 8003d1a <_sbrk_r+0x1a>
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	200014f4 	.word	0x200014f4

08003d20 <__swhatbuf_r>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	460c      	mov	r4, r1
 8003d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	b096      	sub	sp, #88	@ 0x58
 8003d2c:	4615      	mov	r5, r2
 8003d2e:	461e      	mov	r6, r3
 8003d30:	da0d      	bge.n	8003d4e <__swhatbuf_r+0x2e>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d38:	f04f 0100 	mov.w	r1, #0
 8003d3c:	bf14      	ite	ne
 8003d3e:	2340      	movne	r3, #64	@ 0x40
 8003d40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d44:	2000      	movs	r0, #0
 8003d46:	6031      	str	r1, [r6, #0]
 8003d48:	602b      	str	r3, [r5, #0]
 8003d4a:	b016      	add	sp, #88	@ 0x58
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	466a      	mov	r2, sp
 8003d50:	f000 f848 	bl	8003de4 <_fstat_r>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	dbec      	blt.n	8003d32 <__swhatbuf_r+0x12>
 8003d58:	9901      	ldr	r1, [sp, #4]
 8003d5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d62:	4259      	negs	r1, r3
 8003d64:	4159      	adcs	r1, r3
 8003d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d6a:	e7eb      	b.n	8003d44 <__swhatbuf_r+0x24>

08003d6c <__smakebuf_r>:
 8003d6c:	898b      	ldrh	r3, [r1, #12]
 8003d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d70:	079d      	lsls	r5, r3, #30
 8003d72:	4606      	mov	r6, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	d507      	bpl.n	8003d88 <__smakebuf_r+0x1c>
 8003d78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	6123      	str	r3, [r4, #16]
 8003d80:	2301      	movs	r3, #1
 8003d82:	6163      	str	r3, [r4, #20]
 8003d84:	b003      	add	sp, #12
 8003d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d88:	ab01      	add	r3, sp, #4
 8003d8a:	466a      	mov	r2, sp
 8003d8c:	f7ff ffc8 	bl	8003d20 <__swhatbuf_r>
 8003d90:	9f00      	ldr	r7, [sp, #0]
 8003d92:	4605      	mov	r5, r0
 8003d94:	4639      	mov	r1, r7
 8003d96:	4630      	mov	r0, r6
 8003d98:	f7ff fb16 	bl	80033c8 <_malloc_r>
 8003d9c:	b948      	cbnz	r0, 8003db2 <__smakebuf_r+0x46>
 8003d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da2:	059a      	lsls	r2, r3, #22
 8003da4:	d4ee      	bmi.n	8003d84 <__smakebuf_r+0x18>
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	e7e2      	b.n	8003d78 <__smakebuf_r+0xc>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	6020      	str	r0, [r4, #0]
 8003db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	9b01      	ldr	r3, [sp, #4]
 8003dbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003dc2:	b15b      	cbz	r3, 8003ddc <__smakebuf_r+0x70>
 8003dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 f81d 	bl	8003e08 <_isatty_r>
 8003dce:	b128      	cbz	r0, 8003ddc <__smakebuf_r+0x70>
 8003dd0:	89a3      	ldrh	r3, [r4, #12]
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	431d      	orrs	r5, r3
 8003de0:	81a5      	strh	r5, [r4, #12]
 8003de2:	e7cf      	b.n	8003d84 <__smakebuf_r+0x18>

08003de4 <_fstat_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	4d07      	ldr	r5, [pc, #28]	@ (8003e04 <_fstat_r+0x20>)
 8003de8:	2300      	movs	r3, #0
 8003dea:	4604      	mov	r4, r0
 8003dec:	4608      	mov	r0, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	602b      	str	r3, [r5, #0]
 8003df2:	f7fc fe53 	bl	8000a9c <_fstat>
 8003df6:	1c43      	adds	r3, r0, #1
 8003df8:	d102      	bne.n	8003e00 <_fstat_r+0x1c>
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	b103      	cbz	r3, 8003e00 <_fstat_r+0x1c>
 8003dfe:	6023      	str	r3, [r4, #0]
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	bf00      	nop
 8003e04:	200014f4 	.word	0x200014f4

08003e08 <_isatty_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4d06      	ldr	r5, [pc, #24]	@ (8003e24 <_isatty_r+0x1c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fc fe52 	bl	8000abc <_isatty>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_isatty_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_isatty_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	200014f4 	.word	0x200014f4

08003e28 <_init>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr

08003e34 <_fini>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr
