
LCD_I2C3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004624  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800480c  0800480c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800480c  0800480c  0000580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004814  08004814  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004814  08004814  00005814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004818  08004818  00005818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800481c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000001c8  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000077e1  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016c9  00000000  00000000  0000d86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  0000ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005cf  00000000  00000000  0000f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202f6  00000000  00000000  0000fc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009acb  00000000  00000000  0002ff95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d43  00000000  00000000  00039a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc7a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023a4  00000000  00000000  000fc7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000feb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800479c 	.word	0x0800479c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800479c 	.word	0x0800479c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <lcd_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lcd_init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

	/* Wait for 15ms */
	HAL_Delay(15);
 8000564:	200f      	movs	r0, #15
 8000566:	f000 fb6d 	bl	8000c44 <HAL_Delay>

	/*Function Set - As per HD44780U*/
	i2c_transmit_command(LCD_FUNCTION_SET1);
 800056a:	2033      	movs	r0, #51	@ 0x33
 800056c:	f000 f812 	bl	8000594 <i2c_transmit_command>

	/*Function Set -As per HD44780U*/
	i2c_transmit_command(LCD_FUNCTION_SET2);
 8000570:	2032      	movs	r0, #50	@ 0x32
 8000572:	f000 f80f 	bl	8000594 <i2c_transmit_command>

	/*Set 4bit mode and 2 lines */
	i2c_transmit_command(LCD_4BIT_2LINE_MODE);
 8000576:	2028      	movs	r0, #40	@ 0x28
 8000578:	f000 f80c 	bl	8000594 <i2c_transmit_command>

	/*Display on, cursor off*/
	i2c_transmit_command(0x0C);
 800057c:	200c      	movs	r0, #12
 800057e:	f000 f809 	bl	8000594 <i2c_transmit_command>

	/* SET Row1 and Col1 (1st Line) */
	i2c_transmit_command(0x80);
 8000582:	2080      	movs	r0, #128	@ 0x80
 8000584:	f000 f806 	bl	8000594 <i2c_transmit_command>

	/*Clear Display*/
	i2c_transmit_command(LCD_CLEAR_DISPLAY);
 8000588:	2001      	movs	r0, #1
 800058a:	f000 f803 	bl	8000594 <i2c_transmit_command>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <i2c_transmit_command>:



void i2c_transmit_command(uint8_t data)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]

	uint8_t command_en_on 	= ( (data & 0xF0) | 0x0C); //LED ON, RW = 0, RS = 0, EN =1;
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	f023 030f 	bic.w	r3, r3, #15
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	f043 030c 	orr.w	r3, r3, #12
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	73fb      	strb	r3, [r7, #15]
	uint8_t command_en_off 	= ( command_en_on & (~(1 << 2)) );  //LED ON, RW = 0, RS = 0, EN =0;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f023 0304 	bic.w	r3, r3, #4
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	73bb      	strb	r3, [r7, #14]


	HAL_I2C_Master_Transmit(&hi2c1, slave_address << 1, &command_en_on, 1, 100);
 80005bc:	f107 020f 	add.w	r2, r7, #15
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	217e      	movs	r1, #126	@ 0x7e
 80005c8:	481a      	ldr	r0, [pc, #104]	@ (8000634 <i2c_transmit_command+0xa0>)
 80005ca:	f000 ff97 	bl	80014fc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 fb38 	bl	8000c44 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address << 1, &command_en_off, 1, 100);
 80005d4:	f107 020e 	add.w	r2, r7, #14
 80005d8:	2364      	movs	r3, #100	@ 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	217e      	movs	r1, #126	@ 0x7e
 80005e0:	4814      	ldr	r0, [pc, #80]	@ (8000634 <i2c_transmit_command+0xa0>)
 80005e2:	f000 ff8b 	bl	80014fc <HAL_I2C_Master_Transmit>

	uint8_t command_lsb_en_on 	= (( (data << 4 ) & 0xF0 ) | 0X0C); //LED ON, RW = 0, RS = 0, EN =1;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	f043 030c 	orr.w	r3, r3, #12
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	737b      	strb	r3, [r7, #13]
	uint8_t command_lsb_en_off 	= ( command_lsb_en_on & (~(1 << 2)) );  //LED ON, RW = 0, RS = 0, EN =0;
 80005f6:	7b7b      	ldrb	r3, [r7, #13]
 80005f8:	f023 0304 	bic.w	r3, r3, #4
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, slave_address << 1, &command_lsb_en_on, 1, 100);
 8000600:	f107 020d 	add.w	r2, r7, #13
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	217e      	movs	r1, #126	@ 0x7e
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <i2c_transmit_command+0xa0>)
 800060e:	f000 ff75 	bl	80014fc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000612:	2002      	movs	r0, #2
 8000614:	f000 fb16 	bl	8000c44 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address << 1, &command_lsb_en_off, 1, 100);
 8000618:	f107 020c 	add.w	r2, r7, #12
 800061c:	2364      	movs	r3, #100	@ 0x64
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	217e      	movs	r1, #126	@ 0x7e
 8000624:	4803      	ldr	r0, [pc, #12]	@ (8000634 <i2c_transmit_command+0xa0>)
 8000626:	f000 ff69 	bl	80014fc <HAL_I2C_Master_Transmit>

}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000078 	.word	0x20000078

08000638 <i2c_transmit_data>:


void i2c_transmit_data(uint8_t data)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af02      	add	r7, sp, #8
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]


	uint8_t data_en_on 	= ( (data & 0xF0) | 0x0D); //LED ON, RW = 0, RS = 0, EN =1;
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	b25b      	sxtb	r3, r3
 800064c:	f043 030d 	orr.w	r3, r3, #13
 8000650:	b25b      	sxtb	r3, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	73fb      	strb	r3, [r7, #15]
	uint8_t data_en_off 	= ( data_en_on & (~(1 << 2)) );  //LED ON, RW = 0, RS = 0, EN =0;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	f023 0304 	bic.w	r3, r3, #4
 800065c:	b2db      	uxtb	r3, r3
 800065e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c1, slave_address << 1, &data_en_on, 1, 100);
 8000660:	f107 020f 	add.w	r2, r7, #15
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	217e      	movs	r1, #126	@ 0x7e
 800066c:	481a      	ldr	r0, [pc, #104]	@ (80006d8 <i2c_transmit_data+0xa0>)
 800066e:	f000 ff45 	bl	80014fc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000672:	2002      	movs	r0, #2
 8000674:	f000 fae6 	bl	8000c44 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address << 1, &data_en_off, 1, 100);
 8000678:	f107 020e 	add.w	r2, r7, #14
 800067c:	2364      	movs	r3, #100	@ 0x64
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	217e      	movs	r1, #126	@ 0x7e
 8000684:	4814      	ldr	r0, [pc, #80]	@ (80006d8 <i2c_transmit_data+0xa0>)
 8000686:	f000 ff39 	bl	80014fc <HAL_I2C_Master_Transmit>

	uint8_t data_lsb_en_on 	= (( (data << 4 ) & 0xF0 ) | 0X0D); //LED ON, RW = 0, RS = 0, EN =1;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	b25b      	sxtb	r3, r3
 8000690:	f043 030d 	orr.w	r3, r3, #13
 8000694:	b25b      	sxtb	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	737b      	strb	r3, [r7, #13]
	uint8_t data_lsb_en_off 	= ( data_lsb_en_on & (~(1 << 2)) );  //LED ON, RW = 0, RS = 0, EN =0;
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	f023 0304 	bic.w	r3, r3, #4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, slave_address << 1, &data_lsb_en_on, 1, 100);
 80006a4:	f107 020d 	add.w	r2, r7, #13
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2301      	movs	r3, #1
 80006ae:	217e      	movs	r1, #126	@ 0x7e
 80006b0:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <i2c_transmit_data+0xa0>)
 80006b2:	f000 ff23 	bl	80014fc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 fac4 	bl	8000c44 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address << 1, &data_lsb_en_off, 1, 100);
 80006bc:	f107 020c 	add.w	r2, r7, #12
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	217e      	movs	r1, #126	@ 0x7e
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <i2c_transmit_data+0xa0>)
 80006ca:	f000 ff17 	bl	80014fc <HAL_I2C_Master_Transmit>

}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000078 	.word	0x20000078

080006dc <LCD_Send_String>:

void LCD_Send_String(char *str)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	while (*str)
 80006e4:	e006      	b.n	80006f4 <LCD_Send_String+0x18>
	{
		i2c_transmit_data(*str++);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffa2 	bl	8000638 <i2c_transmit_data>
	while (*str)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f4      	bne.n	80006e6 <LCD_Send_String+0xa>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fa28 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f82a 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 f8c0 	bl	8000898 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000718:	f000 f890 	bl	800083c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 800071c:	f7ff ff20 	bl	8000560 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  a++;
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <main+0x50>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <main+0x50>)
 800072a:	701a      	strb	r2, [r3, #0]
      i2c_transmit_command(0x80); // Force cursor to begin on 1st row
 800072c:	2080      	movs	r0, #128	@ 0x80
 800072e:	f7ff ff31 	bl	8000594 <i2c_transmit_command>
	  sprintf(ab,"%u",a);
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <main+0x50>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	4908      	ldr	r1, [pc, #32]	@ (800075c <main+0x54>)
 800073a:	4809      	ldr	r0, [pc, #36]	@ (8000760 <main+0x58>)
 800073c:	f003 fb8e 	bl	8003e5c <siprintf>
	  LCD_Send_String("Time :");
 8000740:	4808      	ldr	r0, [pc, #32]	@ (8000764 <main+0x5c>)
 8000742:	f7ff ffcb 	bl	80006dc <LCD_Send_String>
	  LCD_Send_String(ab);
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <main+0x58>)
 8000748:	f7ff ffc8 	bl	80006dc <LCD_Send_String>
	  HAL_Delay(50);
 800074c:	2032      	movs	r0, #50	@ 0x32
 800074e:	f000 fa79 	bl	8000c44 <HAL_Delay>
	  a++;
 8000752:	bf00      	nop
 8000754:	e7e4      	b.n	8000720 <main+0x18>
 8000756:	bf00      	nop
 8000758:	200000cc 	.word	0x200000cc
 800075c:	080047b4 	.word	0x080047b4
 8000760:	200000d0 	.word	0x200000d0
 8000764:	080047b8 	.word	0x080047b8

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	@ 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	@ 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fb90 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	4a27      	ldr	r2, [pc, #156]	@ (8000834 <SystemClock_Config+0xcc>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	@ 0x40
 800079c:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <SystemClock_Config+0xd0>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d8:	2308      	movs	r3, #8
 80007da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007dc:	23a8      	movs	r3, #168	@ 0xa8
 80007de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e4:	2307      	movs	r3, #7
 80007e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 feb1 	bl	8003554 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f8:	f000 f876 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000808:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2105      	movs	r1, #5
 800081a:	4618      	mov	r0, r3
 800081c:	f003 f912 	bl	8003a44 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000826:	f000 f85f 	bl	80008e8 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	@ 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_I2C1_Init+0x50>)
 8000842:	4a13      	ldr	r2, [pc, #76]	@ (8000890 <MX_I2C1_Init+0x54>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_I2C1_Init+0x50>)
 8000848:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <MX_I2C1_Init+0x58>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_I2C1_Init+0x50>)
 800085a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <MX_I2C1_Init+0x50>)
 800087a:	f000 fce5 	bl	8001248 <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 f830 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000078 	.word	0x20000078
 8000890:	40005400 	.word	0x40005400
 8000894:	000186a0 	.word	0x000186a0

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_GPIO_Init+0x4c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	@ (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000932:	2007      	movs	r0, #7
 8000934:	f000 fa7a 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <HAL_I2C_MspInit+0xa4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d13b      	bne.n	80009de <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <HAL_I2C_MspInit+0xa8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a1f      	ldr	r2, [pc, #124]	@ (80009ec <HAL_I2C_MspInit+0xa8>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <HAL_I2C_MspInit+0xa8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000982:	23c0      	movs	r3, #192	@ 0xc0
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000992:	2304      	movs	r3, #4
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4814      	ldr	r0, [pc, #80]	@ (80009f0 <HAL_I2C_MspInit+0xac>)
 800099e:	f000 fab7 	bl	8000f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_I2C_MspInit+0xa8>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <HAL_I2C_MspInit+0xa8>)
 80009ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_I2C_MspInit+0xa8>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	201f      	movs	r0, #31
 80009c4:	f000 fa3d 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009c8:	201f      	movs	r0, #31
 80009ca:	f000 fa56 	bl	8000e7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2020      	movs	r0, #32
 80009d4:	f000 fa35 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009d8:	2020      	movs	r0, #32
 80009da:	f000 fa4e 	bl	8000e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	@ 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40005400 	.word	0x40005400
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020400 	.word	0x40020400

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4a:	f000 f8db 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <I2C1_EV_IRQHandler+0x10>)
 8000a5a:	f000 fe4d 	bl	80016f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000078 	.word	0x20000078

08000a68 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <I2C1_ER_IRQHandler+0x10>)
 8000a6e:	f000 ff96 	bl	800199e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000078 	.word	0x20000078

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f003 f9fe 	bl	8003eac <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20020000 	.word	0x20020000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	200000d4 	.word	0x200000d4
 8000ae4:	20000228 	.word	0x20000228

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b10:	f7ff ffea 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	@ (8000b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f003 f9bd 	bl	8003eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fde3 	bl	8000708 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b50:	0800481c 	.word	0x0800481c
  ldr r2, =_sbss
 8000b54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b58:	20000224 	.word	0x20000224

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <HAL_Init+0x40>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <HAL_Init+0x40>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_Init+0x40>)
 8000b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f94f 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff feae 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023c00 	.word	0x40023c00

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f967 	bl	8000e96 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	f000 f92f 	bl	8000e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	200000d8 	.word	0x200000d8

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	200000d8 	.word	0x200000d8

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffde 	bl	8000c2c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4907      	ldr	r1, [pc, #28]	@ (8000d28 <__NVIC_EnableIRQ+0x38>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	@ (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	@ (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff29 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff3e 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff8e 	bl	8000d80 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5d 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff31 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffa2 	bl	8000de8 <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d004      	beq.n	8000ecc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e00c      	b.n	8000ee6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2205      	movs	r2, #5
 8000ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f00:	b2db      	uxtb	r3, r3
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e16b      	b.n	8001204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 815a 	bne.w	80011fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b60      	ldr	r3, [pc, #384]	@ (800121c <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	4a5f      	ldr	r2, [pc, #380]	@ (800121c <HAL_GPIO_Init+0x30c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a6:	4b5d      	ldr	r3, [pc, #372]	@ (800121c <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001220 <HAL_GPIO_Init+0x310>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a52      	ldr	r2, [pc, #328]	@ (8001224 <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a51      	ldr	r2, [pc, #324]	@ (8001228 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a50      	ldr	r2, [pc, #320]	@ (800122c <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001230 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001234 <HAL_GPIO_Init+0x324>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4d      	ldr	r2, [pc, #308]	@ (8001238 <HAL_GPIO_Init+0x328>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4c      	ldr	r2, [pc, #304]	@ (800123c <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4b      	ldr	r2, [pc, #300]	@ (8001240 <HAL_GPIO_Init+0x330>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x20a>
 8001116:	2307      	movs	r3, #7
 8001118:	e00e      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111a:	2308      	movs	r3, #8
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111e:	2306      	movs	r3, #6
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4935      	ldr	r1, [pc, #212]	@ (8001220 <HAL_GPIO_Init+0x310>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001156:	4b3b      	ldr	r3, [pc, #236]	@ (8001244 <HAL_GPIO_Init+0x334>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117a:	4a32      	ldr	r2, [pc, #200]	@ (8001244 <HAL_GPIO_Init+0x334>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001180:	4b30      	ldr	r3, [pc, #192]	@ (8001244 <HAL_GPIO_Init+0x334>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a4:	4a27      	ldr	r2, [pc, #156]	@ (8001244 <HAL_GPIO_Init+0x334>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011aa:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <HAL_GPIO_Init+0x334>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_GPIO_Init+0x334>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f8:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae90 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e12b      	b.n	80014b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fb68 	bl	8000944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2224      	movs	r2, #36	@ 0x24
 8001278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0201 	bic.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800129a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012ac:	f002 fdc2 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 80012b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a81      	ldr	r2, [pc, #516]	@ (80014bc <HAL_I2C_Init+0x274>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d807      	bhi.n	80012cc <HAL_I2C_Init+0x84>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4a80      	ldr	r2, [pc, #512]	@ (80014c0 <HAL_I2C_Init+0x278>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	bf94      	ite	ls
 80012c4:	2301      	movls	r3, #1
 80012c6:	2300      	movhi	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	e006      	b.n	80012da <HAL_I2C_Init+0x92>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4a7d      	ldr	r2, [pc, #500]	@ (80014c4 <HAL_I2C_Init+0x27c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	bf94      	ite	ls
 80012d4:	2301      	movls	r3, #1
 80012d6:	2300      	movhi	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0e7      	b.n	80014b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4a78      	ldr	r2, [pc, #480]	@ (80014c8 <HAL_I2C_Init+0x280>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	0c9b      	lsrs	r3, r3, #18
 80012ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	430a      	orrs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a6a      	ldr	r2, [pc, #424]	@ (80014bc <HAL_I2C_Init+0x274>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d802      	bhi.n	800131c <HAL_I2C_Init+0xd4>
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3301      	adds	r3, #1
 800131a:	e009      	b.n	8001330 <HAL_I2C_Init+0xe8>
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	4a69      	ldr	r2, [pc, #420]	@ (80014cc <HAL_I2C_Init+0x284>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	3301      	adds	r3, #1
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	430b      	orrs	r3, r1
 8001336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001342:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	495c      	ldr	r1, [pc, #368]	@ (80014bc <HAL_I2C_Init+0x274>)
 800134c:	428b      	cmp	r3, r1
 800134e:	d819      	bhi.n	8001384 <HAL_I2C_Init+0x13c>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	1e59      	subs	r1, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fbb1 f3f3 	udiv	r3, r1, r3
 800135e:	1c59      	adds	r1, r3, #1
 8001360:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001364:	400b      	ands	r3, r1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <HAL_I2C_Init+0x138>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1e59      	subs	r1, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fbb1 f3f3 	udiv	r3, r1, r3
 8001378:	3301      	adds	r3, #1
 800137a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137e:	e051      	b.n	8001424 <HAL_I2C_Init+0x1dc>
 8001380:	2304      	movs	r3, #4
 8001382:	e04f      	b.n	8001424 <HAL_I2C_Init+0x1dc>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d111      	bne.n	80013b0 <HAL_I2C_Init+0x168>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1e58      	subs	r0, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6859      	ldr	r1, [r3, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	440b      	add	r3, r1
 800139a:	fbb0 f3f3 	udiv	r3, r0, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf0c      	ite	eq
 80013a8:	2301      	moveq	r3, #1
 80013aa:	2300      	movne	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	e012      	b.n	80013d6 <HAL_I2C_Init+0x18e>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1e58      	subs	r0, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	0099      	lsls	r1, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c6:	3301      	adds	r3, #1
 80013c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Init+0x196>
 80013da:	2301      	movs	r3, #1
 80013dc:	e022      	b.n	8001424 <HAL_I2C_Init+0x1dc>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10e      	bne.n	8001404 <HAL_I2C_Init+0x1bc>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e58      	subs	r0, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	440b      	add	r3, r1
 80013f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001402:	e00f      	b.n	8001424 <HAL_I2C_Init+0x1dc>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1e58      	subs	r0, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	0099      	lsls	r1, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	fbb0 f3f3 	udiv	r3, r0, r3
 800141a:	3301      	adds	r3, #1
 800141c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001420:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	6809      	ldr	r1, [r1, #0]
 8001428:	4313      	orrs	r3, r2
 800142a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69da      	ldr	r2, [r3, #28]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001452:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6911      	ldr	r1, [r2, #16]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68d2      	ldr	r2, [r2, #12]
 800145e:	4311      	orrs	r1, r2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	430b      	orrs	r3, r1
 8001466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2220      	movs	r2, #32
 800149e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	000186a0 	.word	0x000186a0
 80014c0:	001e847f 	.word	0x001e847f
 80014c4:	003d08ff 	.word	0x003d08ff
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	10624dd3 	.word	0x10624dd3

080014d0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e2:	2b80      	cmp	r3, #128	@ 0x80
 80014e4:	d103      	bne.n	80014ee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af02      	add	r7, sp, #8
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	461a      	mov	r2, r3
 8001508:	460b      	mov	r3, r1
 800150a:	817b      	strh	r3, [r7, #10]
 800150c:	4613      	mov	r3, r2
 800150e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fb8c 	bl	8000c2c <HAL_GetTick>
 8001514:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b20      	cmp	r3, #32
 8001520:	f040 80e0 	bne.w	80016e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2319      	movs	r3, #25
 800152a:	2201      	movs	r2, #1
 800152c:	4970      	ldr	r1, [pc, #448]	@ (80016f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f001 fdea 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
 800153c:	e0d3      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_I2C_Master_Transmit+0x50>
 8001548:	2302      	movs	r3, #2
 800154a:	e0cc      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b01      	cmp	r3, #1
 8001560:	d007      	beq.n	8001572 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001580:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2221      	movs	r2, #33	@ 0x21
 8001586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2210      	movs	r2, #16
 800158e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	893a      	ldrh	r2, [r7, #8]
 80015a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a50      	ldr	r2, [pc, #320]	@ (80016f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015b4:	8979      	ldrh	r1, [r7, #10]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	6a3a      	ldr	r2, [r7, #32]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f001 fc7a 	bl	8002eb4 <I2C_MasterRequestWrite>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e08d      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015e0:	e066      	b.n	80016b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	6a39      	ldr	r1, [r7, #32]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f001 fea8 	bl	800333c <I2C_WaitOnTXEFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d107      	bne.n	800160a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e06b      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b04      	cmp	r3, #4
 800164a:	d11b      	bne.n	8001684 <HAL_I2C_Master_Transmit+0x188>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d017      	beq.n	8001684 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800166e:	b29b      	uxth	r3, r3
 8001670:	3b01      	subs	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f001 fe9f 	bl	80033cc <I2C_WaitOnBTFFlagUntilTimeout>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00d      	beq.n	80016b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	2b04      	cmp	r3, #4
 800169a:	d107      	bne.n	80016ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e01a      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d194      	bne.n	80015e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2220      	movs	r2, #32
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e000      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016e4:	2302      	movs	r3, #2
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	00100002 	.word	0x00100002
 80016f4:	ffff0000 	.word	0xffff0000

080016f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001710:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001718:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001720:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	2b10      	cmp	r3, #16
 8001726:	d003      	beq.n	8001730 <HAL_I2C_EV_IRQHandler+0x38>
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b40      	cmp	r3, #64	@ 0x40
 800172c:	f040 80b1 	bne.w	8001892 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <HAL_I2C_EV_IRQHandler+0x6e>
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001750:	d003      	beq.n	800175a <HAL_I2C_EV_IRQHandler+0x62>
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001758:	d101      	bne.n	800175e <HAL_I2C_EV_IRQHandler+0x66>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_I2C_EV_IRQHandler+0x68>
 800175e:	2300      	movs	r3, #0
 8001760:	2b01      	cmp	r3, #1
 8001762:	f000 8114 	beq.w	800198e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00b      	beq.n	8001788 <HAL_I2C_EV_IRQHandler+0x90>
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f001 fecf 	bl	800351e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 fd7a 	bl	800227a <I2C_Master_SB>
 8001786:	e083      	b.n	8001890 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_I2C_EV_IRQHandler+0xac>
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fdf2 	bl	8002386 <I2C_Master_ADD10>
 80017a2:	e075      	b.n	8001890 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <HAL_I2C_EV_IRQHandler+0xc8>
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fe0e 	bl	80023da <I2C_Master_ADDR>
 80017be:	e067      	b.n	8001890 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d036      	beq.n	8001838 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017d8:	f000 80db 	beq.w	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00d      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0x10a>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0x10a>
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f9d6 	bl	8001bac <I2C_MasterTransmit_TXE>
 8001800:	e046      	b.n	8001890 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80c2 	beq.w	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80bc 	beq.w	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	2b21      	cmp	r3, #33	@ 0x21
 800181e:	d103      	bne.n	8001828 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fa5f 	bl	8001ce4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001826:	e0b4      	b.n	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	2b40      	cmp	r3, #64	@ 0x40
 800182c:	f040 80b1 	bne.w	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 facd 	bl	8001dd0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001836:	e0ac      	b.n	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001846:	f000 80a4 	beq.w	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00d      	beq.n	8001870 <HAL_I2C_EV_IRQHandler+0x178>
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <HAL_I2C_EV_IRQHandler+0x178>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fb49 	bl	8001f00 <I2C_MasterReceive_RXNE>
 800186e:	e00f      	b.n	8001890 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 808b 	beq.w	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8085 	beq.w	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fc01 	bl	8002090 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800188e:	e080      	b.n	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
 8001890:	e07f      	b.n	8001992 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e007      	b.n	80018b4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d011      	beq.n	80018e2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80018d8:	69b9      	ldr	r1, [r7, #24]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 ffcc 	bl	8002878 <I2C_Slave_ADDR>
 80018e0:	e05a      	b.n	8001998 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_I2C_EV_IRQHandler+0x206>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 f806 	bl	8002908 <I2C_Slave_STOPF>
 80018fc:	e04c      	b.n	8001998 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80018fe:	7bbb      	ldrb	r3, [r7, #14]
 8001900:	2b21      	cmp	r3, #33	@ 0x21
 8001902:	d002      	beq.n	800190a <HAL_I2C_EV_IRQHandler+0x212>
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	2b29      	cmp	r3, #41	@ 0x29
 8001908:	d120      	bne.n	800194c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <HAL_I2C_EV_IRQHandler+0x238>
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_I2C_EV_IRQHandler+0x238>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fee7 	bl	80026fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800192e:	e032      	b.n	8001996 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d02d      	beq.n	8001996 <HAL_I2C_EV_IRQHandler+0x29e>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d028      	beq.n	8001996 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 ff16 	bl	8002776 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800194a:	e024      	b.n	8001996 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00d      	beq.n	8001972 <HAL_I2C_EV_IRQHandler+0x27a>
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_I2C_EV_IRQHandler+0x27a>
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 ff24 	bl	80027b8 <I2C_SlaveReceive_RXNE>
 8001970:	e012      	b.n	8001998 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00d      	beq.n	8001998 <HAL_I2C_EV_IRQHandler+0x2a0>
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d008      	beq.n	8001998 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 ff54 	bl	8002834 <I2C_SlaveReceive_BTF>
 800198c:	e004      	b.n	8001998 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800198e:	bf00      	nop
 8001990:	e002      	b.n	8001998 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001992:	bf00      	nop
 8001994:	e000      	b.n	8001998 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001996:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b08a      	sub	sp, #40	@ 0x28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00d      	beq.n	80019e8 <HAL_I2C_ER_IRQHandler+0x4a>
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80019e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00d      	beq.n	8001a0e <HAL_I2C_ER_IRQHandler+0x70>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001a0c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03e      	beq.n	8001a96 <HAL_I2C_ER_IRQHandler+0xf8>
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d039      	beq.n	8001a96 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001a22:	7efb      	ldrb	r3, [r7, #27]
 8001a24:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a34:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001a3c:	7ebb      	ldrb	r3, [r7, #26]
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d112      	bne.n	8001a68 <HAL_I2C_ER_IRQHandler+0xca>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <HAL_I2C_ER_IRQHandler+0xca>
 8001a48:	7cfb      	ldrb	r3, [r7, #19]
 8001a4a:	2b21      	cmp	r3, #33	@ 0x21
 8001a4c:	d008      	beq.n	8001a60 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001a4e:	7cfb      	ldrb	r3, [r7, #19]
 8001a50:	2b29      	cmp	r3, #41	@ 0x29
 8001a52:	d005      	beq.n	8001a60 <HAL_I2C_ER_IRQHandler+0xc2>
 8001a54:	7cfb      	ldrb	r3, [r7, #19]
 8001a56:	2b28      	cmp	r3, #40	@ 0x28
 8001a58:	d106      	bne.n	8001a68 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b21      	cmp	r3, #33	@ 0x21
 8001a5e:	d103      	bne.n	8001a68 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f001 f881 	bl	8002b68 <I2C_Slave_AF>
 8001a66:	e016      	b.n	8001a96 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a70:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a7a:	7efb      	ldrb	r3, [r7, #27]
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d002      	beq.n	8001a86 <HAL_I2C_ER_IRQHandler+0xe8>
 8001a80:	7efb      	ldrb	r3, [r7, #27]
 8001a82:	2b40      	cmp	r3, #64	@ 0x40
 8001a84:	d107      	bne.n	8001a96 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a94:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00d      	beq.n	8001abc <HAL_I2C_ER_IRQHandler+0x11e>
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001aba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f001 f8be 	bl	8002c50 <I2C_ITError>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	@ 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d150      	bne.n	8001c74 <I2C_MasterTransmit_TXE+0xc8>
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	2b21      	cmp	r3, #33	@ 0x21
 8001bd6:	d14d      	bne.n	8001c74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d01d      	beq.n	8001c1a <I2C_MasterTransmit_TXE+0x6e>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d01a      	beq.n	8001c1a <I2C_MasterTransmit_TXE+0x6e>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bea:	d016      	beq.n	8001c1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001bfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2211      	movs	r2, #17
 8001c00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff62 	bl	8001adc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c18:	e060      	b.n	8001cdc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b40      	cmp	r3, #64	@ 0x40
 8001c52:	d107      	bne.n	8001c64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff7d 	bl	8001b5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c62:	e03b      	b.n	8001cdc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff35 	bl	8001adc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c72:	e033      	b.n	8001cdc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b21      	cmp	r3, #33	@ 0x21
 8001c78:	d005      	beq.n	8001c86 <I2C_MasterTransmit_TXE+0xda>
 8001c7a:	7bbb      	ldrb	r3, [r7, #14]
 8001c7c:	2b40      	cmp	r3, #64	@ 0x40
 8001c7e:	d12d      	bne.n	8001cdc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b22      	cmp	r3, #34	@ 0x22
 8001c84:	d12a      	bne.n	8001cdc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d108      	bne.n	8001ca2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001ca0:	e01c      	b.n	8001cdc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b40      	cmp	r3, #64	@ 0x40
 8001cac:	d103      	bne.n	8001cb6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f88e 	bl	8001dd0 <I2C_MemoryTransmit_TXE_BTF>
}
 8001cb4:	e012      	b.n	8001cdc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001cda:	e7ff      	b.n	8001cdc <I2C_MasterTransmit_TXE+0x130>
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b21      	cmp	r3, #33	@ 0x21
 8001cfc:	d164      	bne.n	8001dc8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d012      	beq.n	8001d2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001d2c:	e04c      	b.n	8001dc8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d01d      	beq.n	8001d70 <I2C_MasterTransmit_BTF+0x8c>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d01a      	beq.n	8001d70 <I2C_MasterTransmit_BTF+0x8c>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d40:	d016      	beq.n	8001d70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2211      	movs	r2, #17
 8001d56:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff feb7 	bl	8001adc <HAL_I2C_MasterTxCpltCallback>
}
 8001d6e:	e02b      	b.n	8001dc8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b40      	cmp	r3, #64	@ 0x40
 8001da8:	d107      	bne.n	8001dba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fed2 	bl	8001b5c <HAL_I2C_MemTxCpltCallback>
}
 8001db8:	e006      	b.n	8001dc8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fe8a 	bl	8001adc <HAL_I2C_MasterTxCpltCallback>
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11d      	bne.n	8001e24 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d10b      	bne.n	8001e08 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e00:	1c9a      	adds	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001e06:	e077      	b.n	8001ef8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	121b      	asrs	r3, r3, #8
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e22:	e069      	b.n	8001ef8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d10b      	bne.n	8001e44 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e42:	e059      	b.n	8001ef8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d152      	bne.n	8001ef2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b22      	cmp	r3, #34	@ 0x22
 8001e50:	d10d      	bne.n	8001e6e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e60:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e6c:	e044      	b.n	8001ef8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d015      	beq.n	8001ea4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	2b21      	cmp	r3, #33	@ 0x21
 8001e7c:	d112      	bne.n	8001ea4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ea2:	e029      	b.n	8001ef8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d124      	bne.n	8001ef8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	2b21      	cmp	r3, #33	@ 0x21
 8001eb2:	d121      	bne.n	8001ef8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ec2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fe36 	bl	8001b5c <HAL_I2C_MemTxCpltCallback>
}
 8001ef0:	e002      	b.n	8001ef8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff faec 	bl	80014d0 <I2C_Flush_DR>
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b22      	cmp	r3, #34	@ 0x22
 8001f12:	f040 80b9 	bne.w	8002088 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d921      	bls.n	8001f6e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	f040 8096 	bne.w	8002088 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f6a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001f6c:	e08c      	b.n	8002088 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d07f      	beq.n	8002076 <I2C_MasterReceive_RXNE+0x176>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d002      	beq.n	8001f82 <I2C_MasterReceive_RXNE+0x82>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d179      	bne.n	8002076 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f001 fa6a 	bl	800345c <I2C_WaitOnSTOPRequestThroughIT>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d14c      	bne.n	8002028 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f9c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001fac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b40      	cmp	r3, #64	@ 0x40
 8001fe6:	d10a      	bne.n	8001ffe <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fdba 	bl	8001b70 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ffc:	e044      	b.n	8002088 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d002      	beq.n	8002012 <I2C_MasterReceive_RXNE+0x112>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b20      	cmp	r3, #32
 8002010:	d103      	bne.n	800201a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	@ 0x30
 8002018:	e002      	b.n	8002020 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2212      	movs	r2, #18
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff fd65 	bl	8001af0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002026:	e02f      	b.n	8002088 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002036:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fd88 	bl	8001b84 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002074:	e008      	b.n	8002088 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002084:	605a      	str	r2, [r3, #4]
}
 8002086:	e7ff      	b.n	8002088 <I2C_MasterReceive_RXNE+0x188>
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d11b      	bne.n	80020e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80020de:	e0c8      	b.n	8002272 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d129      	bne.n	800213e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d00a      	beq.n	8002116 <I2C_MasterReceive_BTF+0x86>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d007      	beq.n	8002116 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002114:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800213c:	e099      	b.n	8002272 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	f040 8081 	bne.w	800224c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d002      	beq.n	8002156 <I2C_MasterReceive_BTF+0xc6>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d108      	bne.n	8002168 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e019      	b.n	800219c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b04      	cmp	r3, #4
 800216c:	d002      	beq.n	8002174 <I2C_MasterReceive_BTF+0xe4>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d108      	bne.n	8002186 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e00a      	b.n	800219c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b10      	cmp	r3, #16
 800218a:	d007      	beq.n	800219c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800219a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80021f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b40      	cmp	r3, #64	@ 0x40
 800220a:	d10a      	bne.n	8002222 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fca8 	bl	8001b70 <HAL_I2C_MemRxCpltCallback>
}
 8002220:	e027      	b.n	8002272 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d002      	beq.n	8002236 <I2C_MasterReceive_BTF+0x1a6>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b20      	cmp	r3, #32
 8002234:	d103      	bne.n	800223e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
 800223c:	e002      	b.n	8002244 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2212      	movs	r2, #18
 8002242:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fc53 	bl	8001af0 <HAL_I2C_MasterRxCpltCallback>
}
 800224a:	e012      	b.n	8002272 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b40      	cmp	r3, #64	@ 0x40
 800228c:	d117      	bne.n	80022be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80022a8:	e067      	b.n	800237a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	611a      	str	r2, [r3, #16]
}
 80022bc:	e05d      	b.n	800237a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022c6:	d133      	bne.n	8002330 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b21      	cmp	r3, #33	@ 0x21
 80022d2:	d109      	bne.n	80022e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022e4:	611a      	str	r2, [r3, #16]
 80022e6:	e008      	b.n	80022fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <I2C_Master_SB+0x92>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d108      	bne.n	800231e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002310:	2b00      	cmp	r3, #0
 8002312:	d032      	beq.n	800237a <I2C_Master_SB+0x100>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d02d      	beq.n	800237a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800232c:	605a      	str	r2, [r3, #4]
}
 800232e:	e024      	b.n	800237a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10e      	bne.n	8002356 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233c:	b29b      	uxth	r3, r3
 800233e:	11db      	asrs	r3, r3, #7
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f003 0306 	and.w	r3, r3, #6
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f063 030f 	orn	r3, r3, #15
 800234c:	b2da      	uxtb	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]
}
 8002354:	e011      	b.n	800237a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10d      	bne.n	800237a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	b29b      	uxth	r3, r3
 8002364:	11db      	asrs	r3, r3, #7
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f003 0306 	and.w	r3, r3, #6
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f063 030e 	orn	r3, r3, #14
 8002372:	b2da      	uxtb	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	611a      	str	r2, [r3, #16]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	b2da      	uxtb	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <I2C_Master_ADD10+0x26>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d108      	bne.n	80023be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <I2C_Master_ADD10+0x48>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023cc:	605a      	str	r2, [r3, #4]
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80023da:	b480      	push	{r7}
 80023dc:	b091      	sub	sp, #68	@ 0x44
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b22      	cmp	r3, #34	@ 0x22
 8002402:	f040 8169 	bne.w	80026d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10f      	bne.n	800242e <I2C_Master_ADDR+0x54>
 800240e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002412:	2b40      	cmp	r3, #64	@ 0x40
 8002414:	d10b      	bne.n	800242e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	633b      	str	r3, [r7, #48]	@ 0x30
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	633b      	str	r3, [r7, #48]	@ 0x30
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	e160      	b.n	80026f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002432:	2b00      	cmp	r3, #0
 8002434:	d11d      	bne.n	8002472 <I2C_Master_ADDR+0x98>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800243e:	d118      	bne.n	8002472 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002464:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002470:	e13e      	b.n	80026f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d113      	bne.n	80024a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247c:	2300      	movs	r3, #0
 800247e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e115      	b.n	80026d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f040 808a 	bne.w	80025c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80024b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024b6:	d137      	bne.n	8002528 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024d6:	d113      	bne.n	8002500 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	e0e7      	b.n	80026d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e0d3      	b.n	80026d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252a:	2b08      	cmp	r3, #8
 800252c:	d02e      	beq.n	800258c <I2C_Master_ADDR+0x1b2>
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	2b20      	cmp	r3, #32
 8002532:	d02b      	beq.n	800258c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002536:	2b12      	cmp	r3, #18
 8002538:	d102      	bne.n	8002540 <I2C_Master_ADDR+0x166>
 800253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253c:	2b01      	cmp	r3, #1
 800253e:	d125      	bne.n	800258c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002542:	2b04      	cmp	r3, #4
 8002544:	d00e      	beq.n	8002564 <I2C_Master_ADDR+0x18a>
 8002546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002548:	2b02      	cmp	r3, #2
 800254a:	d00b      	beq.n	8002564 <I2C_Master_ADDR+0x18a>
 800254c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254e:	2b10      	cmp	r3, #16
 8002550:	d008      	beq.n	8002564 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e007      	b.n	8002574 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002572:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	e0a1      	b.n	80026d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e085      	b.n	80026d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d14d      	bne.n	800266a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d016      	beq.n	8002602 <I2C_Master_ADDR+0x228>
 80025d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d013      	beq.n	8002602 <I2C_Master_ADDR+0x228>
 80025da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d010      	beq.n	8002602 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e007      	b.n	8002612 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002610:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800261c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002620:	d117      	bne.n	8002652 <I2C_Master_ADDR+0x278>
 8002622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002624:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002628:	d00b      	beq.n	8002642 <I2C_Master_ADDR+0x268>
 800262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262c:	2b01      	cmp	r3, #1
 800262e:	d008      	beq.n	8002642 <I2C_Master_ADDR+0x268>
 8002630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002632:	2b08      	cmp	r3, #8
 8002634:	d005      	beq.n	8002642 <I2C_Master_ADDR+0x268>
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002638:	2b10      	cmp	r3, #16
 800263a:	d002      	beq.n	8002642 <I2C_Master_ADDR+0x268>
 800263c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263e:	2b20      	cmp	r3, #32
 8002640:	d107      	bne.n	8002652 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002650:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	e032      	b.n	80026d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002678:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002688:	d117      	bne.n	80026ba <I2C_Master_ADDR+0x2e0>
 800268a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002690:	d00b      	beq.n	80026aa <I2C_Master_ADDR+0x2d0>
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002694:	2b01      	cmp	r3, #1
 8002696:	d008      	beq.n	80026aa <I2C_Master_ADDR+0x2d0>
 8002698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269a:	2b08      	cmp	r3, #8
 800269c:	d005      	beq.n	80026aa <I2C_Master_ADDR+0x2d0>
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d002      	beq.n	80026aa <I2C_Master_ADDR+0x2d0>
 80026a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d107      	bne.n	80026ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80026d6:	e00b      	b.n	80026f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	e7ff      	b.n	80026f0 <I2C_Master_ADDR+0x316>
 80026f0:	bf00      	nop
 80026f2:	3744      	adds	r7, #68	@ 0x44
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02b      	beq.n	800276e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d114      	bne.n	800276e <I2C_SlaveTransmit_TXE+0x72>
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b29      	cmp	r3, #41	@ 0x29
 8002748:	d111      	bne.n	800276e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002758:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2221      	movs	r2, #33	@ 0x21
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2228      	movs	r2, #40	@ 0x28
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff f9cb 	bl	8001b04 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d011      	beq.n	80027ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02c      	beq.n	800282c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d114      	bne.n	800282c <I2C_SlaveReceive_RXNE+0x74>
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b2a      	cmp	r3, #42	@ 0x2a
 8002806:	d111      	bne.n	800282c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002816:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2222      	movs	r2, #34	@ 0x22
 800281c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2228      	movs	r2, #40	@ 0x28
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff f976 	bl	8001b18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002892:	2b28      	cmp	r3, #40	@ 0x28
 8002894:	d125      	bne.n	80028e2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	81bb      	strh	r3, [r7, #12]
 80028c4:	e002      	b.n	80028cc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80028d4:	89ba      	ldrh	r2, [r7, #12]
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff f926 	bl	8001b2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028e0:	e00e      	b.n	8002900 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002916:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002926:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002954:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002964:	d172      	bne.n	8002a4c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b22      	cmp	r3, #34	@ 0x22
 800296a:	d002      	beq.n	8002972 <I2C_Slave_STOPF+0x6a>
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002970:	d135      	bne.n	80029de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f043 0204 	orr.w	r2, r3, #4
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe faa1 	bl	8000ef2 <HAL_DMA_GetState>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d049      	beq.n	8002a4a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ba:	4a69      	ldr	r2, [pc, #420]	@ (8002b60 <I2C_Slave_STOPF+0x258>)
 80029bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fa73 	bl	8000eae <HAL_DMA_Abort_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03d      	beq.n	8002a4a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029d8:	4610      	mov	r0, r2
 80029da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029dc:	e035      	b.n	8002a4a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f043 0204 	orr.w	r2, r3, #4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fa6b 	bl	8000ef2 <HAL_DMA_GetState>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d014      	beq.n	8002a4c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a26:	4a4e      	ldr	r2, [pc, #312]	@ (8002b60 <I2C_Slave_STOPF+0x258>)
 8002a28:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fa3d 	bl	8000eae <HAL_DMA_Abort_IT>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a44:	4610      	mov	r0, r2
 8002a46:	4798      	blx	r3
 8002a48:	e000      	b.n	8002a4c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a4a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d03e      	beq.n	8002ad4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d112      	bne.n	8002a8a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a94:	2b40      	cmp	r3, #64	@ 0x40
 8002a96:	d112      	bne.n	8002abe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8b7 	bl	8002c50 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002ae2:	e039      	b.n	8002b58 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ae8:	d109      	bne.n	8002afe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2228      	movs	r2, #40	@ 0x28
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff f80d 	bl	8001b18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b28      	cmp	r3, #40	@ 0x28
 8002b08:	d111      	bne.n	8002b2e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	@ (8002b64 <I2C_Slave_STOPF+0x25c>)
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff f80e 	bl	8001b48 <HAL_I2C_ListenCpltCallback>
}
 8002b2c:	e014      	b.n	8002b58 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	2b22      	cmp	r3, #34	@ 0x22
 8002b34:	d002      	beq.n	8002b3c <I2C_Slave_STOPF+0x234>
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b22      	cmp	r3, #34	@ 0x22
 8002b3a:	d10d      	bne.n	8002b58 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe ffe0 	bl	8001b18 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	08002fb9 	.word	0x08002fb9
 8002b64:	ffff0000 	.word	0xffff0000

08002b68 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d002      	beq.n	8002b8a <I2C_Slave_AF+0x22>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d129      	bne.n	8002bde <I2C_Slave_AF+0x76>
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b28      	cmp	r3, #40	@ 0x28
 8002b8e:	d126      	bne.n	8002bde <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a2e      	ldr	r2, [pc, #184]	@ (8002c4c <I2C_Slave_AF+0xe4>)
 8002b94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ba4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe ffb6 	bl	8001b48 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002bdc:	e031      	b.n	8002c42 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b21      	cmp	r3, #33	@ 0x21
 8002be2:	d129      	bne.n	8002c38 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <I2C_Slave_AF+0xe4>)
 8002be8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2221      	movs	r2, #33	@ 0x21
 8002bee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c0e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c18:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c28:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe fc50 	bl	80014d0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe ff67 	bl	8001b04 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c36:	e004      	b.n	8002c42 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c40:	615a      	str	r2, [r3, #20]
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	ffff0000 	.word	0xffff0000

08002c50 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d002      	beq.n	8002c74 <I2C_ITError+0x24>
 8002c6e:	7bbb      	ldrb	r3, [r7, #14]
 8002c70:	2b40      	cmp	r3, #64	@ 0x40
 8002c72:	d10a      	bne.n	8002c8a <I2C_ITError+0x3a>
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b22      	cmp	r3, #34	@ 0x22
 8002c78:	d107      	bne.n	8002c8a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c88:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c90:	2b28      	cmp	r3, #40	@ 0x28
 8002c92:	d107      	bne.n	8002ca4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2228      	movs	r2, #40	@ 0x28
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002ca2:	e015      	b.n	8002cd0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cb2:	d00a      	beq.n	8002cca <I2C_ITError+0x7a>
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b60      	cmp	r3, #96	@ 0x60
 8002cb8:	d007      	beq.n	8002cca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cde:	d162      	bne.n	8002da6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d020      	beq.n	8002d40 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d02:	4a6a      	ldr	r2, [pc, #424]	@ (8002eac <I2C_ITError+0x25c>)
 8002d04:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f8cf 	bl	8000eae <HAL_DMA_Abort_IT>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8089 	beq.w	8002e2a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4798      	blx	r3
 8002d3e:	e074      	b.n	8002e2a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	4a59      	ldr	r2, [pc, #356]	@ (8002eac <I2C_ITError+0x25c>)
 8002d46:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f8ae 	bl	8000eae <HAL_DMA_Abort_IT>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d068      	beq.n	8002e2a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d62:	2b40      	cmp	r3, #64	@ 0x40
 8002d64:	d10b      	bne.n	8002d7e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002da0:	4610      	mov	r0, r2
 8002da2:	4798      	blx	r3
 8002da4:	e041      	b.n	8002e2a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b60      	cmp	r3, #96	@ 0x60
 8002db0:	d125      	bne.n	8002dfe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dca:	2b40      	cmp	r3, #64	@ 0x40
 8002dcc:	d10b      	bne.n	8002de6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fece 	bl	8001b98 <HAL_I2C_AbortCpltCallback>
 8002dfc:	e015      	b.n	8002e2a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e08:	2b40      	cmp	r3, #64	@ 0x40
 8002e0a:	d10b      	bne.n	8002e24 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7fe fead 	bl	8001b84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10e      	bne.n	8002e58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d113      	bne.n	8002ea4 <I2C_ITError+0x254>
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b28      	cmp	r3, #40	@ 0x28
 8002e80:	d110      	bne.n	8002ea4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <I2C_ITError+0x260>)
 8002e86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe fe52 	bl	8001b48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	08002fb9 	.word	0x08002fb9
 8002eb0:	ffff0000 	.word	0xffff0000

08002eb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d006      	beq.n	8002ede <I2C_MasterRequestWrite+0x2a>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d003      	beq.n	8002ede <I2C_MasterRequestWrite+0x2a>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002edc:	d108      	bne.n	8002ef0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e00b      	b.n	8002f08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	2b12      	cmp	r3, #18
 8002ef6:	d107      	bne.n	8002f08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f8f7 	bl	8003108 <I2C_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00d      	beq.n	8002f3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2e:	d103      	bne.n	8002f38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e035      	b.n	8002fa8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f44:	d108      	bne.n	8002f58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f54:	611a      	str	r2, [r3, #16]
 8002f56:	e01b      	b.n	8002f90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	11db      	asrs	r3, r3, #7
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0306 	and.w	r3, r3, #6
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f063 030f 	orn	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	490e      	ldr	r1, [pc, #56]	@ (8002fb0 <I2C_MasterRequestWrite+0xfc>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f940 	bl	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e010      	b.n	8002fa8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f86:	897b      	ldrh	r3, [r7, #10]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4907      	ldr	r1, [pc, #28]	@ (8002fb4 <I2C_MasterRequestWrite+0x100>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f930 	bl	80031fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	00010008 	.word	0x00010008
 8002fb4:	00010002 	.word	0x00010002

08002fb8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8003100 <I2C_DMAAbort+0x148>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8003104 <I2C_DMAAbort+0x14c>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0a1a      	lsrs	r2, r3, #8
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00da      	lsls	r2, r3, #3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002ffe:	e00a      	b.n	8003016 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3b01      	subs	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003014:	d0ea      	beq.n	8002fec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003022:	2200      	movs	r2, #0
 8003024:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	2200      	movs	r2, #0
 8003034:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003044:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	2200      	movs	r2, #0
 800305a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	2200      	movs	r2, #0
 800306a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b60      	cmp	r3, #96	@ 0x60
 8003086:	d10e      	bne.n	80030a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800309e:	6978      	ldr	r0, [r7, #20]
 80030a0:	f7fe fd7a 	bl	8001b98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030a4:	e027      	b.n	80030f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030ac:	2b28      	cmp	r3, #40	@ 0x28
 80030ae:	d117      	bne.n	80030e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2228      	movs	r2, #40	@ 0x28
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80030de:	e007      	b.n	80030f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80030f0:	6978      	ldr	r0, [r7, #20]
 80030f2:	f7fe fd47 	bl	8001b84 <HAL_I2C_ErrorCallback>
}
 80030f6:	bf00      	nop
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000000 	.word	0x20000000
 8003104:	14f8b589 	.word	0x14f8b589

08003108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003118:	e048      	b.n	80031ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003120:	d044      	beq.n	80031ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fd fd83 	bl	8000c2c <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d139      	bne.n	80031ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10d      	bne.n	800315e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	43da      	mvns	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4013      	ands	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	e00c      	b.n	8003178 <I2C_WaitOnFlagUntilTimeout+0x70>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	43da      	mvns	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4013      	ands	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	429a      	cmp	r2, r3
 800317c:	d116      	bne.n	80031ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e023      	b.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	0c1b      	lsrs	r3, r3, #16
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d10d      	bne.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	e00c      	b.n	80031ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	43da      	mvns	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d093      	beq.n	800311a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800320a:	e071      	b.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321a:	d123      	bne.n	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003234:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f043 0204 	orr.w	r2, r3, #4
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e067      	b.n	8003334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800326a:	d041      	beq.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7fd fcde 	bl	8000c2c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d136      	bne.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d10c      	bne.n	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e00b      	b.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e021      	b.n	8003334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	0c1b      	lsrs	r3, r3, #16
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10c      	bne.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	43da      	mvns	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e00b      	b.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	f47f af6d 	bne.w	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003348:	e034      	b.n	80033b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f8b8 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e034      	b.n	80033c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003360:	d028      	beq.n	80033b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003362:	f7fd fc63 	bl	8000c2c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	d302      	bcc.n	8003378 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11d      	bne.n	80033b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003382:	2b80      	cmp	r3, #128	@ 0x80
 8003384:	d016      	beq.n	80033b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033be:	2b80      	cmp	r3, #128	@ 0x80
 80033c0:	d1c3      	bne.n	800334a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d8:	e034      	b.n	8003444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f870 	bl	80034c0 <I2C_IsAcknowledgeFailed>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e034      	b.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033f0:	d028      	beq.n	8003444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fd fc1b 	bl	8000c2c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11d      	bne.n	8003444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d016      	beq.n	8003444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b04      	cmp	r3, #4
 8003450:	d1c3      	bne.n	80033da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003468:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	0a1a      	lsrs	r2, r3, #8
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3b01      	subs	r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d107      	bne.n	800349a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e008      	b.n	80034ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a8:	d0e9      	beq.n	800347e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	20000000 	.word	0x20000000
 80034bc:	14f8b589 	.word	0x14f8b589

080034c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d6:	d11b      	bne.n	8003510 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800352e:	d103      	bne.n	8003538 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003536:	e007      	b.n	8003548 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003540:	d102      	bne.n	8003548 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2208      	movs	r2, #8
 8003546:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e267      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d075      	beq.n	800365e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003572:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d00c      	beq.n	8003598 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357e:	4b85      	ldr	r3, [pc, #532]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003586:	2b08      	cmp	r3, #8
 8003588:	d112      	bne.n	80035b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358a:	4b82      	ldr	r3, [pc, #520]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003596:	d10b      	bne.n	80035b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	4b7e      	ldr	r3, [pc, #504]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d05b      	beq.n	800365c <HAL_RCC_OscConfig+0x108>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d157      	bne.n	800365c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e242      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b8:	d106      	bne.n	80035c8 <HAL_RCC_OscConfig+0x74>
 80035ba:	4b76      	ldr	r3, [pc, #472]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a75      	ldr	r2, [pc, #468]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xb0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x98>
 80035d2:	4b70      	ldr	r3, [pc, #448]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b6d      	ldr	r3, [pc, #436]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6c      	ldr	r2, [pc, #432]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xb0>
 80035ec:	4b69      	ldr	r3, [pc, #420]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a68      	ldr	r2, [pc, #416]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b66      	ldr	r3, [pc, #408]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a65      	ldr	r2, [pc, #404]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd fb0e 	bl	8000c2c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd fb0a 	bl	8000c2c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e207      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b5b      	ldr	r3, [pc, #364]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xc0>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fafa 	bl	8000c2c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd faf6 	bl	8000c2c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1f3      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b51      	ldr	r3, [pc, #324]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0xe8>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d063      	beq.n	8003732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366a:	4b4a      	ldr	r3, [pc, #296]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b47      	ldr	r3, [pc, #284]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003682:	4b44      	ldr	r3, [pc, #272]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b41      	ldr	r3, [pc, #260]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x152>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1c7      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4937      	ldr	r1, [pc, #220]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e03a      	b.n	8003732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <HAL_RCC_OscConfig+0x244>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fd faaf 	bl	8000c2c <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d2:	f7fd faab 	bl	8000c2c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e1a8      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4925      	ldr	r1, [pc, #148]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b24      	ldr	r3, [pc, #144]	@ (8003798 <HAL_RCC_OscConfig+0x244>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd fa8e 	bl	8000c2c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003714:	f7fd fa8a 	bl	8000c2c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e187      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d036      	beq.n	80037ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b15      	ldr	r3, [pc, #84]	@ (800379c <HAL_RCC_OscConfig+0x248>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd fa6e 	bl	8000c2c <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd fa6a 	bl	8000c2c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e167      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <HAL_RCC_OscConfig+0x240>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x200>
 8003772:	e01b      	b.n	80037ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003774:	4b09      	ldr	r3, [pc, #36]	@ (800379c <HAL_RCC_OscConfig+0x248>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377a:	f7fd fa57 	bl	8000c2c <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	e00e      	b.n	80037a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003782:	f7fd fa53 	bl	8000c2c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d907      	bls.n	80037a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e150      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
 8003794:	40023800 	.word	0x40023800
 8003798:	42470000 	.word	0x42470000
 800379c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b88      	ldr	r3, [pc, #544]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ea      	bne.n	8003782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8097 	beq.w	80038e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b81      	ldr	r3, [pc, #516]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	4b7d      	ldr	r3, [pc, #500]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	4a7c      	ldr	r2, [pc, #496]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037da:	4b7a      	ldr	r3, [pc, #488]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e6:	2301      	movs	r3, #1
 80037e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b77      	ldr	r3, [pc, #476]	@ (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d118      	bne.n	8003828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4b74      	ldr	r3, [pc, #464]	@ (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	@ (80039c8 <HAL_RCC_OscConfig+0x474>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fd fa13 	bl	8000c2c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fd fa0f 	bl	8000c2c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e10c      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b6a      	ldr	r3, [pc, #424]	@ (80039c8 <HAL_RCC_OscConfig+0x474>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x2ea>
 8003830:	4b64      	ldr	r3, [pc, #400]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003834:	4a63      	ldr	r2, [pc, #396]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6713      	str	r3, [r2, #112]	@ 0x70
 800383c:	e01c      	b.n	8003878 <HAL_RCC_OscConfig+0x324>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x30c>
 8003846:	4b5f      	ldr	r3, [pc, #380]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	4a5e      	ldr	r2, [pc, #376]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	@ 0x70
 8003852:	4b5c      	ldr	r3, [pc, #368]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	4a5b      	ldr	r2, [pc, #364]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6713      	str	r3, [r2, #112]	@ 0x70
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0x324>
 8003860:	4b58      	ldr	r3, [pc, #352]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003864:	4a57      	ldr	r2, [pc, #348]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	@ 0x70
 800386c:	4b55      	ldr	r3, [pc, #340]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003870:	4a54      	ldr	r2, [pc, #336]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003872:	f023 0304 	bic.w	r3, r3, #4
 8003876:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fd f9d4 	bl	8000c2c <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fd f9d0 	bl	8000c2c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0cb      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389e:	4b49      	ldr	r3, [pc, #292]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0ee      	beq.n	8003888 <HAL_RCC_OscConfig+0x334>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7fd f9be 	bl	8000c2c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd f9ba 	bl	8000c2c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0b5      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ca:	4b3e      	ldr	r3, [pc, #248]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ee      	bne.n	80038b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038dc:	4b39      	ldr	r3, [pc, #228]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	4a38      	ldr	r2, [pc, #224]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a1 	beq.w	8003a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f2:	4b34      	ldr	r3, [pc, #208]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d05c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d141      	bne.n	800398a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	4b31      	ldr	r3, [pc, #196]	@ (80039cc <HAL_RCC_OscConfig+0x478>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fd f98e 	bl	8000c2c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd f98a 	bl	8000c2c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e087      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	3b01      	subs	r3, #1
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	491b      	ldr	r1, [pc, #108]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800395c:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x478>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fd f963 	bl	8000c2c <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396a:	f7fd f95f 	bl	8000c2c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e05c      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397c:	4b11      	ldr	r3, [pc, #68]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x416>
 8003988:	e054      	b.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b10      	ldr	r3, [pc, #64]	@ (80039cc <HAL_RCC_OscConfig+0x478>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fd f94c 	bl	8000c2c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd f948 	bl	8000c2c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e045      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <HAL_RCC_OscConfig+0x470>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x444>
 80039b6:	e03d      	b.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e038      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40007000 	.word	0x40007000
 80039cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <HAL_RCC_OscConfig+0x4ec>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d028      	beq.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d121      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d11a      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d111      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800

08003a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0cc      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b68      	ldr	r3, [pc, #416]	@ (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d90c      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b65      	ldr	r3, [pc, #404]	@ (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b63      	ldr	r3, [pc, #396]	@ (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0b8      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a98:	4b59      	ldr	r3, [pc, #356]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a58      	ldr	r2, [pc, #352]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab0:	4b53      	ldr	r3, [pc, #332]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b50      	ldr	r3, [pc, #320]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	494d      	ldr	r1, [pc, #308]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d044      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d119      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e07f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	4b3f      	ldr	r3, [pc, #252]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	4b3b      	ldr	r3, [pc, #236]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e067      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b22:	4b37      	ldr	r3, [pc, #220]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4934      	ldr	r1, [pc, #208]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fd f87a 	bl	8000c2c <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fd f876 	bl	8000c2c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e04f      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	4b2b      	ldr	r3, [pc, #172]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 020c 	and.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1eb      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b25      	ldr	r3, [pc, #148]	@ (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d20c      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e032      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4916      	ldr	r1, [pc, #88]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb6:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	490e      	ldr	r1, [pc, #56]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bca:	f000 f821 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490a      	ldr	r1, [pc, #40]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	4a09      	ldr	r2, [pc, #36]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fc ffda 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023c00 	.word	0x40023c00
 8003c00:	40023800 	.word	0x40023800
 8003c04:	080047c0 	.word	0x080047c0
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	20000004 	.word	0x20000004

08003c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b094      	sub	sp, #80	@ 0x50
 8003c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c20:	2300      	movs	r3, #0
 8003c22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c28:	4b79      	ldr	r3, [pc, #484]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d00d      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x40>
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	f200 80e1 	bhi.w	8003dfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x34>
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d003      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c42:	e0db      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b73      	ldr	r3, [pc, #460]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c46:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c48:	e0db      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c4a:	4b73      	ldr	r3, [pc, #460]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c4e:	e0d8      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c50:	4b6f      	ldr	r3, [pc, #444]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c58:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d063      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c66:	4b6a      	ldr	r3, [pc, #424]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	099b      	lsrs	r3, r3, #6
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c82:	4622      	mov	r2, r4
 8003c84:	462b      	mov	r3, r5
 8003c86:	f04f 0000 	mov.w	r0, #0
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	0159      	lsls	r1, r3, #5
 8003c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c94:	0150      	lsls	r0, r2, #5
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	1a51      	subs	r1, r2, r1
 8003c9e:	6139      	str	r1, [r7, #16]
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	018b      	lsls	r3, r1, #6
 8003cb8:	4651      	mov	r1, sl
 8003cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	018a      	lsls	r2, r1, #6
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	ebb2 0801 	subs.w	r8, r2, r1
 8003cc8:	4659      	mov	r1, fp
 8003cca:	eb63 0901 	sbc.w	r9, r3, r1
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce2:	4690      	mov	r8, r2
 8003ce4:	4699      	mov	r9, r3
 8003ce6:	4623      	mov	r3, r4
 8003ce8:	eb18 0303 	adds.w	r3, r8, r3
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	462b      	mov	r3, r5
 8003cf0:	eb49 0303 	adc.w	r3, r9, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d02:	4629      	mov	r1, r5
 8003d04:	024b      	lsls	r3, r1, #9
 8003d06:	4621      	mov	r1, r4
 8003d08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	024a      	lsls	r2, r1, #9
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d16:	2200      	movs	r2, #0
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d20:	f7fc faa6 	bl	8000270 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d2c:	e058      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b38      	ldr	r3, [pc, #224]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	2200      	movs	r2, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	4611      	mov	r1, r2
 8003d3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	f04f 0000 	mov.w	r0, #0
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	0159      	lsls	r1, r3, #5
 8003d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5a:	0150      	lsls	r0, r2, #5
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4641      	mov	r1, r8
 8003d62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d66:	4649      	mov	r1, r9
 8003d68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d80:	ebb2 040a 	subs.w	r4, r2, sl
 8003d84:	eb63 050b 	sbc.w	r5, r3, fp
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	00eb      	lsls	r3, r5, #3
 8003d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d96:	00e2      	lsls	r2, r4, #3
 8003d98:	4614      	mov	r4, r2
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	18e3      	adds	r3, r4, r3
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	464b      	mov	r3, r9
 8003da4:	eb45 0303 	adc.w	r3, r5, r3
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db6:	4629      	mov	r1, r5
 8003db8:	028b      	lsls	r3, r1, #10
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	028a      	lsls	r2, r1, #10
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	61fa      	str	r2, [r7, #28]
 8003dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd4:	f7fc fa4c 	bl	8000270 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	3301      	adds	r3, #1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003df0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dfa:	e002      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3750      	adds	r7, #80	@ 0x50
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	@ (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000000 	.word	0x20000000

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e38:	f7ff fff0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a9b      	lsrs	r3, r3, #10
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	@ (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	080047d0 	.word	0x080047d0

08003e5c <siprintf>:
 8003e5c:	b40e      	push	{r1, r2, r3}
 8003e5e:	b500      	push	{lr}
 8003e60:	b09c      	sub	sp, #112	@ 0x70
 8003e62:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e64:	9002      	str	r0, [sp, #8]
 8003e66:	9006      	str	r0, [sp, #24]
 8003e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e6c:	4809      	ldr	r0, [pc, #36]	@ (8003e94 <siprintf+0x38>)
 8003e6e:	9107      	str	r1, [sp, #28]
 8003e70:	9104      	str	r1, [sp, #16]
 8003e72:	4909      	ldr	r1, [pc, #36]	@ (8003e98 <siprintf+0x3c>)
 8003e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e78:	9105      	str	r1, [sp, #20]
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	a902      	add	r1, sp, #8
 8003e80:	f000 f994 	bl	80041ac <_svfiprintf_r>
 8003e84:	9b02      	ldr	r3, [sp, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	b01c      	add	sp, #112	@ 0x70
 8003e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e90:	b003      	add	sp, #12
 8003e92:	4770      	bx	lr
 8003e94:	2000000c 	.word	0x2000000c
 8003e98:	ffff0208 	.word	0xffff0208

08003e9c <memset>:
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <__errno>:
 8003eac:	4b01      	ldr	r3, [pc, #4]	@ (8003eb4 <__errno+0x8>)
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	2000000c 	.word	0x2000000c

08003eb8 <__libc_init_array>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef0 <__libc_init_array+0x38>)
 8003ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef4 <__libc_init_array+0x3c>)
 8003ebe:	1b64      	subs	r4, r4, r5
 8003ec0:	10a4      	asrs	r4, r4, #2
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	42a6      	cmp	r6, r4
 8003ec6:	d109      	bne.n	8003edc <__libc_init_array+0x24>
 8003ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ef8 <__libc_init_array+0x40>)
 8003eca:	4c0c      	ldr	r4, [pc, #48]	@ (8003efc <__libc_init_array+0x44>)
 8003ecc:	f000 fc66 	bl	800479c <_init>
 8003ed0:	1b64      	subs	r4, r4, r5
 8003ed2:	10a4      	asrs	r4, r4, #2
 8003ed4:	2600      	movs	r6, #0
 8003ed6:	42a6      	cmp	r6, r4
 8003ed8:	d105      	bne.n	8003ee6 <__libc_init_array+0x2e>
 8003eda:	bd70      	pop	{r4, r5, r6, pc}
 8003edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee0:	4798      	blx	r3
 8003ee2:	3601      	adds	r6, #1
 8003ee4:	e7ee      	b.n	8003ec4 <__libc_init_array+0xc>
 8003ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eea:	4798      	blx	r3
 8003eec:	3601      	adds	r6, #1
 8003eee:	e7f2      	b.n	8003ed6 <__libc_init_array+0x1e>
 8003ef0:	08004814 	.word	0x08004814
 8003ef4:	08004814 	.word	0x08004814
 8003ef8:	08004814 	.word	0x08004814
 8003efc:	08004818 	.word	0x08004818

08003f00 <__retarget_lock_acquire_recursive>:
 8003f00:	4770      	bx	lr

08003f02 <__retarget_lock_release_recursive>:
 8003f02:	4770      	bx	lr

08003f04 <_free_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4605      	mov	r5, r0
 8003f08:	2900      	cmp	r1, #0
 8003f0a:	d041      	beq.n	8003f90 <_free_r+0x8c>
 8003f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f10:	1f0c      	subs	r4, r1, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bfb8      	it	lt
 8003f16:	18e4      	addlt	r4, r4, r3
 8003f18:	f000 f8e0 	bl	80040dc <__malloc_lock>
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f94 <_free_r+0x90>)
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	b933      	cbnz	r3, 8003f30 <_free_r+0x2c>
 8003f22:	6063      	str	r3, [r4, #4]
 8003f24:	6014      	str	r4, [r2, #0]
 8003f26:	4628      	mov	r0, r5
 8003f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f2c:	f000 b8dc 	b.w	80040e8 <__malloc_unlock>
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	d908      	bls.n	8003f46 <_free_r+0x42>
 8003f34:	6820      	ldr	r0, [r4, #0]
 8003f36:	1821      	adds	r1, r4, r0
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	bf01      	itttt	eq
 8003f3c:	6819      	ldreq	r1, [r3, #0]
 8003f3e:	685b      	ldreq	r3, [r3, #4]
 8003f40:	1809      	addeq	r1, r1, r0
 8003f42:	6021      	streq	r1, [r4, #0]
 8003f44:	e7ed      	b.n	8003f22 <_free_r+0x1e>
 8003f46:	461a      	mov	r2, r3
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b10b      	cbz	r3, 8003f50 <_free_r+0x4c>
 8003f4c:	42a3      	cmp	r3, r4
 8003f4e:	d9fa      	bls.n	8003f46 <_free_r+0x42>
 8003f50:	6811      	ldr	r1, [r2, #0]
 8003f52:	1850      	adds	r0, r2, r1
 8003f54:	42a0      	cmp	r0, r4
 8003f56:	d10b      	bne.n	8003f70 <_free_r+0x6c>
 8003f58:	6820      	ldr	r0, [r4, #0]
 8003f5a:	4401      	add	r1, r0
 8003f5c:	1850      	adds	r0, r2, r1
 8003f5e:	4283      	cmp	r3, r0
 8003f60:	6011      	str	r1, [r2, #0]
 8003f62:	d1e0      	bne.n	8003f26 <_free_r+0x22>
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	6053      	str	r3, [r2, #4]
 8003f6a:	4408      	add	r0, r1
 8003f6c:	6010      	str	r0, [r2, #0]
 8003f6e:	e7da      	b.n	8003f26 <_free_r+0x22>
 8003f70:	d902      	bls.n	8003f78 <_free_r+0x74>
 8003f72:	230c      	movs	r3, #12
 8003f74:	602b      	str	r3, [r5, #0]
 8003f76:	e7d6      	b.n	8003f26 <_free_r+0x22>
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	1821      	adds	r1, r4, r0
 8003f7c:	428b      	cmp	r3, r1
 8003f7e:	bf04      	itt	eq
 8003f80:	6819      	ldreq	r1, [r3, #0]
 8003f82:	685b      	ldreq	r3, [r3, #4]
 8003f84:	6063      	str	r3, [r4, #4]
 8003f86:	bf04      	itt	eq
 8003f88:	1809      	addeq	r1, r1, r0
 8003f8a:	6021      	streq	r1, [r4, #0]
 8003f8c:	6054      	str	r4, [r2, #4]
 8003f8e:	e7ca      	b.n	8003f26 <_free_r+0x22>
 8003f90:	bd38      	pop	{r3, r4, r5, pc}
 8003f92:	bf00      	nop
 8003f94:	20000220 	.word	0x20000220

08003f98 <sbrk_aligned>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003fd8 <sbrk_aligned+0x40>)
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	6831      	ldr	r1, [r6, #0]
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	b911      	cbnz	r1, 8003faa <sbrk_aligned+0x12>
 8003fa4:	f000 fba6 	bl	80046f4 <_sbrk_r>
 8003fa8:	6030      	str	r0, [r6, #0]
 8003faa:	4621      	mov	r1, r4
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 fba1 	bl	80046f4 <_sbrk_r>
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	d103      	bne.n	8003fbe <sbrk_aligned+0x26>
 8003fb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003fba:	4620      	mov	r0, r4
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	1cc4      	adds	r4, r0, #3
 8003fc0:	f024 0403 	bic.w	r4, r4, #3
 8003fc4:	42a0      	cmp	r0, r4
 8003fc6:	d0f8      	beq.n	8003fba <sbrk_aligned+0x22>
 8003fc8:	1a21      	subs	r1, r4, r0
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 fb92 	bl	80046f4 <_sbrk_r>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d1f2      	bne.n	8003fba <sbrk_aligned+0x22>
 8003fd4:	e7ef      	b.n	8003fb6 <sbrk_aligned+0x1e>
 8003fd6:	bf00      	nop
 8003fd8:	2000021c 	.word	0x2000021c

08003fdc <_malloc_r>:
 8003fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe0:	1ccd      	adds	r5, r1, #3
 8003fe2:	f025 0503 	bic.w	r5, r5, #3
 8003fe6:	3508      	adds	r5, #8
 8003fe8:	2d0c      	cmp	r5, #12
 8003fea:	bf38      	it	cc
 8003fec:	250c      	movcc	r5, #12
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	db01      	blt.n	8003ff8 <_malloc_r+0x1c>
 8003ff4:	42a9      	cmp	r1, r5
 8003ff6:	d904      	bls.n	8004002 <_malloc_r+0x26>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	6033      	str	r3, [r6, #0]
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040d8 <_malloc_r+0xfc>
 8004006:	f000 f869 	bl	80040dc <__malloc_lock>
 800400a:	f8d8 3000 	ldr.w	r3, [r8]
 800400e:	461c      	mov	r4, r3
 8004010:	bb44      	cbnz	r4, 8004064 <_malloc_r+0x88>
 8004012:	4629      	mov	r1, r5
 8004014:	4630      	mov	r0, r6
 8004016:	f7ff ffbf 	bl	8003f98 <sbrk_aligned>
 800401a:	1c43      	adds	r3, r0, #1
 800401c:	4604      	mov	r4, r0
 800401e:	d158      	bne.n	80040d2 <_malloc_r+0xf6>
 8004020:	f8d8 4000 	ldr.w	r4, [r8]
 8004024:	4627      	mov	r7, r4
 8004026:	2f00      	cmp	r7, #0
 8004028:	d143      	bne.n	80040b2 <_malloc_r+0xd6>
 800402a:	2c00      	cmp	r4, #0
 800402c:	d04b      	beq.n	80040c6 <_malloc_r+0xea>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	4639      	mov	r1, r7
 8004032:	4630      	mov	r0, r6
 8004034:	eb04 0903 	add.w	r9, r4, r3
 8004038:	f000 fb5c 	bl	80046f4 <_sbrk_r>
 800403c:	4581      	cmp	r9, r0
 800403e:	d142      	bne.n	80040c6 <_malloc_r+0xea>
 8004040:	6821      	ldr	r1, [r4, #0]
 8004042:	1a6d      	subs	r5, r5, r1
 8004044:	4629      	mov	r1, r5
 8004046:	4630      	mov	r0, r6
 8004048:	f7ff ffa6 	bl	8003f98 <sbrk_aligned>
 800404c:	3001      	adds	r0, #1
 800404e:	d03a      	beq.n	80040c6 <_malloc_r+0xea>
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	442b      	add	r3, r5
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	f8d8 3000 	ldr.w	r3, [r8]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	bb62      	cbnz	r2, 80040b8 <_malloc_r+0xdc>
 800405e:	f8c8 7000 	str.w	r7, [r8]
 8004062:	e00f      	b.n	8004084 <_malloc_r+0xa8>
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	1b52      	subs	r2, r2, r5
 8004068:	d420      	bmi.n	80040ac <_malloc_r+0xd0>
 800406a:	2a0b      	cmp	r2, #11
 800406c:	d917      	bls.n	800409e <_malloc_r+0xc2>
 800406e:	1961      	adds	r1, r4, r5
 8004070:	42a3      	cmp	r3, r4
 8004072:	6025      	str	r5, [r4, #0]
 8004074:	bf18      	it	ne
 8004076:	6059      	strne	r1, [r3, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	bf08      	it	eq
 800407c:	f8c8 1000 	streq.w	r1, [r8]
 8004080:	5162      	str	r2, [r4, r5]
 8004082:	604b      	str	r3, [r1, #4]
 8004084:	4630      	mov	r0, r6
 8004086:	f000 f82f 	bl	80040e8 <__malloc_unlock>
 800408a:	f104 000b 	add.w	r0, r4, #11
 800408e:	1d23      	adds	r3, r4, #4
 8004090:	f020 0007 	bic.w	r0, r0, #7
 8004094:	1ac2      	subs	r2, r0, r3
 8004096:	bf1c      	itt	ne
 8004098:	1a1b      	subne	r3, r3, r0
 800409a:	50a3      	strne	r3, [r4, r2]
 800409c:	e7af      	b.n	8003ffe <_malloc_r+0x22>
 800409e:	6862      	ldr	r2, [r4, #4]
 80040a0:	42a3      	cmp	r3, r4
 80040a2:	bf0c      	ite	eq
 80040a4:	f8c8 2000 	streq.w	r2, [r8]
 80040a8:	605a      	strne	r2, [r3, #4]
 80040aa:	e7eb      	b.n	8004084 <_malloc_r+0xa8>
 80040ac:	4623      	mov	r3, r4
 80040ae:	6864      	ldr	r4, [r4, #4]
 80040b0:	e7ae      	b.n	8004010 <_malloc_r+0x34>
 80040b2:	463c      	mov	r4, r7
 80040b4:	687f      	ldr	r7, [r7, #4]
 80040b6:	e7b6      	b.n	8004026 <_malloc_r+0x4a>
 80040b8:	461a      	mov	r2, r3
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	42a3      	cmp	r3, r4
 80040be:	d1fb      	bne.n	80040b8 <_malloc_r+0xdc>
 80040c0:	2300      	movs	r3, #0
 80040c2:	6053      	str	r3, [r2, #4]
 80040c4:	e7de      	b.n	8004084 <_malloc_r+0xa8>
 80040c6:	230c      	movs	r3, #12
 80040c8:	6033      	str	r3, [r6, #0]
 80040ca:	4630      	mov	r0, r6
 80040cc:	f000 f80c 	bl	80040e8 <__malloc_unlock>
 80040d0:	e794      	b.n	8003ffc <_malloc_r+0x20>
 80040d2:	6005      	str	r5, [r0, #0]
 80040d4:	e7d6      	b.n	8004084 <_malloc_r+0xa8>
 80040d6:	bf00      	nop
 80040d8:	20000220 	.word	0x20000220

080040dc <__malloc_lock>:
 80040dc:	4801      	ldr	r0, [pc, #4]	@ (80040e4 <__malloc_lock+0x8>)
 80040de:	f7ff bf0f 	b.w	8003f00 <__retarget_lock_acquire_recursive>
 80040e2:	bf00      	nop
 80040e4:	20000218 	.word	0x20000218

080040e8 <__malloc_unlock>:
 80040e8:	4801      	ldr	r0, [pc, #4]	@ (80040f0 <__malloc_unlock+0x8>)
 80040ea:	f7ff bf0a 	b.w	8003f02 <__retarget_lock_release_recursive>
 80040ee:	bf00      	nop
 80040f0:	20000218 	.word	0x20000218

080040f4 <__ssputs_r>:
 80040f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	688e      	ldr	r6, [r1, #8]
 80040fa:	461f      	mov	r7, r3
 80040fc:	42be      	cmp	r6, r7
 80040fe:	680b      	ldr	r3, [r1, #0]
 8004100:	4682      	mov	sl, r0
 8004102:	460c      	mov	r4, r1
 8004104:	4690      	mov	r8, r2
 8004106:	d82d      	bhi.n	8004164 <__ssputs_r+0x70>
 8004108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800410c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004110:	d026      	beq.n	8004160 <__ssputs_r+0x6c>
 8004112:	6965      	ldr	r5, [r4, #20]
 8004114:	6909      	ldr	r1, [r1, #16]
 8004116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800411a:	eba3 0901 	sub.w	r9, r3, r1
 800411e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004122:	1c7b      	adds	r3, r7, #1
 8004124:	444b      	add	r3, r9
 8004126:	106d      	asrs	r5, r5, #1
 8004128:	429d      	cmp	r5, r3
 800412a:	bf38      	it	cc
 800412c:	461d      	movcc	r5, r3
 800412e:	0553      	lsls	r3, r2, #21
 8004130:	d527      	bpl.n	8004182 <__ssputs_r+0x8e>
 8004132:	4629      	mov	r1, r5
 8004134:	f7ff ff52 	bl	8003fdc <_malloc_r>
 8004138:	4606      	mov	r6, r0
 800413a:	b360      	cbz	r0, 8004196 <__ssputs_r+0xa2>
 800413c:	6921      	ldr	r1, [r4, #16]
 800413e:	464a      	mov	r2, r9
 8004140:	f000 fae8 	bl	8004714 <memcpy>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800414a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	6126      	str	r6, [r4, #16]
 8004152:	6165      	str	r5, [r4, #20]
 8004154:	444e      	add	r6, r9
 8004156:	eba5 0509 	sub.w	r5, r5, r9
 800415a:	6026      	str	r6, [r4, #0]
 800415c:	60a5      	str	r5, [r4, #8]
 800415e:	463e      	mov	r6, r7
 8004160:	42be      	cmp	r6, r7
 8004162:	d900      	bls.n	8004166 <__ssputs_r+0x72>
 8004164:	463e      	mov	r6, r7
 8004166:	6820      	ldr	r0, [r4, #0]
 8004168:	4632      	mov	r2, r6
 800416a:	4641      	mov	r1, r8
 800416c:	f000 faa8 	bl	80046c0 <memmove>
 8004170:	68a3      	ldr	r3, [r4, #8]
 8004172:	1b9b      	subs	r3, r3, r6
 8004174:	60a3      	str	r3, [r4, #8]
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	4433      	add	r3, r6
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	2000      	movs	r0, #0
 800417e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004182:	462a      	mov	r2, r5
 8004184:	f000 fad4 	bl	8004730 <_realloc_r>
 8004188:	4606      	mov	r6, r0
 800418a:	2800      	cmp	r0, #0
 800418c:	d1e0      	bne.n	8004150 <__ssputs_r+0x5c>
 800418e:	6921      	ldr	r1, [r4, #16]
 8004190:	4650      	mov	r0, sl
 8004192:	f7ff feb7 	bl	8003f04 <_free_r>
 8004196:	230c      	movs	r3, #12
 8004198:	f8ca 3000 	str.w	r3, [sl]
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041a8:	e7e9      	b.n	800417e <__ssputs_r+0x8a>
	...

080041ac <_svfiprintf_r>:
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	4698      	mov	r8, r3
 80041b2:	898b      	ldrh	r3, [r1, #12]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	b09d      	sub	sp, #116	@ 0x74
 80041b8:	4607      	mov	r7, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	4614      	mov	r4, r2
 80041be:	d510      	bpl.n	80041e2 <_svfiprintf_r+0x36>
 80041c0:	690b      	ldr	r3, [r1, #16]
 80041c2:	b973      	cbnz	r3, 80041e2 <_svfiprintf_r+0x36>
 80041c4:	2140      	movs	r1, #64	@ 0x40
 80041c6:	f7ff ff09 	bl	8003fdc <_malloc_r>
 80041ca:	6028      	str	r0, [r5, #0]
 80041cc:	6128      	str	r0, [r5, #16]
 80041ce:	b930      	cbnz	r0, 80041de <_svfiprintf_r+0x32>
 80041d0:	230c      	movs	r3, #12
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041d8:	b01d      	add	sp, #116	@ 0x74
 80041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041de:	2340      	movs	r3, #64	@ 0x40
 80041e0:	616b      	str	r3, [r5, #20]
 80041e2:	2300      	movs	r3, #0
 80041e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e6:	2320      	movs	r3, #32
 80041e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80041f0:	2330      	movs	r3, #48	@ 0x30
 80041f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004390 <_svfiprintf_r+0x1e4>
 80041f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041fa:	f04f 0901 	mov.w	r9, #1
 80041fe:	4623      	mov	r3, r4
 8004200:	469a      	mov	sl, r3
 8004202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004206:	b10a      	cbz	r2, 800420c <_svfiprintf_r+0x60>
 8004208:	2a25      	cmp	r2, #37	@ 0x25
 800420a:	d1f9      	bne.n	8004200 <_svfiprintf_r+0x54>
 800420c:	ebba 0b04 	subs.w	fp, sl, r4
 8004210:	d00b      	beq.n	800422a <_svfiprintf_r+0x7e>
 8004212:	465b      	mov	r3, fp
 8004214:	4622      	mov	r2, r4
 8004216:	4629      	mov	r1, r5
 8004218:	4638      	mov	r0, r7
 800421a:	f7ff ff6b 	bl	80040f4 <__ssputs_r>
 800421e:	3001      	adds	r0, #1
 8004220:	f000 80a7 	beq.w	8004372 <_svfiprintf_r+0x1c6>
 8004224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004226:	445a      	add	r2, fp
 8004228:	9209      	str	r2, [sp, #36]	@ 0x24
 800422a:	f89a 3000 	ldrb.w	r3, [sl]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 809f 	beq.w	8004372 <_svfiprintf_r+0x1c6>
 8004234:	2300      	movs	r3, #0
 8004236:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800423a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800423e:	f10a 0a01 	add.w	sl, sl, #1
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	9307      	str	r3, [sp, #28]
 8004246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800424a:	931a      	str	r3, [sp, #104]	@ 0x68
 800424c:	4654      	mov	r4, sl
 800424e:	2205      	movs	r2, #5
 8004250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004254:	484e      	ldr	r0, [pc, #312]	@ (8004390 <_svfiprintf_r+0x1e4>)
 8004256:	f7fb ffbb 	bl	80001d0 <memchr>
 800425a:	9a04      	ldr	r2, [sp, #16]
 800425c:	b9d8      	cbnz	r0, 8004296 <_svfiprintf_r+0xea>
 800425e:	06d0      	lsls	r0, r2, #27
 8004260:	bf44      	itt	mi
 8004262:	2320      	movmi	r3, #32
 8004264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004268:	0711      	lsls	r1, r2, #28
 800426a:	bf44      	itt	mi
 800426c:	232b      	movmi	r3, #43	@ 0x2b
 800426e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004272:	f89a 3000 	ldrb.w	r3, [sl]
 8004276:	2b2a      	cmp	r3, #42	@ 0x2a
 8004278:	d015      	beq.n	80042a6 <_svfiprintf_r+0xfa>
 800427a:	9a07      	ldr	r2, [sp, #28]
 800427c:	4654      	mov	r4, sl
 800427e:	2000      	movs	r0, #0
 8004280:	f04f 0c0a 	mov.w	ip, #10
 8004284:	4621      	mov	r1, r4
 8004286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800428a:	3b30      	subs	r3, #48	@ 0x30
 800428c:	2b09      	cmp	r3, #9
 800428e:	d94b      	bls.n	8004328 <_svfiprintf_r+0x17c>
 8004290:	b1b0      	cbz	r0, 80042c0 <_svfiprintf_r+0x114>
 8004292:	9207      	str	r2, [sp, #28]
 8004294:	e014      	b.n	80042c0 <_svfiprintf_r+0x114>
 8004296:	eba0 0308 	sub.w	r3, r0, r8
 800429a:	fa09 f303 	lsl.w	r3, r9, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	46a2      	mov	sl, r4
 80042a4:	e7d2      	b.n	800424c <_svfiprintf_r+0xa0>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	1d19      	adds	r1, r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	9103      	str	r1, [sp, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bfbb      	ittet	lt
 80042b2:	425b      	neglt	r3, r3
 80042b4:	f042 0202 	orrlt.w	r2, r2, #2
 80042b8:	9307      	strge	r3, [sp, #28]
 80042ba:	9307      	strlt	r3, [sp, #28]
 80042bc:	bfb8      	it	lt
 80042be:	9204      	strlt	r2, [sp, #16]
 80042c0:	7823      	ldrb	r3, [r4, #0]
 80042c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80042c4:	d10a      	bne.n	80042dc <_svfiprintf_r+0x130>
 80042c6:	7863      	ldrb	r3, [r4, #1]
 80042c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80042ca:	d132      	bne.n	8004332 <_svfiprintf_r+0x186>
 80042cc:	9b03      	ldr	r3, [sp, #12]
 80042ce:	1d1a      	adds	r2, r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	9203      	str	r2, [sp, #12]
 80042d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042d8:	3402      	adds	r4, #2
 80042da:	9305      	str	r3, [sp, #20]
 80042dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043a0 <_svfiprintf_r+0x1f4>
 80042e0:	7821      	ldrb	r1, [r4, #0]
 80042e2:	2203      	movs	r2, #3
 80042e4:	4650      	mov	r0, sl
 80042e6:	f7fb ff73 	bl	80001d0 <memchr>
 80042ea:	b138      	cbz	r0, 80042fc <_svfiprintf_r+0x150>
 80042ec:	9b04      	ldr	r3, [sp, #16]
 80042ee:	eba0 000a 	sub.w	r0, r0, sl
 80042f2:	2240      	movs	r2, #64	@ 0x40
 80042f4:	4082      	lsls	r2, r0
 80042f6:	4313      	orrs	r3, r2
 80042f8:	3401      	adds	r4, #1
 80042fa:	9304      	str	r3, [sp, #16]
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	4824      	ldr	r0, [pc, #144]	@ (8004394 <_svfiprintf_r+0x1e8>)
 8004302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004306:	2206      	movs	r2, #6
 8004308:	f7fb ff62 	bl	80001d0 <memchr>
 800430c:	2800      	cmp	r0, #0
 800430e:	d036      	beq.n	800437e <_svfiprintf_r+0x1d2>
 8004310:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <_svfiprintf_r+0x1ec>)
 8004312:	bb1b      	cbnz	r3, 800435c <_svfiprintf_r+0x1b0>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	3307      	adds	r3, #7
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	3308      	adds	r3, #8
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004322:	4433      	add	r3, r6
 8004324:	9309      	str	r3, [sp, #36]	@ 0x24
 8004326:	e76a      	b.n	80041fe <_svfiprintf_r+0x52>
 8004328:	fb0c 3202 	mla	r2, ip, r2, r3
 800432c:	460c      	mov	r4, r1
 800432e:	2001      	movs	r0, #1
 8004330:	e7a8      	b.n	8004284 <_svfiprintf_r+0xd8>
 8004332:	2300      	movs	r3, #0
 8004334:	3401      	adds	r4, #1
 8004336:	9305      	str	r3, [sp, #20]
 8004338:	4619      	mov	r1, r3
 800433a:	f04f 0c0a 	mov.w	ip, #10
 800433e:	4620      	mov	r0, r4
 8004340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004344:	3a30      	subs	r2, #48	@ 0x30
 8004346:	2a09      	cmp	r2, #9
 8004348:	d903      	bls.n	8004352 <_svfiprintf_r+0x1a6>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0c6      	beq.n	80042dc <_svfiprintf_r+0x130>
 800434e:	9105      	str	r1, [sp, #20]
 8004350:	e7c4      	b.n	80042dc <_svfiprintf_r+0x130>
 8004352:	fb0c 2101 	mla	r1, ip, r1, r2
 8004356:	4604      	mov	r4, r0
 8004358:	2301      	movs	r3, #1
 800435a:	e7f0      	b.n	800433e <_svfiprintf_r+0x192>
 800435c:	ab03      	add	r3, sp, #12
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	462a      	mov	r2, r5
 8004362:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <_svfiprintf_r+0x1f0>)
 8004364:	a904      	add	r1, sp, #16
 8004366:	4638      	mov	r0, r7
 8004368:	f3af 8000 	nop.w
 800436c:	1c42      	adds	r2, r0, #1
 800436e:	4606      	mov	r6, r0
 8004370:	d1d6      	bne.n	8004320 <_svfiprintf_r+0x174>
 8004372:	89ab      	ldrh	r3, [r5, #12]
 8004374:	065b      	lsls	r3, r3, #25
 8004376:	f53f af2d 	bmi.w	80041d4 <_svfiprintf_r+0x28>
 800437a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800437c:	e72c      	b.n	80041d8 <_svfiprintf_r+0x2c>
 800437e:	ab03      	add	r3, sp, #12
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	462a      	mov	r2, r5
 8004384:	4b05      	ldr	r3, [pc, #20]	@ (800439c <_svfiprintf_r+0x1f0>)
 8004386:	a904      	add	r1, sp, #16
 8004388:	4638      	mov	r0, r7
 800438a:	f000 f879 	bl	8004480 <_printf_i>
 800438e:	e7ed      	b.n	800436c <_svfiprintf_r+0x1c0>
 8004390:	080047d8 	.word	0x080047d8
 8004394:	080047e2 	.word	0x080047e2
 8004398:	00000000 	.word	0x00000000
 800439c:	080040f5 	.word	0x080040f5
 80043a0:	080047de 	.word	0x080047de

080043a4 <_printf_common>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	4616      	mov	r6, r2
 80043aa:	4698      	mov	r8, r3
 80043ac:	688a      	ldr	r2, [r1, #8]
 80043ae:	690b      	ldr	r3, [r1, #16]
 80043b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043b4:	4293      	cmp	r3, r2
 80043b6:	bfb8      	it	lt
 80043b8:	4613      	movlt	r3, r2
 80043ba:	6033      	str	r3, [r6, #0]
 80043bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043c0:	4607      	mov	r7, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	b10a      	cbz	r2, 80043ca <_printf_common+0x26>
 80043c6:	3301      	adds	r3, #1
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	0699      	lsls	r1, r3, #26
 80043ce:	bf42      	ittt	mi
 80043d0:	6833      	ldrmi	r3, [r6, #0]
 80043d2:	3302      	addmi	r3, #2
 80043d4:	6033      	strmi	r3, [r6, #0]
 80043d6:	6825      	ldr	r5, [r4, #0]
 80043d8:	f015 0506 	ands.w	r5, r5, #6
 80043dc:	d106      	bne.n	80043ec <_printf_common+0x48>
 80043de:	f104 0a19 	add.w	sl, r4, #25
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	6832      	ldr	r2, [r6, #0]
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dc26      	bgt.n	800443a <_printf_common+0x96>
 80043ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	3b00      	subs	r3, #0
 80043f4:	bf18      	it	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	0692      	lsls	r2, r2, #26
 80043fa:	d42b      	bmi.n	8004454 <_printf_common+0xb0>
 80043fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004400:	4641      	mov	r1, r8
 8004402:	4638      	mov	r0, r7
 8004404:	47c8      	blx	r9
 8004406:	3001      	adds	r0, #1
 8004408:	d01e      	beq.n	8004448 <_printf_common+0xa4>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	f003 0306 	and.w	r3, r3, #6
 8004412:	2b04      	cmp	r3, #4
 8004414:	bf02      	ittt	eq
 8004416:	68e5      	ldreq	r5, [r4, #12]
 8004418:	6833      	ldreq	r3, [r6, #0]
 800441a:	1aed      	subeq	r5, r5, r3
 800441c:	68a3      	ldr	r3, [r4, #8]
 800441e:	bf0c      	ite	eq
 8004420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004424:	2500      	movne	r5, #0
 8004426:	4293      	cmp	r3, r2
 8004428:	bfc4      	itt	gt
 800442a:	1a9b      	subgt	r3, r3, r2
 800442c:	18ed      	addgt	r5, r5, r3
 800442e:	2600      	movs	r6, #0
 8004430:	341a      	adds	r4, #26
 8004432:	42b5      	cmp	r5, r6
 8004434:	d11a      	bne.n	800446c <_printf_common+0xc8>
 8004436:	2000      	movs	r0, #0
 8004438:	e008      	b.n	800444c <_printf_common+0xa8>
 800443a:	2301      	movs	r3, #1
 800443c:	4652      	mov	r2, sl
 800443e:	4641      	mov	r1, r8
 8004440:	4638      	mov	r0, r7
 8004442:	47c8      	blx	r9
 8004444:	3001      	adds	r0, #1
 8004446:	d103      	bne.n	8004450 <_printf_common+0xac>
 8004448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	3501      	adds	r5, #1
 8004452:	e7c6      	b.n	80043e2 <_printf_common+0x3e>
 8004454:	18e1      	adds	r1, r4, r3
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	2030      	movs	r0, #48	@ 0x30
 800445a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800445e:	4422      	add	r2, r4
 8004460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004468:	3302      	adds	r3, #2
 800446a:	e7c7      	b.n	80043fc <_printf_common+0x58>
 800446c:	2301      	movs	r3, #1
 800446e:	4622      	mov	r2, r4
 8004470:	4641      	mov	r1, r8
 8004472:	4638      	mov	r0, r7
 8004474:	47c8      	blx	r9
 8004476:	3001      	adds	r0, #1
 8004478:	d0e6      	beq.n	8004448 <_printf_common+0xa4>
 800447a:	3601      	adds	r6, #1
 800447c:	e7d9      	b.n	8004432 <_printf_common+0x8e>
	...

08004480 <_printf_i>:
 8004480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	7e0f      	ldrb	r7, [r1, #24]
 8004486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004488:	2f78      	cmp	r7, #120	@ 0x78
 800448a:	4691      	mov	r9, r2
 800448c:	4680      	mov	r8, r0
 800448e:	460c      	mov	r4, r1
 8004490:	469a      	mov	sl, r3
 8004492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004496:	d807      	bhi.n	80044a8 <_printf_i+0x28>
 8004498:	2f62      	cmp	r7, #98	@ 0x62
 800449a:	d80a      	bhi.n	80044b2 <_printf_i+0x32>
 800449c:	2f00      	cmp	r7, #0
 800449e:	f000 80d2 	beq.w	8004646 <_printf_i+0x1c6>
 80044a2:	2f58      	cmp	r7, #88	@ 0x58
 80044a4:	f000 80b9 	beq.w	800461a <_printf_i+0x19a>
 80044a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044b0:	e03a      	b.n	8004528 <_printf_i+0xa8>
 80044b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044b6:	2b15      	cmp	r3, #21
 80044b8:	d8f6      	bhi.n	80044a8 <_printf_i+0x28>
 80044ba:	a101      	add	r1, pc, #4	@ (adr r1, 80044c0 <_printf_i+0x40>)
 80044bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c0:	08004519 	.word	0x08004519
 80044c4:	0800452d 	.word	0x0800452d
 80044c8:	080044a9 	.word	0x080044a9
 80044cc:	080044a9 	.word	0x080044a9
 80044d0:	080044a9 	.word	0x080044a9
 80044d4:	080044a9 	.word	0x080044a9
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	080044a9 	.word	0x080044a9
 80044e0:	080044a9 	.word	0x080044a9
 80044e4:	080044a9 	.word	0x080044a9
 80044e8:	080044a9 	.word	0x080044a9
 80044ec:	0800462d 	.word	0x0800462d
 80044f0:	08004557 	.word	0x08004557
 80044f4:	080045e7 	.word	0x080045e7
 80044f8:	080044a9 	.word	0x080044a9
 80044fc:	080044a9 	.word	0x080044a9
 8004500:	0800464f 	.word	0x0800464f
 8004504:	080044a9 	.word	0x080044a9
 8004508:	08004557 	.word	0x08004557
 800450c:	080044a9 	.word	0x080044a9
 8004510:	080044a9 	.word	0x080044a9
 8004514:	080045ef 	.word	0x080045ef
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6032      	str	r2, [r6, #0]
 8004520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004528:	2301      	movs	r3, #1
 800452a:	e09d      	b.n	8004668 <_printf_i+0x1e8>
 800452c:	6833      	ldr	r3, [r6, #0]
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	1d19      	adds	r1, r3, #4
 8004532:	6031      	str	r1, [r6, #0]
 8004534:	0606      	lsls	r6, r0, #24
 8004536:	d501      	bpl.n	800453c <_printf_i+0xbc>
 8004538:	681d      	ldr	r5, [r3, #0]
 800453a:	e003      	b.n	8004544 <_printf_i+0xc4>
 800453c:	0645      	lsls	r5, r0, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0xb8>
 8004540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004544:	2d00      	cmp	r5, #0
 8004546:	da03      	bge.n	8004550 <_printf_i+0xd0>
 8004548:	232d      	movs	r3, #45	@ 0x2d
 800454a:	426d      	negs	r5, r5
 800454c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004550:	4859      	ldr	r0, [pc, #356]	@ (80046b8 <_printf_i+0x238>)
 8004552:	230a      	movs	r3, #10
 8004554:	e011      	b.n	800457a <_printf_i+0xfa>
 8004556:	6821      	ldr	r1, [r4, #0]
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	0608      	lsls	r0, r1, #24
 800455c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004560:	d402      	bmi.n	8004568 <_printf_i+0xe8>
 8004562:	0649      	lsls	r1, r1, #25
 8004564:	bf48      	it	mi
 8004566:	b2ad      	uxthmi	r5, r5
 8004568:	2f6f      	cmp	r7, #111	@ 0x6f
 800456a:	4853      	ldr	r0, [pc, #332]	@ (80046b8 <_printf_i+0x238>)
 800456c:	6033      	str	r3, [r6, #0]
 800456e:	bf14      	ite	ne
 8004570:	230a      	movne	r3, #10
 8004572:	2308      	moveq	r3, #8
 8004574:	2100      	movs	r1, #0
 8004576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800457a:	6866      	ldr	r6, [r4, #4]
 800457c:	60a6      	str	r6, [r4, #8]
 800457e:	2e00      	cmp	r6, #0
 8004580:	bfa2      	ittt	ge
 8004582:	6821      	ldrge	r1, [r4, #0]
 8004584:	f021 0104 	bicge.w	r1, r1, #4
 8004588:	6021      	strge	r1, [r4, #0]
 800458a:	b90d      	cbnz	r5, 8004590 <_printf_i+0x110>
 800458c:	2e00      	cmp	r6, #0
 800458e:	d04b      	beq.n	8004628 <_printf_i+0x1a8>
 8004590:	4616      	mov	r6, r2
 8004592:	fbb5 f1f3 	udiv	r1, r5, r3
 8004596:	fb03 5711 	mls	r7, r3, r1, r5
 800459a:	5dc7      	ldrb	r7, [r0, r7]
 800459c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045a0:	462f      	mov	r7, r5
 80045a2:	42bb      	cmp	r3, r7
 80045a4:	460d      	mov	r5, r1
 80045a6:	d9f4      	bls.n	8004592 <_printf_i+0x112>
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d10b      	bne.n	80045c4 <_printf_i+0x144>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	07df      	lsls	r7, r3, #31
 80045b0:	d508      	bpl.n	80045c4 <_printf_i+0x144>
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	6861      	ldr	r1, [r4, #4]
 80045b6:	4299      	cmp	r1, r3
 80045b8:	bfde      	ittt	le
 80045ba:	2330      	movle	r3, #48	@ 0x30
 80045bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80045c4:	1b92      	subs	r2, r2, r6
 80045c6:	6122      	str	r2, [r4, #16]
 80045c8:	f8cd a000 	str.w	sl, [sp]
 80045cc:	464b      	mov	r3, r9
 80045ce:	aa03      	add	r2, sp, #12
 80045d0:	4621      	mov	r1, r4
 80045d2:	4640      	mov	r0, r8
 80045d4:	f7ff fee6 	bl	80043a4 <_printf_common>
 80045d8:	3001      	adds	r0, #1
 80045da:	d14a      	bne.n	8004672 <_printf_i+0x1f2>
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045e0:	b004      	add	sp, #16
 80045e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	f043 0320 	orr.w	r3, r3, #32
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	4833      	ldr	r0, [pc, #204]	@ (80046bc <_printf_i+0x23c>)
 80045f0:	2778      	movs	r7, #120	@ 0x78
 80045f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	6831      	ldr	r1, [r6, #0]
 80045fa:	061f      	lsls	r7, r3, #24
 80045fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004600:	d402      	bmi.n	8004608 <_printf_i+0x188>
 8004602:	065f      	lsls	r7, r3, #25
 8004604:	bf48      	it	mi
 8004606:	b2ad      	uxthmi	r5, r5
 8004608:	6031      	str	r1, [r6, #0]
 800460a:	07d9      	lsls	r1, r3, #31
 800460c:	bf44      	itt	mi
 800460e:	f043 0320 	orrmi.w	r3, r3, #32
 8004612:	6023      	strmi	r3, [r4, #0]
 8004614:	b11d      	cbz	r5, 800461e <_printf_i+0x19e>
 8004616:	2310      	movs	r3, #16
 8004618:	e7ac      	b.n	8004574 <_printf_i+0xf4>
 800461a:	4827      	ldr	r0, [pc, #156]	@ (80046b8 <_printf_i+0x238>)
 800461c:	e7e9      	b.n	80045f2 <_printf_i+0x172>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	f023 0320 	bic.w	r3, r3, #32
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	e7f6      	b.n	8004616 <_printf_i+0x196>
 8004628:	4616      	mov	r6, r2
 800462a:	e7bd      	b.n	80045a8 <_printf_i+0x128>
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	6825      	ldr	r5, [r4, #0]
 8004630:	6961      	ldr	r1, [r4, #20]
 8004632:	1d18      	adds	r0, r3, #4
 8004634:	6030      	str	r0, [r6, #0]
 8004636:	062e      	lsls	r6, r5, #24
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	d501      	bpl.n	8004640 <_printf_i+0x1c0>
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	e002      	b.n	8004646 <_printf_i+0x1c6>
 8004640:	0668      	lsls	r0, r5, #25
 8004642:	d5fb      	bpl.n	800463c <_printf_i+0x1bc>
 8004644:	8019      	strh	r1, [r3, #0]
 8004646:	2300      	movs	r3, #0
 8004648:	6123      	str	r3, [r4, #16]
 800464a:	4616      	mov	r6, r2
 800464c:	e7bc      	b.n	80045c8 <_printf_i+0x148>
 800464e:	6833      	ldr	r3, [r6, #0]
 8004650:	1d1a      	adds	r2, r3, #4
 8004652:	6032      	str	r2, [r6, #0]
 8004654:	681e      	ldr	r6, [r3, #0]
 8004656:	6862      	ldr	r2, [r4, #4]
 8004658:	2100      	movs	r1, #0
 800465a:	4630      	mov	r0, r6
 800465c:	f7fb fdb8 	bl	80001d0 <memchr>
 8004660:	b108      	cbz	r0, 8004666 <_printf_i+0x1e6>
 8004662:	1b80      	subs	r0, r0, r6
 8004664:	6060      	str	r0, [r4, #4]
 8004666:	6863      	ldr	r3, [r4, #4]
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	2300      	movs	r3, #0
 800466c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004670:	e7aa      	b.n	80045c8 <_printf_i+0x148>
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	4632      	mov	r2, r6
 8004676:	4649      	mov	r1, r9
 8004678:	4640      	mov	r0, r8
 800467a:	47d0      	blx	sl
 800467c:	3001      	adds	r0, #1
 800467e:	d0ad      	beq.n	80045dc <_printf_i+0x15c>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	079b      	lsls	r3, r3, #30
 8004684:	d413      	bmi.n	80046ae <_printf_i+0x22e>
 8004686:	68e0      	ldr	r0, [r4, #12]
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	4298      	cmp	r0, r3
 800468c:	bfb8      	it	lt
 800468e:	4618      	movlt	r0, r3
 8004690:	e7a6      	b.n	80045e0 <_printf_i+0x160>
 8004692:	2301      	movs	r3, #1
 8004694:	4632      	mov	r2, r6
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	47d0      	blx	sl
 800469c:	3001      	adds	r0, #1
 800469e:	d09d      	beq.n	80045dc <_printf_i+0x15c>
 80046a0:	3501      	adds	r5, #1
 80046a2:	68e3      	ldr	r3, [r4, #12]
 80046a4:	9903      	ldr	r1, [sp, #12]
 80046a6:	1a5b      	subs	r3, r3, r1
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	dcf2      	bgt.n	8004692 <_printf_i+0x212>
 80046ac:	e7eb      	b.n	8004686 <_printf_i+0x206>
 80046ae:	2500      	movs	r5, #0
 80046b0:	f104 0619 	add.w	r6, r4, #25
 80046b4:	e7f5      	b.n	80046a2 <_printf_i+0x222>
 80046b6:	bf00      	nop
 80046b8:	080047e9 	.word	0x080047e9
 80046bc:	080047fa 	.word	0x080047fa

080046c0 <memmove>:
 80046c0:	4288      	cmp	r0, r1
 80046c2:	b510      	push	{r4, lr}
 80046c4:	eb01 0402 	add.w	r4, r1, r2
 80046c8:	d902      	bls.n	80046d0 <memmove+0x10>
 80046ca:	4284      	cmp	r4, r0
 80046cc:	4623      	mov	r3, r4
 80046ce:	d807      	bhi.n	80046e0 <memmove+0x20>
 80046d0:	1e43      	subs	r3, r0, #1
 80046d2:	42a1      	cmp	r1, r4
 80046d4:	d008      	beq.n	80046e8 <memmove+0x28>
 80046d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046de:	e7f8      	b.n	80046d2 <memmove+0x12>
 80046e0:	4402      	add	r2, r0
 80046e2:	4601      	mov	r1, r0
 80046e4:	428a      	cmp	r2, r1
 80046e6:	d100      	bne.n	80046ea <memmove+0x2a>
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046f2:	e7f7      	b.n	80046e4 <memmove+0x24>

080046f4 <_sbrk_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4d06      	ldr	r5, [pc, #24]	@ (8004710 <_sbrk_r+0x1c>)
 80046f8:	2300      	movs	r3, #0
 80046fa:	4604      	mov	r4, r0
 80046fc:	4608      	mov	r0, r1
 80046fe:	602b      	str	r3, [r5, #0]
 8004700:	f7fc f9bc 	bl	8000a7c <_sbrk>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d102      	bne.n	800470e <_sbrk_r+0x1a>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	b103      	cbz	r3, 800470e <_sbrk_r+0x1a>
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	bd38      	pop	{r3, r4, r5, pc}
 8004710:	20000214 	.word	0x20000214

08004714 <memcpy>:
 8004714:	440a      	add	r2, r1
 8004716:	4291      	cmp	r1, r2
 8004718:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800471c:	d100      	bne.n	8004720 <memcpy+0xc>
 800471e:	4770      	bx	lr
 8004720:	b510      	push	{r4, lr}
 8004722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800472a:	4291      	cmp	r1, r2
 800472c:	d1f9      	bne.n	8004722 <memcpy+0xe>
 800472e:	bd10      	pop	{r4, pc}

08004730 <_realloc_r>:
 8004730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004734:	4680      	mov	r8, r0
 8004736:	4615      	mov	r5, r2
 8004738:	460c      	mov	r4, r1
 800473a:	b921      	cbnz	r1, 8004746 <_realloc_r+0x16>
 800473c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004740:	4611      	mov	r1, r2
 8004742:	f7ff bc4b 	b.w	8003fdc <_malloc_r>
 8004746:	b92a      	cbnz	r2, 8004754 <_realloc_r+0x24>
 8004748:	f7ff fbdc 	bl	8003f04 <_free_r>
 800474c:	2400      	movs	r4, #0
 800474e:	4620      	mov	r0, r4
 8004750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004754:	f000 f81a 	bl	800478c <_malloc_usable_size_r>
 8004758:	4285      	cmp	r5, r0
 800475a:	4606      	mov	r6, r0
 800475c:	d802      	bhi.n	8004764 <_realloc_r+0x34>
 800475e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004762:	d8f4      	bhi.n	800474e <_realloc_r+0x1e>
 8004764:	4629      	mov	r1, r5
 8004766:	4640      	mov	r0, r8
 8004768:	f7ff fc38 	bl	8003fdc <_malloc_r>
 800476c:	4607      	mov	r7, r0
 800476e:	2800      	cmp	r0, #0
 8004770:	d0ec      	beq.n	800474c <_realloc_r+0x1c>
 8004772:	42b5      	cmp	r5, r6
 8004774:	462a      	mov	r2, r5
 8004776:	4621      	mov	r1, r4
 8004778:	bf28      	it	cs
 800477a:	4632      	movcs	r2, r6
 800477c:	f7ff ffca 	bl	8004714 <memcpy>
 8004780:	4621      	mov	r1, r4
 8004782:	4640      	mov	r0, r8
 8004784:	f7ff fbbe 	bl	8003f04 <_free_r>
 8004788:	463c      	mov	r4, r7
 800478a:	e7e0      	b.n	800474e <_realloc_r+0x1e>

0800478c <_malloc_usable_size_r>:
 800478c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004790:	1f18      	subs	r0, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfbc      	itt	lt
 8004796:	580b      	ldrlt	r3, [r1, r0]
 8004798:	18c0      	addlt	r0, r0, r3
 800479a:	4770      	bx	lr

0800479c <_init>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr

080047a8 <_fini>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr
